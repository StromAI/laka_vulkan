{
    "vkGetInstanceProcAddr": {
      "core": [
        {
          "vuid": "instance",
          "text": " If instance is not NULL, instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pName",
          "text": " pName must be a null-terminated UTF-8 string"
        }
      ]
    },
    "vkGetDeviceProcAddr": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pName",
          "text": " pName must be a null-terminated UTF-8 string"
        }
      ]
    },
    "vkEnumerateInstanceVersion": {
      "(VK_VERSION_1_1)": [
        {
          "vuid": "pApiVersion",
          "text": " pApiVersion must be a valid pointer to a uint32_t value"
        }
      ]
    },
    "vkCreateInstance": {
      "core": [
        {
          "vuid": "ppEnabledExtensionNames",
          "text": " All extended-functionality-extensions-dependencies, required extensions for each extension in the VkInstanceCreateInfo::ppEnabledExtensionNames list must also be present in that list."
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkInstanceCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pInstance",
          "text": " pInstance must be a valid pointer to a VkInstance handle"
        }
      ]
    },
    "VkInstanceCreateInfo": {
      "core": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDebugReportCallbackCreateInfoEXT, VkDebugUtilsMessengerCreateInfoEXT, or VkValidationFlagsEXT"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pApplicationInfo",
          "text": " If pApplicationInfo is not NULL, pApplicationInfo must be a valid pointer to a valid VkApplicationInfo structure"
        },
        {
          "vuid": "ppEnabledLayerNames",
          "text": " If enabledLayerCount is not 0, ppEnabledLayerNames must be a valid pointer to an array of enabledLayerCount null-terminated UTF-8 strings"
        },
        {
          "vuid": "ppEnabledExtensionNames",
          "text": " If enabledExtensionCount is not 0, ppEnabledExtensionNames must be a valid pointer to an array of enabledExtensionCount null-terminated UTF-8 strings"
        }
      ]
    },
    "VkValidationFlagsEXT": {
      "(VK_EXT_validation_flags)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT"
        },
        {
          "vuid": "pDisabledValidationChecks",
          "text": " pDisabledValidationChecks must be a valid pointer to an array of disabledValidationCheckCount valid VkValidationCheckEXT values"
        },
        {
          "vuid": "disabledValidationCheckCount",
          "text": " disabledValidationCheckCount must be greater than 0"
        }
      ]
    },
    "VkApplicationInfo": {
      "core": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_APPLICATION_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "pApplicationName",
          "text": " If pApplicationName is not NULL, pApplicationName must be a null-terminated UTF-8 string"
        },
        {
          "vuid": "pEngineName",
          "text": " If pEngineName is not NULL, pEngineName must be a null-terminated UTF-8 string"
        }
      ]
    },
    "vkDestroyInstance": {
      "core": [
        {
          "vuid": "instance",
          "text": " All child objects created using instance must have been destroyed prior to destroying instance"
        },
        {
          "vuid": "instance",
          "text": " If VkAllocationCallbacks were provided when instance was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "instance",
          "text": " If no VkAllocationCallbacks were provided when instance was created, pAllocator must be NULL"
        },
        {
          "vuid": "instance",
          "text": " If instance is not NULL, instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        }
      ]
    },
    "vkEnumeratePhysicalDevices": {
      "core": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pPhysicalDeviceCount",
          "text": " pPhysicalDeviceCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pPhysicalDevices",
          "text": " If the value referenced by pPhysicalDeviceCount is not 0, and pPhysicalDevices is not NULL, pPhysicalDevices must be a valid pointer to an array of pPhysicalDeviceCount VkPhysicalDevice handles"
        }
      ]
    },
    "vkGetPhysicalDeviceProperties": {
      "core": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pProperties",
          "text": " pProperties must be a valid pointer to a VkPhysicalDeviceProperties structure"
        }
      ]
    },
    "vkGetPhysicalDeviceProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pProperties",
          "text": " pProperties must be a valid pointer to a VkPhysicalDeviceProperties2 structure"
        }
      ]
    },
    "VkPhysicalDeviceProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, VkPhysicalDeviceConservativeRasterizationPropertiesEXT, VkPhysicalDeviceDescriptorIndexingPropertiesEXT, VkPhysicalDeviceDiscardRectanglePropertiesEXT, VkPhysicalDeviceExternalMemoryHostPropertiesEXT, VkPhysicalDeviceIDProperties, VkPhysicalDeviceInlineUniformBlockPropertiesEXT, VkPhysicalDeviceMaintenance3Properties, VkPhysicalDeviceMeshShaderPropertiesNV, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, VkPhysicalDeviceMultiviewProperties, VkPhysicalDevicePointClippingProperties, VkPhysicalDeviceProtectedMemoryProperties, VkPhysicalDevicePushDescriptorPropertiesKHR, VkPhysicalDeviceRaytracingPropertiesNVX, VkPhysicalDeviceSampleLocationsPropertiesEXT, VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT, VkPhysicalDeviceShaderCorePropertiesAMD, VkPhysicalDeviceSubgroupProperties, or VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        }
      ]
    },
    "VkPhysicalDeviceIDProperties": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)+(VK_VERSION_1_1,VK_KHR_external_memory_capabilities,VK_KHR_external_semaphore_capabilities,VK_KHR_external_fence_capabilities)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"
        }
      ]
    },
    "vkGetPhysicalDeviceQueueFamilyProperties": {
      "core": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pQueueFamilyPropertyCount",
          "text": " pQueueFamilyPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pQueueFamilyProperties",
          "text": " If the value referenced by pQueueFamilyPropertyCount is not 0, and pQueueFamilyProperties is not NULL, pQueueFamilyProperties must be a valid pointer to an array of pQueueFamilyPropertyCount VkQueueFamilyProperties structures"
        }
      ]
    },
    "vkGetPhysicalDeviceQueueFamilyProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pQueueFamilyPropertyCount",
          "text": " pQueueFamilyPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pQueueFamilyProperties",
          "text": " If the value referenced by pQueueFamilyPropertyCount is not 0, and pQueueFamilyProperties is not NULL, pQueueFamilyProperties must be a valid pointer to an array of pQueueFamilyPropertyCount VkQueueFamilyProperties2 structures"
        }
      ]
    },
    "VkQueueFamilyProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkQueueFamilyCheckpointPropertiesNV"
        }
      ]
    },
    "VkQueueFamilyCheckpointPropertiesNV": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)+(VK_NV_device_diagnostic_checkpoints)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV"
        }
      ]
    },
    "vkEnumeratePhysicalDeviceGroups": {
      "(VK_VERSION_1_1,VK_KHR_device_group_creation)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pPhysicalDeviceGroupCount",
          "text": " pPhysicalDeviceGroupCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pPhysicalDeviceGroupProperties",
          "text": " If the value referenced by pPhysicalDeviceGroupCount is not 0, and pPhysicalDeviceGroupProperties is not NULL, pPhysicalDeviceGroupProperties must be a valid pointer to an array of pPhysicalDeviceGroupCount VkPhysicalDeviceGroupProperties structures"
        }
      ]
    },
    "vkCreateDevice": {
      "core": [
        {
          "vuid": "ppEnabledExtensionNames",
          "text": " All extended-functionality-extensions-dependencies, required extensions for each extension in the VkDeviceCreateInfo::ppEnabledExtensionNames list must also be present in that list."
        },
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkDeviceCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pDevice",
          "text": " pDevice must be a valid pointer to a VkDevice handle"
        }
      ]
    },
    "VkDeviceCreateInfo": {
      "core": [
        {
          "vuid": "queueFamilyIndex",
          "text": ""
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDeviceGroupDeviceCreateInfo, VkPhysicalDevice16BitStorageFeatures, VkPhysicalDevice8BitStorageFeaturesKHR, VkPhysicalDeviceASTCDecodeFeaturesEXT, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, VkPhysicalDeviceConditionalRenderingFeaturesEXT, VkPhysicalDeviceCornerSampledImageFeaturesNV, VkPhysicalDeviceDescriptorIndexingFeaturesEXT, VkPhysicalDeviceExclusiveScissorFeaturesNV, VkPhysicalDeviceFeatures2, VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV, VkPhysicalDeviceInlineUniformBlockFeaturesEXT, VkPhysicalDeviceMeshShaderFeaturesNV, VkPhysicalDeviceMultiviewFeatures, VkPhysicalDeviceProtectedMemoryFeatures, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, VkPhysicalDeviceSamplerYcbcrConversionFeatures, VkPhysicalDeviceShaderDrawParameterFeatures, VkPhysicalDeviceShaderImageFootprintFeaturesNV, VkPhysicalDeviceShadingRateImageFeaturesNV, VkPhysicalDeviceVariablePointerFeatures, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, or VkPhysicalDeviceVulkanMemoryModelFeaturesKHR"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pQueueCreateInfos",
          "text": " pQueueCreateInfos must be a valid pointer to an array of queueCreateInfoCount valid VkDeviceQueueCreateInfo structures"
        },
        {
          "vuid": "ppEnabledLayerNames",
          "text": " If enabledLayerCount is not 0, ppEnabledLayerNames must be a valid pointer to an array of enabledLayerCount null-terminated UTF-8 strings"
        },
        {
          "vuid": "ppEnabledExtensionNames",
          "text": " If enabledExtensionCount is not 0, ppEnabledExtensionNames must be a valid pointer to an array of enabledExtensionCount null-terminated UTF-8 strings"
        },
        {
          "vuid": "pEnabledFeatures",
          "text": " If pEnabledFeatures is not NULL, pEnabledFeatures must be a valid pointer to a valid VkPhysicalDeviceFeatures structure"
        },
        {
          "vuid": "queueCreateInfoCount",
          "text": " queueCreateInfoCount must be greater than 0"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes a VkPhysicalDeviceFeatures2 structure, then pEnabledFeatures must be NULL"
        }
      ],
      "(VK_AMD_negative_viewport_height)+(VK_VERSION_1_1)": [
        {
          "vuid": "ppEnabledExtensionNames",
          "text": " ppEnabledExtensionNames must not contain VK_AMD_negative_viewport_height"
        }
      ],
      "(VK_AMD_negative_viewport_height)+!(VK_VERSION_1_1)+(VK_KHR_maintenance1)": [
        {
          "vuid": "ppEnabledExtensionNames",
          "text": " ppEnabledExtensionNames must not contain both VK_KHR_maintenance1 and VK_AMD_negative_viewport_height"
        }
      ]
    },
    "VkDeviceGroupDeviceCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_device_group_creation)": [
        {
          "vuid": "pPhysicalDevices",
          "text": " Each element of pPhysicalDevices must be unique"
        },
        {
          "vuid": "pPhysicalDevices",
          "text": " All elements of pPhysicalDevices must be in the same device group as enumerated by vkEnumeratePhysicalDeviceGroups"
        },
        {
          "vuid": "physicalDeviceCount",
          "text": " If physicalDeviceCount is not 0, the physicalDevice parameter of vkCreateDevice must be an element of pPhysicalDevices."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO"
        },
        {
          "vuid": "pPhysicalDevices",
          "text": " If physicalDeviceCount is not 0, pPhysicalDevices must be a valid pointer to an array of physicalDeviceCount valid VkPhysicalDevice handles"
        }
      ]
    },
    "vkDestroyDevice": {
      "core": [
        {
          "vuid": "device",
          "text": " All child objects created on device must have been destroyed prior to destroying device"
        },
        {
          "vuid": "device",
          "text": " If VkAllocationCallbacks were provided when device was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "device",
          "text": " If no VkAllocationCallbacks were provided when device was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " If device is not NULL, device must be a valid VkDevice handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        }
      ]
    },
    "VkDeviceQueueCreateInfo": {
      "core": [
        {
          "vuid": "queueFamilyIndex",
          "text": " queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties"
        },
        {
          "vuid": "queueCount",
          "text": " queueCount must be less than or equal to the queueCount member of the VkQueueFamilyProperties structure, as returned by vkGetPhysicalDeviceQueueFamilyProperties in the pQueueFamilyProperties[queueFamilyIndex]"
        },
        {
          "vuid": "pQueuePriorities",
          "text": " Each element of pQueuePriorities must be between 0.0 and 1.0 inclusive"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkDeviceQueueGlobalPriorityCreateInfoEXT"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkDeviceQueueCreateFlagBits values"
        },
        {
          "vuid": "pQueuePriorities",
          "text": " pQueuePriorities must be a valid pointer to an array of queueCount float values"
        },
        {
          "vuid": "queueCount",
          "text": " queueCount must be greater than 0"
        }
      ]
    },
    "VkDeviceQueueGlobalPriorityCreateInfoEXT": {
      "(VK_EXT_global_priority)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT"
        },
        {
          "vuid": "globalPriority",
          "text": " globalPriority must be a valid VkQueueGlobalPriorityEXT value"
        }
      ]
    },
    "vkGetDeviceQueue": {
      "core": [
        {
          "vuid": "queueFamilyIndex",
          "text": " queueFamilyIndex must be one of the queue family indices specified when device was created, via the VkDeviceQueueCreateInfo structure"
        },
        {
          "vuid": "queueIndex",
          "text": " queueIndex must be less than the number of queues created for the specified queue family index when device was created, via the queueCount member of the VkDeviceQueueCreateInfo structure"
        },
        {
          "vuid": "flags",
          "text": " VkDeviceQueueCreateInfo::flags must have been set to zero when device was created"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pQueue",
          "text": " pQueue must be a valid pointer to a VkQueue handle"
        }
      ]
    },
    "vkGetDeviceQueue2": {
      "(VK_VERSION_1_1)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pQueueInfo",
          "text": " pQueueInfo must be a valid pointer to a valid VkDeviceQueueInfo2 structure"
        },
        {
          "vuid": "pQueue",
          "text": " pQueue must be a valid pointer to a VkQueue handle"
        }
      ]
    },
    "VkDeviceQueueInfo2": {
      "(VK_VERSION_1_1)": [
        {
          "vuid": "queueFamilyIndex",
          "text": " queueFamilyIndex must be one of the queue family indices specified when device was created, via the VkDeviceQueueCreateInfo structure"
        },
        {
          "vuid": "queueIndex",
          "text": " queueIndex must be less than the number of queues created for the specified queue family index and VkDeviceQueueCreateFlags member flags equal to this flags value when device was created, via the queueCount member of the VkDeviceQueueCreateInfo structure"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkDeviceQueueCreateFlagBits values"
        },
        {
          "vuid": "flags",
          "text": " flags must not be 0"
        }
      ]
    },
    "vkCreateCommandPool": {
      "core": [
        {
          "vuid": "queueFamilyIndex",
          "text": " pCreateInfo::queueFamilyIndex must be the index of a queue family available in the logical device device."
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkCommandPoolCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pCommandPool",
          "text": " pCommandPool must be a valid pointer to a VkCommandPool handle"
        }
      ]
    },
    "VkCommandPoolCreateInfo": {
      "core": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkCommandPoolCreateFlagBits values"
        }
      ]
    },
    "vkTrimCommandPool": {
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "commandPool",
          "text": " commandPool must be a valid VkCommandPool handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "commandPool",
          "text": " commandPool must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkResetCommandPool": {
      "core": [
        {
          "vuid": "commandPool",
          "text": " All VkCommandBuffer objects allocated from commandPool must not be in the commandbuffers-lifecycle, pending state"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "commandPool",
          "text": " commandPool must be a valid VkCommandPool handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkCommandPoolResetFlagBits values"
        },
        {
          "vuid": "commandPool",
          "text": " commandPool must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkDestroyCommandPool": {
      "core": [
        {
          "vuid": "commandPool",
          "text": " All VkCommandBuffer objects allocated from commandPool must not be in the commandbuffers-lifecycle, pending state."
        },
        {
          "vuid": "commandPool",
          "text": " If VkAllocationCallbacks were provided when commandPool was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "commandPool",
          "text": " If no VkAllocationCallbacks were provided when commandPool was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "commandPool",
          "text": " If commandPool is not VK_NULL_HANDLE, commandPool must be a valid VkCommandPool handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "commandPool",
          "text": " If commandPool is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkAllocateCommandBuffers": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pAllocateInfo",
          "text": " pAllocateInfo must be a valid pointer to a valid VkCommandBufferAllocateInfo structure"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " pCommandBuffers must be a valid pointer to an array of pAllocateInfo::commandBufferCount VkCommandBuffer handles"
        }
      ]
    },
    "VkCommandBufferAllocateInfo": {
      "core": [
        {
          "vuid": "commandBufferCount",
          "text": " commandBufferCount must be greater than 0"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "commandPool",
          "text": " commandPool must be a valid VkCommandPool handle"
        },
        {
          "vuid": "level",
          "text": " level must be a valid VkCommandBufferLevel value"
        }
      ]
    },
    "vkResetCommandBuffer": {
      "core": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must not be in the commandbuffers-lifecycle, pending state"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must have been allocated from a pool that was created with the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkCommandBufferResetFlagBits values"
        }
      ]
    },
    "vkFreeCommandBuffers": {
      "core": [
        {
          "vuid": "pCommandBuffers",
          "text": " All elements of pCommandBuffers must not be in the commandbuffers-lifecycle, pending state"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " pCommandBuffers must be a valid pointer to an array of commandBufferCount VkCommandBuffer handles, each element of which must either be a valid handle or NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "commandPool",
          "text": " commandPool must be a valid VkCommandPool handle"
        },
        {
          "vuid": "commandBufferCount",
          "text": " commandBufferCount must be greater than 0"
        },
        {
          "vuid": "commandPool",
          "text": " commandPool must have been created, allocated, or retrieved from device"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool"
        }
      ]
    },
    "vkBeginCommandBuffer": {
      "core": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must not be in the commandbuffers-lifecycle, recording or pending state."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the commandbuffers-lifecycle, initial state."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a secondary command buffer and either the occlusionQueryEnable member of the pInheritanceInfo member of pBeginInfo is VK_FALSE, or the precise occlusion queries feature is not enabled, the queryFlags member of the pInheritanceInfo member pBeginInfo must not contain VK_QUERY_CONTROL_PRECISE_BIT"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pBeginInfo",
          "text": " pBeginInfo must be a valid pointer to a valid VkCommandBufferBeginInfo structure"
        }
      ]
    },
    "VkCommandBufferBeginInfo": {
      "core": [
        {
          "vuid": "flags",
          "text": " If flags contains VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the renderPass member of pInheritanceInfo must be a valid VkRenderPass"
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the subpass member of pInheritanceInfo must be a valid subpass index within the renderPass member of pInheritanceInfo"
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the framebuffer member of pInheritanceInfo must be either VK_NULL_HANDLE, or a valid VkFramebuffer that is compatible with the renderPass member of pInheritanceInfo"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkDeviceGroupCommandBufferBeginInfo"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkCommandBufferUsageFlagBits values"
        }
      ]
    },
    "VkCommandBufferInheritanceInfo": {
      "core": [
        {
          "vuid": "occlusionQueryEnable",
          "text": " If the features-features-inheritedQueries,inherited queries feature is not enabled, occlusionQueryEnable must be VK_FALSE"
        },
        {
          "vuid": "queryFlags",
          "text": " If the features-features-inheritedQueries,inherited queries feature is enabled, queryFlags must be a valid combination of VkQueryControlFlagBits values"
        },
        {
          "vuid": "pipelineStatistics",
          "text": " If the features-features-pipelineStatisticsQuery,pipeline statistics queries feature is not enabled, pipelineStatistics must be 0"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkCommandBufferInheritanceConditionalRenderingInfoEXT"
        },
        {
          "vuid": "commonparent",
          "text": " Both of framebuffer, and renderPass that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkCommandBufferInheritanceConditionalRenderingInfoEXT": {
      "(VK_EXT_conditional_rendering)": [
        {
          "vuid": "conditionalRenderingEnable",
          "text": " If the features-features-inheritedConditionalRendering, inherited conditional rendering feature is not enabled, conditionalRenderingEnable must be VK_FALSE"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT"
        }
      ]
    },
    "vkEndCommandBuffer": {
      "core": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a primary command buffer, there must not be an active render pass instance"
        },
        {
          "vuid": "commandBuffer",
          "text": " All queries made queries-operation-active,active during the recording of commandBuffer must have been made inactive"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        }
      ],
      "(VK_EXT_conditional_rendering)": [
        {
          "vuid": "None",
          "text": " Conditional rendering must not be active-conditional-rendering,active"
        }
      ],
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a secondary command buffer, there must not be an outstanding vkCmdBeginDebugUtilsLabelEXT command recorded to commandBuffer that has not previously been ended by a call to vkCmdEndDebugUtilsLabelEXT."
        }
      ],
      "(VK_EXT_debug_marker)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a secondary command buffer, there must not be an outstanding vkCmdDebugMarkerBeginEXT command recorded to commandBuffer that has not previously been ended by a call to vkCmdDebugMarkerEndEXT."
        }
      ]
    },
    "vkQueueSubmit": {
      "core": [
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE, fence must be unsignaled"
        },
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE, fence must not be associated with any other queue command that has not yet completed execution on that queue"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " Any calls to vkCmdSetEvent, vkCmdResetEvent or vkCmdWaitEvents that have been recorded into any of the command buffer elements of the pCommandBuffers member of any element of pSubmits, must not reference any VkEvent that is referenced by any of those commands in a command buffer that has been submitted to another queue and is still in the pending state."
        },
        {
          "vuid": "pWaitDstStageMask",
          "text": " Any stage flag included in any element of the pWaitDstStageMask member of any element of pSubmits must be a pipeline stage supported by one of the capabilities of queue, as specified in the synchronization-pipeline-stages-supported, table of supported pipeline stages."
        },
        {
          "vuid": "pSignalSemaphores",
          "text": " Each element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device"
        },
        {
          "vuid": "pWaitSemaphores",
          "text": " When a semaphore unsignal operation defined by any element of the pWaitSemaphores member of any element of pSubmits executes on queue, no other queue must be waiting on the same semaphore."
        },
        {
          "vuid": "pWaitSemaphores",
          "text": " All elements of the pWaitSemaphores member of all elements of pSubmits must be semaphores that are signaled, or have synchronization-semaphores-signaling, semaphore signal operations previously submitted for execution."
        },
        {
          "vuid": "pCommandBuffers",
          "text": " Each element of the pCommandBuffers member of each element of pSubmits must be in the commandbuffers-lifecycle, pending or executable state."
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If any element of the pCommandBuffers member of any element of pSubmits was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, it must not be in the commandbuffers-lifecycle, pending state."
        },
        {
          "vuid": "pCommandBuffers",
          "text": " Any commandbuffers-secondary, secondary command buffers recorded into any element of the pCommandBuffers member of any element of pSubmits must be in the commandbuffers-lifecycle, pending or executable state."
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If any commandbuffers-secondary, secondary command buffers recorded into any element of the pCommandBuffers member of any element of pSubmits was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, it must not be in the commandbuffers-lifecycle, pending state."
        },
        {
          "vuid": "pCommandBuffers",
          "text": " Each element of the pCommandBuffers member of each element of pSubmits must have been allocated from a VkCommandPool that was created for the same queue family queue belongs to."
        },
        {
          "vuid": "pSubmits",
          "text": " If any element of pSubmits-pCommandBuffers includes a synchronization-queue-transfers-acquire, Queue Family Transfer Acquire Operation, there must exist a previously submitted synchronization-queue-transfers-release, Queue Family Transfer Release Operation on a queue in the queue family identified by the acquire operation, with parameters matching the acquire operation as defined in the definition of such synchronization-queue-transfers-acquire, acquire operations, and which happens before the acquire operation."
        },
        {
          "vuid": "queue",
          "text": " queue must be a valid VkQueue handle"
        },
        {
          "vuid": "pSubmits",
          "text": " If submitCount is not 0, pSubmits must be a valid pointer to an array of submitCount valid VkSubmitInfo structures"
        },
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of fence, and queue that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkSubmitInfo": {
      "core": [
        {
          "vuid": "pCommandBuffers",
          "text": " Each element of pCommandBuffers must not have been allocated with VK_COMMAND_BUFFER_LEVEL_SECONDARY"
        },
        {
          "vuid": "pWaitDstStageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, each element of pWaitDstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "pWaitDstStageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, each element of pWaitDstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "pWaitDstStageMask",
          "text": " Each element of pWaitDstStageMask must not include VK_PIPELINE_STAGE_HOST_BIT."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SUBMIT_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkD3D12FenceSubmitInfoKHR, VkDeviceGroupSubmitInfo, VkProtectedSubmitInfo, VkWin32KeyedMutexAcquireReleaseInfoKHR, or VkWin32KeyedMutexAcquireReleaseInfoNV"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "pWaitSemaphores",
          "text": " If waitSemaphoreCount is not 0, pWaitSemaphores must be a valid pointer to an array of waitSemaphoreCount valid VkSemaphore handles"
        },
        {
          "vuid": "pWaitDstStageMask",
          "text": " If waitSemaphoreCount is not 0, pWaitDstStageMask must be a valid pointer to an array of waitSemaphoreCount valid combinations of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "pWaitDstStageMask",
          "text": " Each element of pWaitDstStageMask must not be 0"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If commandBufferCount is not 0, pCommandBuffers must be a valid pointer to an array of commandBufferCount valid VkCommandBuffer handles"
        },
        {
          "vuid": "pSignalSemaphores",
          "text": " If signalSemaphoreCount is not 0, pSignalSemaphores must be a valid pointer to an array of signalSemaphoreCount valid VkSemaphore handles"
        },
        {
          "vuid": "commonparent",
          "text": " Each of the elements of pCommandBuffers, the elements of pSignalSemaphores, and the elements of pWaitSemaphores that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "pWaitDstStageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, each element of pWaitDstStageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "pWaitDstStageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, each element of pWaitDstStageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        }
      ]
    },
    "VkD3D12FenceSubmitInfoKHR": {
      "(VK_KHR_external_semaphore_win32)": [
        {
          "vuid": "waitSemaphoreValuesCount",
          "text": " waitSemaphoreValuesCount must be the same value as VkSubmitInfo::waitSemaphoreCount, where VkSubmitInfo is in the pNext chain of this VkD3D12FenceSubmitInfoKHR structure."
        },
        {
          "vuid": "signalSemaphoreValuesCount",
          "text": " signalSemaphoreValuesCount must be the same value as VkSubmitInfo::signalSemaphoreCount, where VkSubmitInfo is in the pNext chain of this VkD3D12FenceSubmitInfoKHR structure."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR"
        },
        {
          "vuid": "pWaitSemaphoreValues",
          "text": " If waitSemaphoreValuesCount is not 0, and pWaitSemaphoreValues is not NULL, pWaitSemaphoreValues must be a valid pointer to an array of waitSemaphoreValuesCount uint64_t values"
        },
        {
          "vuid": "pSignalSemaphoreValues",
          "text": " If signalSemaphoreValuesCount is not 0, and pSignalSemaphoreValues is not NULL, pSignalSemaphoreValues must be a valid pointer to an array of signalSemaphoreValuesCount uint64_t values"
        }
      ]
    },
    "VkWin32KeyedMutexAcquireReleaseInfoKHR": {
      "(VK_KHR_win32_keyed_mutex)": [
        {
          "vuid": "pAcquireSyncs",
          "text": " Each member of pAcquireSyncs and pReleaseSyncs must be a device memory object imported by setting VkImportMemoryWin32HandleInfoKHR::handleType to VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR"
        },
        {
          "vuid": "pAcquireSyncs",
          "text": " If acquireCount is not 0, pAcquireSyncs must be a valid pointer to an array of acquireCount valid VkDeviceMemory handles"
        },
        {
          "vuid": "pAcquireKeys",
          "text": " If acquireCount is not 0, pAcquireKeys must be a valid pointer to an array of acquireCount uint64_t values"
        },
        {
          "vuid": "pAcquireTimeouts",
          "text": " If acquireCount is not 0, pAcquireTimeouts must be a valid pointer to an array of acquireCount uint32_t values"
        },
        {
          "vuid": "pReleaseSyncs",
          "text": " If releaseCount is not 0, pReleaseSyncs must be a valid pointer to an array of releaseCount valid VkDeviceMemory handles"
        },
        {
          "vuid": "pReleaseKeys",
          "text": " If releaseCount is not 0, pReleaseKeys must be a valid pointer to an array of releaseCount uint64_t values"
        },
        {
          "vuid": "commonparent",
          "text": " Both of the elements of pAcquireSyncs, and the elements of pReleaseSyncs that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkWin32KeyedMutexAcquireReleaseInfoNV": {
      "(VK_NV_win32_keyed_mutex)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV"
        },
        {
          "vuid": "pAcquireSyncs",
          "text": " If acquireCount is not 0, pAcquireSyncs must be a valid pointer to an array of acquireCount valid VkDeviceMemory handles"
        },
        {
          "vuid": "pAcquireKeys",
          "text": " If acquireCount is not 0, pAcquireKeys must be a valid pointer to an array of acquireCount uint64_t values"
        },
        {
          "vuid": "pAcquireTimeoutMilliseconds",
          "text": " If acquireCount is not 0, pAcquireTimeoutMilliseconds must be a valid pointer to an array of acquireCount uint32_t values"
        },
        {
          "vuid": "pReleaseSyncs",
          "text": " If releaseCount is not 0, pReleaseSyncs must be a valid pointer to an array of releaseCount valid VkDeviceMemory handles"
        },
        {
          "vuid": "pReleaseKeys",
          "text": " If releaseCount is not 0, pReleaseKeys must be a valid pointer to an array of releaseCount uint64_t values"
        },
        {
          "vuid": "commonparent",
          "text": " Both of the elements of pAcquireSyncs, and the elements of pReleaseSyncs that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkProtectedSubmitInfo": {
      "(VK_VERSION_1_1)": [
        {
          "vuid": "protectedSubmit",
          "text": " If the protected memory feature is not enabled, protectedSubmit must not be VK_TRUE."
        },
        {
          "vuid": "protectedSubmit",
          "text": " If protectedSubmit is VK_TRUE, then each element of the pCommandBuffers array must be a protected command buffer."
        },
        {
          "vuid": "protectedSubmit",
          "text": " If protectedSubmit is VK_FALSE, then each element of the pCommandBuffers array must be an unprotected command buffer."
        },
        {
          "vuid": "pNext",
          "text": " If the VkSubmitInfo::pNext chain does not include a VkProtectedSubmitInfo structure, then each element of the command buffer of the pCommandBuffers array must be an unprotected command buffer."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO"
        }
      ]
    },
    "VkDeviceGroupSubmitInfo": {
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "waitSemaphoreCount",
          "text": " waitSemaphoreCount must equal VkSubmitInfo::waitSemaphoreCount"
        },
        {
          "vuid": "commandBufferCount",
          "text": " commandBufferCount must equal VkSubmitInfo::commandBufferCount"
        },
        {
          "vuid": "signalSemaphoreCount",
          "text": " signalSemaphoreCount must equal VkSubmitInfo::signalSemaphoreCount"
        },
        {
          "vuid": "pWaitSemaphoreDeviceIndices",
          "text": " All elements of pWaitSemaphoreDeviceIndices and pSignalSemaphoreDeviceIndices must be valid device indices"
        },
        {
          "vuid": "pCommandBufferDeviceMasks",
          "text": " All elements of pCommandBufferDeviceMasks must be valid device masks"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO"
        },
        {
          "vuid": "pWaitSemaphoreDeviceIndices",
          "text": " If waitSemaphoreCount is not 0, pWaitSemaphoreDeviceIndices must be a valid pointer to an array of waitSemaphoreCount uint32_t values"
        },
        {
          "vuid": "pCommandBufferDeviceMasks",
          "text": " If commandBufferCount is not 0, pCommandBufferDeviceMasks must be a valid pointer to an array of commandBufferCount uint32_t values"
        },
        {
          "vuid": "pSignalSemaphoreDeviceIndices",
          "text": " If signalSemaphoreCount is not 0, pSignalSemaphoreDeviceIndices must be a valid pointer to an array of signalSemaphoreCount uint32_t values"
        }
      ]
    },
    "vkCmdExecuteCommands": {
      "core": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must have been allocated with a level of VK_COMMAND_BUFFER_LEVEL_PRIMARY"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " Each element of pCommandBuffers must have been allocated with a level of VK_COMMAND_BUFFER_LEVEL_SECONDARY"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " Each element of pCommandBuffers must be in the commandbuffers-lifecycle, pending or executable state."
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If any element of pCommandBuffers was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag, and it was recorded into any other primary command buffer, that primary command buffer must not be in the commandbuffers-lifecycle, pending state"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If any element of pCommandBuffers was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag, it must not be in the commandbuffers-lifecycle, pending state."
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If any element of pCommandBuffers was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag, it must not have already been recorded to commandBuffer."
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If any element of pCommandBuffers was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag, it must not appear more than once in pCommandBuffers."
        },
        {
          "vuid": "pCommandBuffers",
          "text": " Each element of pCommandBuffers must have been allocated from a VkCommandPool that was created for the same queue family as the VkCommandPool from which commandBuffer was allocated"
        },
        {
          "vuid": "contents",
          "text": " If vkCmdExecuteCommands is being called within a render pass instance, that render pass instance must have been begun with the contents parameter of vkCmdBeginRenderPass set to VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If vkCmdExecuteCommands is being called within a render pass instance, each element of pCommandBuffers must have been recorded with the VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If vkCmdExecuteCommands is being called within a render pass instance, each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::subpass set to the index of the subpass which the given command buffer will be executed in"
        },
        {
          "vuid": "pInheritanceInfo",
          "text": " If vkCmdExecuteCommands is being called within a render pass instance, the render passes specified in the pBeginInfo::pInheritanceInfo::renderPass members of the vkBeginCommandBuffer commands used to begin recording each element of pCommandBuffers must be renderpass-compatibility,compatible with the current render pass."
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If vkCmdExecuteCommands is being called within a render pass instance, and any element of pCommandBuffers was recorded with VkCommandBufferInheritanceInfo::framebuffer not equal to VK_NULL_HANDLE, that VkFramebuffer must match the VkFramebuffer used in the current render pass instance"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " If vkCmdExecuteCommands is not being called within a render pass instance, each element of pCommandBuffers must not have been recorded with the VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT"
        },
        {
          "vuid": "commandBuffer",
          "text": " If the features-features-inheritedQueries,inherited queries feature is not enabled, commandBuffer must not have any queries queries-operation-active,active"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer has a VK_QUERY_TYPE_OCCLUSION query queries-operation-active,active, then each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::occlusionQueryEnable set to VK_TRUE"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer has a VK_QUERY_TYPE_OCCLUSION query queries-operation-active,active, then each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::queryFlags having all bits set that are set for the query"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer has a VK_QUERY_TYPE_PIPELINE_STATISTICS query queries-operation-active,active, then each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::pipelineStatistics having all bits set that are set in the VkQueryPool the query uses"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " Each element of pCommandBuffers must not begin any query types that are queries-operation-active,active in commandBuffer"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pCommandBuffers",
          "text": " pCommandBuffers must be a valid pointer to an array of commandBufferCount valid VkCommandBuffer handles"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations"
        },
        {
          "vuid": "bufferlevel",
          "text": " commandBuffer must be a primary VkCommandBuffer"
        },
        {
          "vuid": "commandBufferCount",
          "text": " commandBufferCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and the elements of pCommandBuffers must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then each element of pCommandBuffers must be a protected command buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then each element of pCommandBuffers must be an unprotected command buffer."
        }
      ]
    },
    "VkDeviceGroupCommandBufferBeginInfo": {
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "deviceMask",
          "text": " deviceMask must be a valid device mask value"
        },
        {
          "vuid": "deviceMask",
          "text": " deviceMask must not be zero"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO"
        }
      ]
    },
    "vkCmdSetDeviceMask": {
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "deviceMask",
          "text": " deviceMask must be a valid device mask value"
        },
        {
          "vuid": "deviceMask",
          "text": " deviceMask must not be zero"
        },
        {
          "vuid": "deviceMask",
          "text": " deviceMask must not include any set bits that were not in the VkDeviceGroupCommandBufferBeginInfo::deviceMask value when the command buffer began recording."
        },
        {
          "vuid": "deviceMask",
          "text": " If vkCmdSetDeviceMask is called inside a render pass instance, deviceMask must not include any set bits that were not in the VkDeviceGroupRenderPassBeginInfo::deviceMask value when the render pass instance began recording."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, compute, or transfer operations"
        }
      ]
    },
    "vkCreateFence": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkFenceCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pFence",
          "text": " pFence must be a valid pointer to a VkFence handle"
        }
      ]
    },
    "VkFenceCreateInfo": {
      "core": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_FENCE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkExportFenceCreateInfo or VkExportFenceWin32HandleInfoKHR"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkFenceCreateFlagBits values"
        }
      ]
    },
    "VkExportFenceCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_external_fence)": [
        {
          "vuid": "handleTypes",
          "text": " The bits in handleTypes must be supported and compatible, as reported by VkExternalFenceProperties."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO"
        },
        {
          "vuid": "handleTypes",
          "text": " handleTypes must be a valid combination of VkExternalFenceHandleTypeFlagBits values"
        }
      ]
    },
    "VkExportFenceWin32HandleInfoKHR": {
      "(VK_KHR_external_fence_win32)": [
        {
          "vuid": "handleTypes",
          "text": " If VkExportFenceCreateInfo::handleTypes does not include VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT, VkExportFenceWin32HandleInfoKHR must not be in the pNext chain of VkFenceCreateInfo."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR"
        },
        {
          "vuid": "pAttributes",
          "text": " If pAttributes is not NULL, pAttributes must be a valid pointer to a valid SECURITY_ATTRIBUTES value"
        }
      ]
    },
    "vkGetFenceWin32HandleKHR": {
      "(VK_KHR_external_fence_win32)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pGetWin32HandleInfo",
          "text": " pGetWin32HandleInfo must be a valid pointer to a valid VkFenceGetWin32HandleInfoKHR structure"
        },
        {
          "vuid": "pHandle",
          "text": " pHandle must be a valid pointer to a HANDLE value"
        }
      ]
    },
    "VkFenceGetWin32HandleInfoKHR": {
      "(VK_KHR_external_fence_win32)": [
        {
          "vuid": "handleType",
          "text": " handleType must have been included in VkExportFenceCreateInfo::handleTypes when the fence’s current payload was created."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is defined as an NT handle, vkGetFenceWin32HandleKHR must be called no more than once for each valid unique combination of fence and handleType."
        },
        {
          "vuid": "fence",
          "text": " fence must not currently have its payload replaced by an imported payload as described below in synchronization-fences-importing,Importing Fence Payloads unless that imported payload’s handle type was included in VkExternalFenceProperties::exportFromImportedHandleTypes for handleType."
        },
        {
          "vuid": "handleType",
          "text": " If handleType refers to a handle type with copy payload transference semantics, fence must be signaled, or have an associated synchronization-fences-signaling,fence signal operation pending execution."
        },
        {
          "vuid": "handleType",
          "text": " handleType must be defined as an NT handle or a global share handle."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "fence",
          "text": " fence must be a valid VkFence handle"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalFenceHandleTypeFlagBits value"
        }
      ]
    },
    "vkGetFenceFdKHR": {
      "(VK_KHR_external_fence_fd)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pGetFdInfo",
          "text": " pGetFdInfo must be a valid pointer to a valid VkFenceGetFdInfoKHR structure"
        },
        {
          "vuid": "pFd",
          "text": " pFd must be a valid pointer to a int value"
        }
      ]
    },
    "VkFenceGetFdInfoKHR": {
      "(VK_KHR_external_fence_fd)": [
        {
          "vuid": "handleType",
          "text": " handleType must have been included in VkExportFenceCreateInfo::handleTypes when fence’s current payload was created."
        },
        {
          "vuid": "handleType",
          "text": " If handleType refers to a handle type with copy payload transference semantics, fence must be signaled, or have an associated synchronization-fences-signaling,fence signal operation pending execution."
        },
        {
          "vuid": "fence",
          "text": " fence must not currently have its payload replaced by an imported payload as described below in synchronization-fences-importing,Importing Fence Payloads unless that imported payload’s handle type was included in VkExternalFenceProperties::exportFromImportedHandleTypes for handleType."
        },
        {
          "vuid": "handleType",
          "text": " handleType must be defined as a POSIX file descriptor handle."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "fence",
          "text": " fence must be a valid VkFence handle"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalFenceHandleTypeFlagBits value"
        }
      ]
    },
    "vkDestroyFence": {
      "core": [
        {
          "vuid": "fence",
          "text": " All devsandqueues-submission, queue submission commands that refer to fence must have completed execution"
        },
        {
          "vuid": "fence",
          "text": " If VkAllocationCallbacks were provided when fence was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "fence",
          "text": " If no VkAllocationCallbacks were provided when fence was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "fence",
          "text": " If fence is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetFenceStatus": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "fence",
          "text": " fence must be a valid VkFence handle"
        },
        {
          "vuid": "fence",
          "text": " fence must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkResetFences": {
      "core": [
        {
          "vuid": "pFences",
          "text": " Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pFences",
          "text": " pFences must be a valid pointer to an array of fenceCount valid VkFence handles"
        },
        {
          "vuid": "fenceCount",
          "text": " fenceCount must be greater than 0"
        },
        {
          "vuid": "pFences",
          "text": " Each element of pFences must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkWaitForFences": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pFences",
          "text": " pFences must be a valid pointer to an array of fenceCount valid VkFence handles"
        },
        {
          "vuid": "fenceCount",
          "text": " fenceCount must be greater than 0"
        },
        {
          "vuid": "pFences",
          "text": " Each element of pFences must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkRegisterDeviceEventEXT": {
      "(VK_EXT_display_control)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pDeviceEventInfo",
          "text": " pDeviceEventInfo must be a valid pointer to a valid VkDeviceEventInfoEXT structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pFence",
          "text": " pFence must be a valid pointer to a VkFence handle"
        }
      ]
    },
    "VkDeviceEventInfoEXT": {
      "(VK_EXT_display_control)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "deviceEvent",
          "text": " deviceEvent must be a valid VkDeviceEventTypeEXT value"
        }
      ]
    },
    "vkRegisterDisplayEventEXT": {
      "(VK_EXT_display_control)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "display",
          "text": " display must be a valid VkDisplayKHR handle"
        },
        {
          "vuid": "pDisplayEventInfo",
          "text": " pDisplayEventInfo must be a valid pointer to a valid VkDisplayEventInfoEXT structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pFence",
          "text": " pFence must be a valid pointer to a VkFence handle"
        }
      ]
    },
    "VkDisplayEventInfoEXT": {
      "(VK_EXT_display_control)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "displayEvent",
          "text": " displayEvent must be a valid VkDisplayEventTypeEXT value"
        }
      ]
    },
    "vkImportFenceWin32HandleKHR": {
      "(VK_KHR_external_fence_win32)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pImportFenceWin32HandleInfo",
          "text": " pImportFenceWin32HandleInfo must be a valid pointer to a valid VkImportFenceWin32HandleInfoKHR structure"
        }
      ]
    },
    "VkImportFenceWin32HandleInfoKHR": {
      "(VK_KHR_external_fence_win32)": [
        {
          "vuid": "handleType",
          "text": " handleType must be a value included in the synchronization-fence-handletypes-win32, Handle Types Supported by VkImportFenceWin32HandleInfoKHR table."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT, name must be NULL."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0 and handle is NULL, name must name a valid synchronization primitive of the type specified by handleType."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0 and name is NULL, handle must be a valid handle of the type specified by handleType."
        },
        {
          "vuid": "handle",
          "text": " If handle is not NULL, name must be NULL."
        },
        {
          "vuid": "handle",
          "text": " If handle is not NULL, it must obey any requirements listed for handleType in external fence handle types compatibility."
        },
        {
          "vuid": "name",
          "text": " If name is not NULL, it must obey any requirements listed for handleType in external fence handle types compatibility."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "fence",
          "text": " fence must be a valid VkFence handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkFenceImportFlagBits values"
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, handleType must be a valid VkExternalFenceHandleTypeFlagBits value"
        }
      ]
    },
    "vkImportFenceFdKHR": {
      "(VK_KHR_external_fence_fd)": [
        {
          "vuid": "fence",
          "text": " fence must not be associated with any queue command that has not yet completed execution on that queue"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pImportFenceFdInfo",
          "text": " pImportFenceFdInfo must be a valid pointer to a valid VkImportFenceFdInfoKHR structure"
        }
      ]
    },
    "VkImportFenceFdInfoKHR": {
      "(VK_KHR_external_fence_fd)": [
        {
          "vuid": "handleType",
          "text": " handleType must be a value included in the synchronization-fence-handletypes-fd, Handle Types Supported by VkImportFenceFdInfoKHR table."
        },
        {
          "vuid": "fd",
          "text": " fd must obey any requirements listed for handleType in external-fence-handle-types-compatibility,external fence handle types compatibility."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "fence",
          "text": " fence must be a valid VkFence handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkFenceImportFlagBits values"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalFenceHandleTypeFlagBits value"
        }
      ]
    },
    "vkCreateSemaphore": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkSemaphoreCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSemaphore",
          "text": " pSemaphore must be a valid pointer to a VkSemaphore handle"
        }
      ]
    },
    "VkSemaphoreCreateInfo": {
      "core": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkExportSemaphoreCreateInfo or VkExportSemaphoreWin32HandleInfoKHR"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "VkExportSemaphoreCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_external_semaphore)": [
        {
          "vuid": "handleTypes",
          "text": " The bits in handleTypes must be supported and compatible, as reported by VkExternalSemaphoreProperties."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO"
        },
        {
          "vuid": "handleTypes",
          "text": " handleTypes must be a valid combination of VkExternalSemaphoreHandleTypeFlagBits values"
        }
      ]
    },
    "VkExportSemaphoreWin32HandleInfoKHR": {
      "(VK_KHR_external_semaphore_win32)": [
        {
          "vuid": "handleTypes",
          "text": " If VkExportSemaphoreCreateInfo::handleTypes does not include VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT or VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT, VkExportSemaphoreWin32HandleInfoKHR must not be in the pNext chain of VkSemaphoreCreateInfo."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"
        },
        {
          "vuid": "pAttributes",
          "text": " If pAttributes is not NULL, pAttributes must be a valid pointer to a valid SECURITY_ATTRIBUTES value"
        }
      ]
    },
    "vkGetSemaphoreWin32HandleKHR": {
      "(VK_KHR_external_semaphore_win32)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pGetWin32HandleInfo",
          "text": " pGetWin32HandleInfo must be a valid pointer to a valid VkSemaphoreGetWin32HandleInfoKHR structure"
        },
        {
          "vuid": "pHandle",
          "text": " pHandle must be a valid pointer to a HANDLE value"
        }
      ]
    },
    "VkSemaphoreGetWin32HandleInfoKHR": {
      "(VK_KHR_external_semaphore_win32)": [
        {
          "vuid": "handleType",
          "text": " handleType must have been included in VkExportSemaphoreCreateInfo::handleTypes when the semaphore’s current payload was created."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is defined as an NT handle, vkGetSemaphoreWin32HandleKHR must be called no more than once for each valid unique combination of semaphore and handleType."
        },
        {
          "vuid": "semaphore",
          "text": " semaphore must not currently have its payload replaced by an imported payload as described below in synchronization-semaphores-importing,Importing Semaphore Payloads unless that imported payload’s handle type was included in VkExternalSemaphoreProperties::exportFromImportedHandleTypes for handleType."
        },
        {
          "vuid": "handleType",
          "text": " If handleType refers to a handle type with copy payload transference semantics, as defined below in synchronization-semaphores-importing,Importing Semaphore Payloads, there must be no queue waiting on semaphore."
        },
        {
          "vuid": "handleType",
          "text": " If handleType refers to a handle type with copy payload transference semantics, semaphore must be signaled, or have an associated synchronization-semaphores-signaling,semaphore signal operation pending execution."
        },
        {
          "vuid": "handleType",
          "text": " handleType must be defined as an NT handle or a global share handle."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "semaphore",
          "text": " semaphore must be a valid VkSemaphore handle"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalSemaphoreHandleTypeFlagBits value"
        }
      ]
    },
    "vkGetSemaphoreFdKHR": {
      "(VK_KHR_external_semaphore_fd)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pGetFdInfo",
          "text": " pGetFdInfo must be a valid pointer to a valid VkSemaphoreGetFdInfoKHR structure"
        },
        {
          "vuid": "pFd",
          "text": " pFd must be a valid pointer to a int value"
        }
      ]
    },
    "VkSemaphoreGetFdInfoKHR": {
      "(VK_KHR_external_semaphore_fd)": [
        {
          "vuid": "handleType",
          "text": " handleType must have been included in VkExportSemaphoreCreateInfo::handleTypes when semaphore’s current payload was created."
        },
        {
          "vuid": "semaphore",
          "text": " semaphore must not currently have its payload replaced by an imported payload as described below in synchronization-semaphores-importing,Importing Semaphore Payloads unless that imported payload’s handle type was included in VkExternalSemaphoreProperties::exportFromImportedHandleTypes for handleType."
        },
        {
          "vuid": "handleType",
          "text": " If handleType refers to a handle type with copy payload transference semantics, as defined below in synchronization-semaphores-importing,Importing Semaphore Payloads, there must be no queue waiting on semaphore."
        },
        {
          "vuid": "handleType",
          "text": " If handleType refers to a handle type with copy payload transference semantics, semaphore must be signaled, or have an associated synchronization-semaphores-signaling,semaphore signal operation pending execution."
        },
        {
          "vuid": "handleType",
          "text": " handleType must be defined as a POSIX file descriptor handle."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "semaphore",
          "text": " semaphore must be a valid VkSemaphore handle"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalSemaphoreHandleTypeFlagBits value"
        }
      ]
    },
    "vkDestroySemaphore": {
      "core": [
        {
          "vuid": "semaphore",
          "text": " All submitted batches that refer to semaphore must have completed execution"
        },
        {
          "vuid": "semaphore",
          "text": " If VkAllocationCallbacks were provided when semaphore was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "semaphore",
          "text": " If no VkAllocationCallbacks were provided when semaphore was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "semaphore",
          "text": " If semaphore is not VK_NULL_HANDLE, semaphore must be a valid VkSemaphore handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "semaphore",
          "text": " If semaphore is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkImportSemaphoreWin32HandleKHR": {
      "(VK_KHR_external_semaphore_win32)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pImportSemaphoreWin32HandleInfo",
          "text": " pImportSemaphoreWin32HandleInfo must be a valid pointer to a valid VkImportSemaphoreWin32HandleInfoKHR structure"
        }
      ]
    },
    "VkImportSemaphoreWin32HandleInfoKHR": {
      "(VK_KHR_external_semaphore_win32)": [
        {
          "vuid": "handleType",
          "text": " handleType must be a value included in the synchronization-semaphore-handletypes-win32,Handle Types Supported by VkImportSemaphoreWin32HandleInfoKHR table."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT or VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT, name must be NULL."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0 and handle is NULL, name must name a valid synchronization primitive of the type specified by handleType."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0 and name is NULL, handle must be a valid handle of the type specified by handleType."
        },
        {
          "vuid": "handle",
          "text": " If handle is not NULL, name must be NULL."
        },
        {
          "vuid": "handle",
          "text": " If handle is not NULL, it must obey any requirements listed for handleType in external semaphore handle types compatibility."
        },
        {
          "vuid": "name",
          "text": " If name is not NULL, it must obey any requirements listed for handleType in external semaphore handle types compatibility."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "semaphore",
          "text": " semaphore must be a valid VkSemaphore handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkSemaphoreImportFlagBits values"
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, handleType must be a valid VkExternalSemaphoreHandleTypeFlagBits value"
        }
      ]
    },
    "vkImportSemaphoreFdKHR": {
      "(VK_KHR_external_semaphore_fd)": [
        {
          "vuid": "semaphore",
          "text": " semaphore must not be associated with any queue command that has not yet completed execution on that queue"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pImportSemaphoreFdInfo",
          "text": " pImportSemaphoreFdInfo must be a valid pointer to a valid VkImportSemaphoreFdInfoKHR structure"
        }
      ]
    },
    "VkImportSemaphoreFdInfoKHR": {
      "(VK_KHR_external_semaphore_fd)": [
        {
          "vuid": "handleType",
          "text": " handleType must be a value included in the synchronization-semaphore-handletypes-fd,Handle Types Supported by VkImportSemaphoreFdInfoKHR table."
        },
        {
          "vuid": "fd",
          "text": " fd must obey any requirements listed for handleType in external-semaphore-handle-types-compatibility,external semaphore handle types compatibility."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "semaphore",
          "text": " semaphore must be a valid VkSemaphore handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkSemaphoreImportFlagBits values"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalSemaphoreHandleTypeFlagBits value"
        }
      ]
    },
    "vkCreateEvent": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkEventCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pEvent",
          "text": " pEvent must be a valid pointer to a VkEvent handle"
        }
      ]
    },
    "VkEventCreateInfo": {
      "core": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EVENT_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "vkDestroyEvent": {
      "core": [
        {
          "vuid": "event",
          "text": " All submitted commands that refer to event must have completed execution"
        },
        {
          "vuid": "event",
          "text": " If VkAllocationCallbacks were provided when event was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "event",
          "text": " If no VkAllocationCallbacks were provided when event was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "event",
          "text": " If event is not VK_NULL_HANDLE, event must be a valid VkEvent handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "event",
          "text": " If event is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetEventStatus": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "event",
          "text": " event must be a valid VkEvent handle"
        },
        {
          "vuid": "event",
          "text": " event must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkSetEvent": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "event",
          "text": " event must be a valid VkEvent handle"
        },
        {
          "vuid": "event",
          "text": " event must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkResetEvent": {
      "core": [
        {
          "vuid": "event",
          "text": " event must not be waited on by a vkCmdWaitEvents command that is currently executing"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "event",
          "text": " event must be a valid VkEvent handle"
        },
        {
          "vuid": "event",
          "text": " event must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCmdSetEvent": {
      "core": [
        {
          "vuid": "stageMask",
          "text": " stageMask must not include VK_PIPELINE_STAGE_HOST_BIT"
        },
        {
          "vuid": "stageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "stageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "event",
          "text": " event must be a valid VkEvent handle"
        },
        {
          "vuid": "stageMask",
          "text": " stageMask must be a valid combination of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "stageMask",
          "text": " stageMask must not be 0"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and event must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer’s current device mask must include exactly one physical device."
        }
      ],
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "stageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "stageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        }
      ]
    },
    "vkCmdResetEvent": {
      "core": [
        {
          "vuid": "stageMask",
          "text": " stageMask must not include VK_PIPELINE_STAGE_HOST_BIT"
        },
        {
          "vuid": "stageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "stageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "event",
          "text": " When this command executes, event must not be waited on by a vkCmdWaitEvents command that is currently executing"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "event",
          "text": " event must be a valid VkEvent handle"
        },
        {
          "vuid": "stageMask",
          "text": " stageMask must be a valid combination of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "stageMask",
          "text": " stageMask must not be 0"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and event must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer’s current device mask must include exactly one physical device."
        }
      ],
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "stageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "stageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        }
      ]
    },
    "vkCmdWaitEvents": {
      "core": [
        {
          "vuid": "srcStageMask",
          "text": " srcStageMask must be the bitwise OR of the stageMask parameter used in previous calls to vkCmdSetEvent with any of the members of pEvents and VK_PIPELINE_STAGE_HOST_BIT if any of the members of pEvents was set using vkSetEvent"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "pEvents",
          "text": " If pEvents includes one or more events that will be signaled by vkSetEvent after commandBuffer has been submitted to a queue, then vkCmdWaitEvents must not be called inside a render pass instance"
        },
        {
          "vuid": "srcStageMask",
          "text": " Any pipeline stage included in srcStageMask or dstStageMask must be supported by the capabilities of the queue family specified by the queueFamilyIndex member of the VkCommandPoolCreateInfo structure that was used to create the VkCommandPool that commandBuffer was allocated from, as specified in the synchronization-pipeline-stages-supported, table of supported pipeline stages."
        },
        {
          "vuid": "pMemoryBarriers",
          "text": " Each element of pMemoryBarriers, pBufferMemoryBarriers or pImageMemoryBarriers must not have any access flag included in its srcAccessMask member if that bit is not supported by any of the pipeline stages in srcStageMask, as specified in the synchronization-access-types-supported, table of supported access types."
        },
        {
          "vuid": "pMemoryBarriers",
          "text": " Each element of pMemoryBarriers, pBufferMemoryBarriers or pImageMemoryBarriers must not have any access flag included in its dstAccessMask member if that bit is not supported by any of the pipeline stages in dstStageMask, as specified in the synchronization-access-types-supported, table of supported access types."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pEvents",
          "text": " pEvents must be a valid pointer to an array of eventCount valid VkEvent handles"
        },
        {
          "vuid": "srcStageMask",
          "text": " srcStageMask must be a valid combination of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "srcStageMask",
          "text": " srcStageMask must not be 0"
        },
        {
          "vuid": "dstStageMask",
          "text": " dstStageMask must be a valid combination of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "dstStageMask",
          "text": " dstStageMask must not be 0"
        },
        {
          "vuid": "pMemoryBarriers",
          "text": " If memoryBarrierCount is not 0, pMemoryBarriers must be a valid pointer to an array of memoryBarrierCount valid VkMemoryBarrier structures"
        },
        {
          "vuid": "pBufferMemoryBarriers",
          "text": " If bufferMemoryBarrierCount is not 0, pBufferMemoryBarriers must be a valid pointer to an array of bufferMemoryBarrierCount valid VkBufferMemoryBarrier structures"
        },
        {
          "vuid": "pImageMemoryBarriers",
          "text": " If imageMemoryBarrierCount is not 0, pImageMemoryBarriers must be a valid pointer to an array of imageMemoryBarrierCount valid VkImageMemoryBarrier structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "eventCount",
          "text": " eventCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and the elements of pEvents must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer’s current device mask must include exactly one physical device."
        }
      ],
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        }
      ]
    },
    "vkCmdPipelineBarrier": {
      "core": [
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "pDependencies",
          "text": " If vkCmdPipelineBarrier is called within a render pass instance, the render pass must have been created with at least one VkSubpassDependency instance in VkRenderPassCreateInfo::pDependencies that expresses a dependency from the current subpass to itself, and for which srcStageMask contains a subset of the bit values in VkSubpassDependency::srcStageMask, dstStageMask contains a subset of the bit values in VkSubpassDependency::dstStageMask, and dependencyFlags is equal to VkSubpassDependency::dependencyFlags."
        },
        {
          "vuid": "pMemoryBarriers",
          "text": " If vkCmdPipelineBarrier is called within a render pass instance, for each element of pMemoryBarriers and pImageMemoryBarriers, the render pass must have been defined with a VkSubpassDependency self-dependency for the current subpass with valid srcStageMask, dstStageMask, and dependencyFlags values such that Vk*Barrier::srcAccessMask contains a subset of the bit values in VkSubpassDependency::srcAccessMask and Vk*Barrier::dstAccessMask contains a subset of the bit values in VkSubpassDependency::dstAccessMask."
        },
        {
          "vuid": "bufferMemoryBarrierCount",
          "text": " If vkCmdPipelineBarrier is called within a render pass instance, bufferMemoryBarrierCount must be 0"
        },
        {
          "vuid": "image",
          "text": " If vkCmdPipelineBarrier is called within a render pass instance, the image member of any element of pImageMemoryBarriers must be equal to one of the elements of pAttachments that the current framebuffer was created with, that is also referred to by one of the elements of the pColorAttachments, pResolveAttachments or pDepthStencilAttachment members of the VkSubpassDescription instance that the current subpass was created with"
        },
        {
          "vuid": "oldLayout",
          "text": " If vkCmdPipelineBarrier is called within a render pass instance, the oldLayout and newLayout members of any element of pImageMemoryBarriers must be equal to the layout member of an element of the pColorAttachments, pResolveAttachments or pDepthStencilAttachment members of the VkSubpassDescription instance that the current subpass was created with, that refers to the same image"
        },
        {
          "vuid": "oldLayout",
          "text": " If vkCmdPipelineBarrier is called within a render pass instance, the oldLayout and newLayout members of an element of pImageMemoryBarriers must be equal"
        },
        {
          "vuid": "srcQueueFamilyIndex",
          "text": " If vkCmdPipelineBarrier is called within a render pass instance, the srcQueueFamilyIndex and dstQueueFamilyIndex members of any element of pImageMemoryBarriers must be VK_QUEUE_FAMILY_IGNORED"
        },
        {
          "vuid": "srcStageMask",
          "text": " Any pipeline stage included in srcStageMask or dstStageMask must be supported by the capabilities of the queue family specified by the queueFamilyIndex member of the VkCommandPoolCreateInfo structure that was used to create the VkCommandPool that commandBuffer was allocated from, as specified in the synchronization-pipeline-stages-supported, table of supported pipeline stages."
        },
        {
          "vuid": "pMemoryBarriers",
          "text": " Each element of pMemoryBarriers, pBufferMemoryBarriers and pImageMemoryBarriers must not have any access flag included in its srcAccessMask member if that bit is not supported by any of the pipeline stages in srcStageMask, as specified in the synchronization-access-types-supported, table of supported access types."
        },
        {
          "vuid": "pMemoryBarriers",
          "text": " Each element of pMemoryBarriers, pBufferMemoryBarriers and pImageMemoryBarriers must not have any access flag included in its dstAccessMask member if that bit is not supported by any of the pipeline stages in dstStageMask, as specified in the synchronization-access-types-supported, table of supported access types."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "srcStageMask",
          "text": " srcStageMask must be a valid combination of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "srcStageMask",
          "text": " srcStageMask must not be 0"
        },
        {
          "vuid": "dstStageMask",
          "text": " dstStageMask must be a valid combination of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "dstStageMask",
          "text": " dstStageMask must not be 0"
        },
        {
          "vuid": "dependencyFlags",
          "text": " dependencyFlags must be a valid combination of VkDependencyFlagBits values"
        },
        {
          "vuid": "pMemoryBarriers",
          "text": " If memoryBarrierCount is not 0, pMemoryBarriers must be a valid pointer to an array of memoryBarrierCount valid VkMemoryBarrier structures"
        },
        {
          "vuid": "pBufferMemoryBarriers",
          "text": " If bufferMemoryBarrierCount is not 0, pBufferMemoryBarriers must be a valid pointer to an array of bufferMemoryBarrierCount valid VkBufferMemoryBarrier structures"
        },
        {
          "vuid": "pImageMemoryBarriers",
          "text": " If imageMemoryBarrierCount is not 0, pImageMemoryBarriers must be a valid pointer to an array of imageMemoryBarrierCount valid VkImageMemoryBarrier structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "dependencyFlags",
          "text": " If vkCmdPipelineBarrier is called outside of a render pass instance, dependencyFlags must not include VK_DEPENDENCY_VIEW_LOCAL_BIT"
        }
      ],
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        }
      ]
    },
    "VkMemoryBarrier": {
      "core": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MEMORY_BARRIER"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "srcAccessMask",
          "text": " srcAccessMask must be a valid combination of VkAccessFlagBits values"
        },
        {
          "vuid": "dstAccessMask",
          "text": " dstAccessMask must be a valid combination of VkAccessFlagBits values"
        }
      ]
    },
    "VkBufferMemoryBarrier": {
      "core": [
        {
          "vuid": "offset",
          "text": " offset must be less than the size of buffer"
        },
        {
          "vuid": "size",
          "text": " If size is not equal to VK_WHOLE_SIZE, size must be greater than 0"
        },
        {
          "vuid": "size",
          "text": " If size is not equal to VK_WHOLE_SIZE, size must be less than or equal to than the size of buffer minus offset"
        },
        {
          "vuid": "buffer",
          "text": " If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, and srcQueueFamilyIndex and dstQueueFamilyIndex are not VK_QUEUE_FAMILY_IGNORED, at least one of them must be the same as the family of the queue that will execute this barrier"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "srcAccessMask",
          "text": " srcAccessMask must be a valid combination of VkAccessFlagBits values"
        },
        {
          "vuid": "dstAccessMask",
          "text": " dstAccessMask must be a valid combination of VkAccessFlagBits values"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_external_memory)": [
        {
          "vuid": "buffer",
          "text": " If buffer was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, srcQueueFamilyIndex and dstQueueFamilyIndex must both be VK_QUEUE_FAMILY_IGNORED"
        },
        {
          "vuid": "buffer",
          "text": " If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, srcQueueFamilyIndex and dstQueueFamilyIndex must either both be VK_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see devsandqueues-queueprops)"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_external_memory)": [
        {
          "vuid": "buffer",
          "text": " If buffer was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, at least one of srcQueueFamilyIndex and dstQueueFamilyIndex must be VK_QUEUE_FAMILY_IGNORED"
        },
        {
          "vuid": "buffer",
          "text": " If buffer was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, and one of srcQueueFamilyIndex and dstQueueFamilyIndex is VK_QUEUE_FAMILY_IGNORED, the other must be VK_QUEUE_FAMILY_IGNORED or a special queue family reserved for external memory ownership transfers, as described in synchronization-queue-transfers."
        },
        {
          "vuid": "buffer",
          "text": " If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and srcQueueFamilyIndex is VK_QUEUE_FAMILY_IGNORED, dstQueueFamilyIndex must also be VK_QUEUE_FAMILY_IGNORED"
        },
        {
          "vuid": "buffer",
          "text": " If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and srcQueueFamilyIndex is not VK_QUEUE_FAMILY_IGNORED, it must be a valid queue family or a special queue family reserved for external memory transfers, as described in synchronization-queue-transfers."
        },
        {
          "vuid": "buffer",
          "text": " If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and dstQueueFamilyIndex is not VK_QUEUE_FAMILY_IGNORED, it must be a valid queue family or a special queue family reserved for external memory transfers, as described in synchronization-queue-transfers."
        }
      ]
    },
    "VkImageMemoryBarrier": {
      "core": [
        {
          "vuid": "oldLayout",
          "text": " oldLayout must be VK_IMAGE_LAYOUT_UNDEFINED or the current layout of the image subresources affected by the barrier"
        },
        {
          "vuid": "newLayout",
          "text": " newLayout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED"
        },
        {
          "vuid": "image",
          "text": " If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, and srcQueueFamilyIndex and dstQueueFamilyIndex are not VK_QUEUE_FAMILY_IGNORED, at least one of them must be the same as the family of the queue that will execute this barrier"
        },
        {
          "vuid": "subresourceRange",
          "text": " subresourceRange.baseMipLevel must be less than the mipLevels specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "subresourceRange",
          "text": " If subresourceRange.levelCount is not VK_REMAINING_MIP_LEVELS, +subresourceRange.baseMipLevel + subresourceRange.levelCount+ must be less than or equal to the mipLevels specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "subresourceRange",
          "text": " subresourceRange.baseArrayLayer must be less than the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "subresourceRange",
          "text": " If subresourceRange.layerCount is not VK_REMAINING_ARRAY_LAYERS, +subresourceRange.baseArrayLayer + subresourceRange.layerCount+ must be less than or equal to the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "image",
          "text": " If image has a depth/stencil format with both depth and stencil components, then the aspectMask member of subresourceRange must include both VK_IMAGE_ASPECT_DEPTH_BIT and VK_IMAGE_ASPECT_STENCIL_BIT"
        },
        {
          "vuid": "oldLayout",
          "text": " If either oldLayout or newLayout is VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then image must have been created with VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set"
        },
        {
          "vuid": "oldLayout",
          "text": " If either oldLayout or newLayout is VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL then image must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
        },
        {
          "vuid": "oldLayout",
          "text": " If either oldLayout or newLayout is VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then image must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
        },
        {
          "vuid": "oldLayout",
          "text": " If either oldLayout or newLayout is VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then image must have been created with VK_IMAGE_USAGE_SAMPLED_BIT or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set"
        },
        {
          "vuid": "oldLayout",
          "text": " If either oldLayout or newLayout is VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL then image must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT set"
        },
        {
          "vuid": "oldLayout",
          "text": " If either oldLayout or newLayout is VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then image must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT set"
        },
        {
          "vuid": "image",
          "text": " If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkSampleLocationsInfoEXT"
        },
        {
          "vuid": "srcAccessMask",
          "text": " srcAccessMask must be a valid combination of VkAccessFlagBits values"
        },
        {
          "vuid": "dstAccessMask",
          "text": " dstAccessMask must be a valid combination of VkAccessFlagBits values"
        },
        {
          "vuid": "oldLayout",
          "text": " oldLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "newLayout",
          "text": " newLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "subresourceRange",
          "text": " subresourceRange must be a valid VkImageSubresourceRange structure"
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_external_memory)": [
        {
          "vuid": "image",
          "text": " If image was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, srcQueueFamilyIndex and dstQueueFamilyIndex must both be VK_QUEUE_FAMILY_IGNORED"
        },
        {
          "vuid": "image",
          "text": " If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, srcQueueFamilyIndex and dstQueueFamilyIndex must either both be VK_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see devsandqueues-queueprops)."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_external_memory)": [
        {
          "vuid": "image",
          "text": " If image was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, at least one of srcQueueFamilyIndex and dstQueueFamilyIndex must be VK_QUEUE_FAMILY_IGNORED"
        },
        {
          "vuid": "image",
          "text": " If image was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, and one of srcQueueFamilyIndex and dstQueueFamilyIndex is VK_QUEUE_FAMILY_IGNORED, the other must be VK_QUEUE_FAMILY_IGNORED or a special queue family reserved for external memory transfers, as described in synchronization-queue-transfers."
        },
        {
          "vuid": "image",
          "text": " If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and srcQueueFamilyIndex is VK_QUEUE_FAMILY_IGNORED, dstQueueFamilyIndex must also be VK_QUEUE_FAMILY_IGNORED."
        },
        {
          "vuid": "image",
          "text": " If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and srcQueueFamilyIndex is not VK_QUEUE_FAMILY_IGNORED, it must be a valid queue family or a special queue family reserved for external memory transfers, as described in synchronization-queue-transfers."
        },
        {
          "vuid": "image",
          "text": " If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and dstQueueFamilyIndex is not VK_QUEUE_FAMILY_IGNORED, it must be a valid queue family or a special queue family reserved for external memory transfers, as described in synchronization-queue-transfers."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " If image has a single-plane color format or is not disjoint, then the aspectMask member of subresourceRange must be VK_IMAGE_ASPECT_COLOR_BIT"
        },
        {
          "vuid": "image",
          "text": " If image has a multi-planar format and the image is disjoint, then the aspectMask member of subresourceRange must include either at least one of VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, and VK_IMAGE_ASPECT_PLANE_2_BIT; or must include VK_IMAGE_ASPECT_COLOR_BIT"
        },
        {
          "vuid": "image",
          "text": " If image has a multi-planar format with only two planes, then the aspectMask member of subresourceRange must not include VK_IMAGE_ASPECT_PLANE_2_BIT"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "oldLayout",
          "text": " If either oldLayout or newLayout is VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL then image must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
        },
        {
          "vuid": "oldLayout",
          "text": " If either oldLayout or newLayout is VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL then image must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
        }
      ],
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "oldLayout",
          "text": " If either oldLayout or newLayout is VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV then image must have been created with VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV set"
        }
      ]
    },
    "vkQueueWaitIdle": {
      "core": [
        {
          "vuid": "queue",
          "text": " queue must be a valid VkQueue handle"
        }
      ]
    },
    "vkDeviceWaitIdle": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        }
      ]
    },
    "vkCreateRenderPass": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkRenderPassCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pRenderPass",
          "text": " pRenderPass must be a valid pointer to a VkRenderPass handle"
        }
      ]
    },
    "VkRenderPassCreateInfo": {
      "core": [
        {
          "vuid": "None",
          "text": " If any two subpasses operate on attachments with overlapping ranges of the same VkDeviceMemory object, and at least one subpass writes to that area of VkDeviceMemory, a subpass dependency must be included (either directly or via some intermediate subpasses) between them"
        },
        {
          "vuid": "attachment",
          "text": " If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or the attachment indexed by any element of pPreserveAttachments in any element of pSubpasses is bound to a range of a VkDeviceMemory object that overlaps with any other attachment in any subpass (including the same subpass), the VkAttachmentDescription structures describing them must include VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT in flags"
        },
        {
          "vuid": "attachment",
          "text": " If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or any element of pPreserveAttachments in any element of pSubpasses is not VK_ATTACHMENT_UNUSED, it must be less than attachmentCount"
        },
        {
          "vuid": "pPreserveAttachments",
          "text": " The value of each element of the pPreserveAttachments member in each element of pSubpasses must not be VK_ATTACHMENT_UNUSED"
        },
        {
          "vuid": "pAttachments",
          "text": " For any member of pAttachments with a loadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL."
        },
        {
          "vuid": "pDependencies",
          "text": " For any element of pDependencies, if the srcSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the srcStageMask member of that dependency must be a pipeline stage supported by the synchronization-pipeline-stages-types, pipeline identified by the pipelineBindPoint member of the source subpass."
        },
        {
          "vuid": "pDependencies",
          "text": " For any element of pDependencies, if the dstSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the dstStageMask member of that dependency must be a pipeline stage supported by the synchronization-pipeline-stages-types, pipeline identified by the pipelineBindPoint member of the source subpass."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkRenderPassInputAttachmentAspectCreateInfo or VkRenderPassMultiviewCreateInfo"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pAttachments",
          "text": " If attachmentCount is not 0, pAttachments must be a valid pointer to an array of attachmentCount valid VkAttachmentDescription structures"
        },
        {
          "vuid": "pSubpasses",
          "text": " pSubpasses must be a valid pointer to an array of subpassCount valid VkSubpassDescription structures"
        },
        {
          "vuid": "pDependencies",
          "text": " If dependencyCount is not 0, pDependencies must be a valid pointer to an array of dependencyCount valid VkSubpassDependency structures"
        },
        {
          "vuid": "subpassCount",
          "text": " subpassCount must be greater than 0"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "pAttachments",
          "text": " For any member of pAttachments with a loadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL."
        },
        {
          "vuid": "pAttachments",
          "text": " For any member of pAttachments with a stencilLoadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL."
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of VkRenderPassInputAttachmentAspectCreateInfo, the subpass member of each element of its pAspectReferences member must be less than subpassCount"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of VkRenderPassInputAttachmentAspectCreateInfo, the inputAttachmentIndex member of each element of its pAspectReferences member must be less than the value of inputAttachmentCount in the member of pSubpasses identified by its subpass member"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of VkRenderPassInputAttachmentAspectCreateInfo, the aspectMask member of any element of pAspectReferences must only include aspects that are present in images of the format of the input attachment specified by the subpass and inputAttachment of the same element of pAspectReferences"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of VkRenderPassMultiviewCreateInfo, and its subpassCount member is not zero, that member must be equal to the value of subpassCount"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of VkRenderPassMultiviewCreateInfo, if its dependencyCount member is not zero, it must be equal to dependencyCount"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of VkRenderPassMultiviewCreateInfo, for each non-zero element of pViewOffsets, the srcSubpass and dstSubpass members of pDependencies at the same index must not be equal"
        }
      ]
    },
    "VkRenderPassMultiviewCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "pCorrelationMasks",
          "text": " Each view index must not be set in more than one element of pCorrelationMasks"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO"
        },
        {
          "vuid": "pViewMasks",
          "text": " If subpassCount is not 0, pViewMasks must be a valid pointer to an array of subpassCount uint32_t values"
        },
        {
          "vuid": "pViewOffsets",
          "text": " If dependencyCount is not 0, pViewOffsets must be a valid pointer to an array of dependencyCount int32_t values"
        },
        {
          "vuid": "pCorrelationMasks",
          "text": " If correlationMaskCount is not 0, pCorrelationMasks must be a valid pointer to an array of correlationMaskCount uint32_t values"
        }
      ]
    },
    "VkAttachmentDescription": {
      "core": [
        {
          "vuid": "finalLayout",
          "text": " finalLayout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkAttachmentDescriptionFlagBits values"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "samples",
          "text": " samples must be a valid VkSampleCountFlagBits value"
        },
        {
          "vuid": "loadOp",
          "text": " loadOp must be a valid VkAttachmentLoadOp value"
        },
        {
          "vuid": "storeOp",
          "text": " storeOp must be a valid VkAttachmentStoreOp value"
        },
        {
          "vuid": "stencilLoadOp",
          "text": " stencilLoadOp must be a valid VkAttachmentLoadOp value"
        },
        {
          "vuid": "stencilStoreOp",
          "text": " stencilStoreOp must be a valid VkAttachmentStoreOp value"
        },
        {
          "vuid": "initialLayout",
          "text": " initialLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "finalLayout",
          "text": " finalLayout must be a valid VkImageLayout value"
        }
      ]
    },
    "VkRenderPassInputAttachmentAspectCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO"
        },
        {
          "vuid": "pAspectReferences",
          "text": " pAspectReferences must be a valid pointer to an array of aspectReferenceCount valid VkInputAttachmentAspectReference structures"
        },
        {
          "vuid": "aspectReferenceCount",
          "text": " aspectReferenceCount must be greater than 0"
        }
      ]
    },
    "VkInputAttachmentAspectReference": {
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "aspectMask",
          "text": " aspectMask must not include VK_IMAGE_ASPECT_METADATA_BIT"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must be a valid combination of VkImageAspectFlagBits values"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must not be 0"
        }
      ]
    },
    "VkSubpassDescription": {
      "core": [
        {
          "vuid": "pipelineBindPoint",
          "text": " pipelineBindPoint must be VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "colorAttachmentCount",
          "text": " colorAttachmentCount must be less than or equal to VkPhysicalDeviceLimits::maxColorAttachments"
        },
        {
          "vuid": "loadOp",
          "text": " If the first use of an attachment in this render pass is as an input attachment, and the attachment is not also used as a color or depth/stencil attachment in the same subpass, then loadOp must not be VK_ATTACHMENT_LOAD_OP_CLEAR"
        },
        {
          "vuid": "pResolveAttachments",
          "text": " If pResolveAttachments is not NULL, for each resolve attachment that does not have the value VK_ATTACHMENT_UNUSED, the corresponding color attachment must not have the value VK_ATTACHMENT_UNUSED"
        },
        {
          "vuid": "pResolveAttachments",
          "text": " If pResolveAttachments is not NULL, the sample count of each element of pColorAttachments must be anything other than VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "pResolveAttachments",
          "text": " Each element of pResolveAttachments must have a sample count of VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "pResolveAttachments",
          "text": " Each element of pResolveAttachments must have the same VkFormat as its corresponding color attachment"
        },
        {
          "vuid": "pColorAttachments",
          "text": " All attachments in pColorAttachments that are not VK_ATTACHMENT_UNUSED must have the same sample count"
        },
        {
          "vuid": "None",
          "text": " If any input attachments are VK_ATTACHMENT_UNUSED, then any pipelines bound during the subpass must not access those input attachments from the fragment shader"
        },
        {
          "vuid": "attachment",
          "text": " The attachment member of each element of pPreserveAttachments must not be VK_ATTACHMENT_UNUSED"
        },
        {
          "vuid": "pPreserveAttachments",
          "text": " Each element of pPreserveAttachments must not also be an element of any other member of the subpass description"
        },
        {
          "vuid": "layout",
          "text": " If any attachment is used as both an input attachment and a color or depth/stencil attachment, then each use must use the same layout"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkSubpassDescriptionFlagBits values"
        },
        {
          "vuid": "pipelineBindPoint",
          "text": " pipelineBindPoint must be a valid VkPipelineBindPoint value"
        },
        {
          "vuid": "pInputAttachments",
          "text": " If inputAttachmentCount is not 0, pInputAttachments must be a valid pointer to an array of inputAttachmentCount valid VkAttachmentReference structures"
        },
        {
          "vuid": "pColorAttachments",
          "text": " If colorAttachmentCount is not 0, pColorAttachments must be a valid pointer to an array of colorAttachmentCount valid VkAttachmentReference structures"
        },
        {
          "vuid": "pResolveAttachments",
          "text": " If colorAttachmentCount is not 0, and pResolveAttachments is not NULL, pResolveAttachments must be a valid pointer to an array of colorAttachmentCount valid VkAttachmentReference structures"
        },
        {
          "vuid": "pDepthStencilAttachment",
          "text": " If pDepthStencilAttachment is not NULL, pDepthStencilAttachment must be a valid pointer to a valid VkAttachmentReference structure"
        },
        {
          "vuid": "pPreserveAttachments",
          "text": " If preserveAttachmentCount is not 0, pPreserveAttachments must be a valid pointer to an array of preserveAttachmentCount uint32_t values"
        }
      ],
      "(VK_AMD_mixed_attachment_samples)": [
        {
          "vuid": "pColorAttachments",
          "text": " All attachments in pColorAttachments that are not VK_ATTACHMENT_UNUSED must have a sample count that is smaller than or equal to the sample count of pDepthStencilAttachment if it is not VK_ATTACHMENT_UNUSED"
        }
      ],
      "!(VK_AMD_mixed_attachment_samples)+!(VK_NV_framebuffer_mixed_samples)": [
        {
          "vuid": "pDepthStencilAttachment",
          "text": " If pDepthStencilAttachment is not VK_ATTACHMENT_UNUSED and any attachments in pColorAttachments are not VK_ATTACHMENT_UNUSED, they must have the same sample count"
        }
      ],
      "(VK_NVX_multiview_per_view_attributes)": [
        {
          "vuid": "flags",
          "text": " If flags includes VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX, it must also include VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX."
        }
      ]
    },
    "VkAttachmentReference": {
      "core": [
        {
          "vuid": "layout",
          "text": " layout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED"
        },
        {
          "vuid": "layout",
          "text": " layout must be a valid VkImageLayout value"
        }
      ]
    },
    "VkSubpassDependency": {
      "core": [
        {
          "vuid": "srcSubpass",
          "text": " If srcSubpass is not VK_SUBPASS_EXTERNAL, srcStageMask must not include VK_PIPELINE_STAGE_HOST_BIT"
        },
        {
          "vuid": "dstSubpass",
          "text": " If dstSubpass is not VK_SUBPASS_EXTERNAL, dstStageMask must not include VK_PIPELINE_STAGE_HOST_BIT"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "srcSubpass",
          "text": " srcSubpass must be less than or equal to dstSubpass, unless one of them is VK_SUBPASS_EXTERNAL, to avoid cyclic dependencies and ensure a valid execution order"
        },
        {
          "vuid": "srcSubpass",
          "text": " srcSubpass and dstSubpass must not both be equal to VK_SUBPASS_EXTERNAL"
        },
        {
          "vuid": "srcSubpass",
          "text": " If srcSubpass is equal to dstSubpass, srcStageMask and dstStageMask must not set any bits that are neither VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT, nor one of the synchronization-pipeline-stages-types,graphics pipeline stages"
        },
        {
          "vuid": "srcSubpass",
          "text": " If srcSubpass is equal to dstSubpass and not all of the stages in srcStageMask and dstStageMask are synchronization-framebuffer-regions,framebuffer-space stages, the synchronization-pipeline-stages-order, logically latest pipeline stage in srcStageMask must be synchronization-pipeline-stages-order, logically earlier than or equal to the synchronization-pipeline-stages-order, logically earliest pipeline stage in dstStageMask"
        },
        {
          "vuid": "srcAccessMask",
          "text": " Any access flag included in srcAccessMask must be supported by one of the pipeline stages in srcStageMask, as specified in the synchronization-access-types-supported, table of supported access types"
        },
        {
          "vuid": "dstAccessMask",
          "text": " Any access flag included in dstAccessMask must be supported by one of the pipeline stages in dstStageMask, as specified in the synchronization-access-types-supported, table of supported access types"
        },
        {
          "vuid": "srcSubpass",
          "text": " If srcSubpass equals dstSubpass, and srcStageMask and dstStageMask both include a synchronization-framebuffer-regions,framebuffer-space stage, then dependencyFlags must include VK_DEPENDENCY_BY_REGION_BIT"
        },
        {
          "vuid": "srcStageMask",
          "text": " srcStageMask must be a valid combination of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "srcStageMask",
          "text": " srcStageMask must not be 0"
        },
        {
          "vuid": "dstStageMask",
          "text": " dstStageMask must be a valid combination of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "dstStageMask",
          "text": " dstStageMask must not be 0"
        },
        {
          "vuid": "srcAccessMask",
          "text": " srcAccessMask must be a valid combination of VkAccessFlagBits values"
        },
        {
          "vuid": "dstAccessMask",
          "text": " dstAccessMask must be a valid combination of VkAccessFlagBits values"
        },
        {
          "vuid": "dependencyFlags",
          "text": " dependencyFlags must be a valid combination of VkDependencyFlagBits values"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "dependencyFlags",
          "text": " If dependencyFlags includes VK_DEPENDENCY_VIEW_LOCAL_BIT, then both srcSubpass and dstSubpass must not equal VK_SUBPASS_EXTERNAL"
        },
        {
          "vuid": "dependencyFlags",
          "text": " If dependencyFlags includes VK_DEPENDENCY_VIEW_LOCAL_BIT, then the render pass must have multiview enabled"
        },
        {
          "vuid": "srcSubpass",
          "text": " If srcSubpass equals dstSubpass and that subpass has more than one bit set in the view mask, then dependencyFlags must include VK_DEPENDENCY_VIEW_LOCAL_BIT"
        }
      ],
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        }
      ]
    },
    "vkCreateRenderPass2KHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkRenderPassCreateInfo2KHR structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pRenderPass",
          "text": " pRenderPass must be a valid pointer to a VkRenderPass handle"
        }
      ]
    },
    "VkRenderPassCreateInfo2KHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "None",
          "text": " If any two subpasses operate on attachments with overlapping ranges of the same VkDeviceMemory object, and at least one subpass writes to that area of VkDeviceMemory, a subpass dependency must be included (either directly or via some intermediate subpasses) between them"
        },
        {
          "vuid": "attachment",
          "text": " If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or the attachment indexed by any element of pPreserveAttachments in any given element of pSubpasses is bound to a range of a VkDeviceMemory object that overlaps with any other attachment in any subpass (including the same subpass), the VkAttachmentDescription2KHR structures describing them must include VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT in flags"
        },
        {
          "vuid": "attachment",
          "text": " If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or any element of pPreserveAttachments in any given element of pSubpasses is not VK_ATTACHMENT_UNUSED, it must be less than attachmentCount"
        },
        {
          "vuid": "pPreserveAttachments",
          "text": " The value of any element of the pPreserveAttachments member in any given element of pSubpasses must not be VK_ATTACHMENT_UNUSED"
        },
        {
          "vuid": "pAttachments",
          "text": " For any member of pAttachments with a loadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL."
        },
        {
          "vuid": "pDependencies",
          "text": " For any element of pDependencies, if the srcSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the srcStageMask member of that dependency must be a pipeline stage supported by the synchronization-pipeline-stages-types, pipeline identified by the pipelineBindPoint member of the source subpass."
        },
        {
          "vuid": "pDependencies",
          "text": " For any element of pDependencies, if the dstSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the dstStageMask member of that dependency must be a pipeline stage supported by the synchronization-pipeline-stages-types, pipeline identified by the pipelineBindPoint member of the source subpass."
        },
        {
          "vuid": "pCorrelatedViewMasks",
          "text": " The set of bits included in any element of pCorrelatedViewMasks must not overlap with the set of bits included in any other element of pCorrelatedViewMasks"
        },
        {
          "vuid": "viewMask",
          "text": " If the VkSubpassDescription2KHR::viewMask member of all elements of pSubpasses is 0, correlatedViewMaskCount must be 0"
        },
        {
          "vuid": "viewMask",
          "text": " The VkSubpassDescription2KHR::viewMask member of all elements of pSubpasses must either all be 0, or all not be 0"
        },
        {
          "vuid": "viewMask",
          "text": " If the VkSubpassDescription2KHR::viewMask member of all elements of pSubpasses is 0, the dependencyFlags member of any element of pDependencies must not include VK_DEPENDENCY_VIEW_LOCAL_BIT"
        },
        {
          "vuid": "pDependencies",
          "text": " For any element of pDependencies where its srcSubpass member equals its dstSubpass member, if the viewMask member of the corresponding element of pSubpasses includes more than one bit, its dependencyFlags member must include VK_DEPENDENCY_VIEW_LOCAL_BIT"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pAttachments",
          "text": " If attachmentCount is not 0, pAttachments must be a valid pointer to an array of attachmentCount valid VkAttachmentDescription2KHR structures"
        },
        {
          "vuid": "pSubpasses",
          "text": " pSubpasses must be a valid pointer to an array of subpassCount valid VkSubpassDescription2KHR structures"
        },
        {
          "vuid": "pDependencies",
          "text": " If dependencyCount is not 0, pDependencies must be a valid pointer to an array of dependencyCount valid VkSubpassDependency2KHR structures"
        },
        {
          "vuid": "pCorrelatedViewMasks",
          "text": " If correlatedViewMaskCount is not 0, pCorrelatedViewMasks must be a valid pointer to an array of correlatedViewMaskCount uint32_t values"
        },
        {
          "vuid": "subpassCount",
          "text": " subpassCount must be greater than 0"
        }
      ]
    },
    "VkAttachmentDescription2KHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "finalLayout",
          "text": " finalLayout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkAttachmentDescriptionFlagBits values"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "samples",
          "text": " samples must be a valid VkSampleCountFlagBits value"
        },
        {
          "vuid": "loadOp",
          "text": " loadOp must be a valid VkAttachmentLoadOp value"
        },
        {
          "vuid": "storeOp",
          "text": " storeOp must be a valid VkAttachmentStoreOp value"
        },
        {
          "vuid": "stencilLoadOp",
          "text": " stencilLoadOp must be a valid VkAttachmentLoadOp value"
        },
        {
          "vuid": "stencilStoreOp",
          "text": " stencilStoreOp must be a valid VkAttachmentStoreOp value"
        },
        {
          "vuid": "initialLayout",
          "text": " initialLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "finalLayout",
          "text": " finalLayout must be a valid VkImageLayout value"
        }
      ]
    },
    "VkSubpassDescription2KHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "pipelineBindPoint",
          "text": " pipelineBindPoint must be VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "colorAttachmentCount",
          "text": " colorAttachmentCount must be less than or equal to VkPhysicalDeviceLimits::maxColorAttachments"
        },
        {
          "vuid": "loadOp",
          "text": " If the first use of an attachment in this render pass is as an input attachment, and the attachment is not also used as a color or depth/stencil attachment in the same subpass, then loadOp must not be VK_ATTACHMENT_LOAD_OP_CLEAR"
        },
        {
          "vuid": "pResolveAttachments",
          "text": " If pResolveAttachments is not NULL, for each resolve attachment that does not have the value VK_ATTACHMENT_UNUSED, the corresponding color attachment must not have the value VK_ATTACHMENT_UNUSED"
        },
        {
          "vuid": "pResolveAttachments",
          "text": " If pResolveAttachments is not NULL, the sample count of each element of pColorAttachments must be anything other than VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "pResolveAttachments",
          "text": " Any given element of pResolveAttachments must have a sample count of VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "pResolveAttachments",
          "text": " Any given element of pResolveAttachments must have the same VkFormat as its corresponding color attachment"
        },
        {
          "vuid": "pColorAttachments",
          "text": " All attachments in pColorAttachments that are not VK_ATTACHMENT_UNUSED must have the same sample count"
        },
        {
          "vuid": "None",
          "text": " If any input attachments are VK_ATTACHMENT_UNUSED, then any pipelines bound during the subpass must not access those input attachments from the fragment shader"
        },
        {
          "vuid": "attachment",
          "text": " The attachment member of any element of pPreserveAttachments must not be VK_ATTACHMENT_UNUSED"
        },
        {
          "vuid": "pPreserveAttachments",
          "text": " Any given element of pPreserveAttachments must not also be an element of any other member of the subpass description"
        },
        {
          "vuid": "layout",
          "text": " If any attachment is used as both an input attachment and a color or depth/stencil attachment, then each use must use the same layout"
        },
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of any element of pInputAttachments must be a valid combination of VkImageAspectFlagBits"
        },
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of any element of pInputAttachments must not be 0"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkSubpassDescriptionFlagBits values"
        },
        {
          "vuid": "pipelineBindPoint",
          "text": " pipelineBindPoint must be a valid VkPipelineBindPoint value"
        },
        {
          "vuid": "pInputAttachments",
          "text": " If inputAttachmentCount is not 0, pInputAttachments must be a valid pointer to an array of inputAttachmentCount valid VkAttachmentReference2KHR structures"
        },
        {
          "vuid": "pColorAttachments",
          "text": " If colorAttachmentCount is not 0, pColorAttachments must be a valid pointer to an array of colorAttachmentCount valid VkAttachmentReference2KHR structures"
        },
        {
          "vuid": "pResolveAttachments",
          "text": " If colorAttachmentCount is not 0, and pResolveAttachments is not NULL, pResolveAttachments must be a valid pointer to an array of colorAttachmentCount valid VkAttachmentReference2KHR structures"
        },
        {
          "vuid": "pDepthStencilAttachment",
          "text": " If pDepthStencilAttachment is not NULL, pDepthStencilAttachment must be a valid pointer to a valid VkAttachmentReference2KHR structure"
        },
        {
          "vuid": "pPreserveAttachments",
          "text": " If preserveAttachmentCount is not 0, pPreserveAttachments must be a valid pointer to an array of preserveAttachmentCount uint32_t values"
        }
      ],
      "(VK_KHR_create_renderpass2)+(VK_AMD_mixed_attachment_samples)": [
        {
          "vuid": "pColorAttachments",
          "text": " All attachments in pColorAttachments that are not VK_ATTACHMENT_UNUSED must have a sample count that is smaller than or equal to the sample count of pDepthStencilAttachment if it is not VK_ATTACHMENT_UNUSED"
        }
      ],
      "(VK_KHR_create_renderpass2)+!(VK_AMD_mixed_attachment_samples)+!(VK_NV_framebuffer_mixed_samples)": [
        {
          "vuid": "pDepthStencilAttachment",
          "text": " If pDepthStencilAttachment is not VK_ATTACHMENT_UNUSED and any attachments in pColorAttachments are not VK_ATTACHMENT_UNUSED, they must have the same sample count"
        }
      ],
      "(VK_KHR_create_renderpass2)+(VK_NVX_multiview_per_view_attributes)": [
        {
          "vuid": "flags",
          "text": " If flags includes VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX, it must also include VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX."
        }
      ]
    },
    "VkAttachmentReference2KHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "layout",
          "text": " layout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR"
        },
        {
          "vuid": "layout",
          "text": " layout must be a valid VkImageLayout value"
        }
      ]
    },
    "VkSubpassDependency2KHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "srcSubpass",
          "text": " If srcSubpass is not VK_SUBPASS_EXTERNAL, srcStageMask must not include VK_PIPELINE_STAGE_HOST_BIT"
        },
        {
          "vuid": "dstSubpass",
          "text": " If dstSubpass is not VK_SUBPASS_EXTERNAL, dstStageMask must not include VK_PIPELINE_STAGE_HOST_BIT"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
        },
        {
          "vuid": "srcSubpass",
          "text": " srcSubpass must be less than or equal to dstSubpass, unless one of them is VK_SUBPASS_EXTERNAL, to avoid cyclic dependencies and ensure a valid execution order"
        },
        {
          "vuid": "srcSubpass",
          "text": " srcSubpass and dstSubpass must not both be equal to VK_SUBPASS_EXTERNAL"
        },
        {
          "vuid": "srcSubpass",
          "text": " If srcSubpass is equal to dstSubpass, srcStageMask and dstStageMask must not set any bits that are neither VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT, nor one of the synchronization-pipeline-stages-types,graphics pipeline stages"
        },
        {
          "vuid": "srcSubpass",
          "text": " If srcSubpass is equal to dstSubpass and not all of the stages in srcStageMask and dstStageMask are synchronization-framebuffer-regions,framebuffer-space stages, the synchronization-pipeline-stages-order, logically latest pipeline stage in srcStageMask must be synchronization-pipeline-stages-order, logically earlier than or equal to the synchronization-pipeline-stages-order, logically earliest pipeline stage in dstStageMask"
        },
        {
          "vuid": "srcAccessMask",
          "text": " Any access flag included in srcAccessMask must be supported by one of the pipeline stages in srcStageMask, as specified in the synchronization-access-types-supported, table of supported access types"
        },
        {
          "vuid": "dstAccessMask",
          "text": " Any access flag included in dstAccessMask must be supported by one of the pipeline stages in dstStageMask, as specified in the synchronization-access-types-supported, table of supported access types"
        },
        {
          "vuid": "dependencyFlags",
          "text": " If dependencyFlags includes VK_DEPENDENCY_VIEW_LOCAL_BIT, srcSubpass must not be equal to VK_SUBPASS_EXTERNAL"
        },
        {
          "vuid": "dependencyFlags",
          "text": " If dependencyFlags includes VK_DEPENDENCY_VIEW_LOCAL_BIT, dstSubpass must not be equal to VK_SUBPASS_EXTERNAL"
        },
        {
          "vuid": "srcSubpass",
          "text": " If srcSubpass equals dstSubpass, and srcStageMask and dstStageMask both include a synchronization-framebuffer-regions,framebuffer-space stage, then dependencyFlags must include VK_DEPENDENCY_BY_REGION_BIT"
        },
        {
          "vuid": "dependencyFlags",
          "text": " If dependencyFlags does not include VK_DEPENDENCY_VIEW_LOCAL_BIT, viewOffset must be 0"
        },
        {
          "vuid": "viewOffset",
          "text": " If viewOffset is not 0, srcSubpass must not be equal to dstSubpass."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR"
        },
        {
          "vuid": "srcStageMask",
          "text": " srcStageMask must be a valid combination of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "srcStageMask",
          "text": " srcStageMask must not be 0"
        },
        {
          "vuid": "dstStageMask",
          "text": " dstStageMask must be a valid combination of VkPipelineStageFlagBits values"
        },
        {
          "vuid": "dstStageMask",
          "text": " dstStageMask must not be 0"
        },
        {
          "vuid": "srcAccessMask",
          "text": " srcAccessMask must be a valid combination of VkAccessFlagBits values"
        },
        {
          "vuid": "dstAccessMask",
          "text": " dstAccessMask must be a valid combination of VkAccessFlagBits values"
        },
        {
          "vuid": "dependencyFlags",
          "text": " dependencyFlags must be a valid combination of VkDependencyFlagBits values"
        }
      ],
      "(VK_KHR_create_renderpass2)+(VK_NV_mesh_shader)": [
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "srcStageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-meshShader,mesh shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV"
        },
        {
          "vuid": "dstStageMask",
          "text": " If the features-features-taskShader,task shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV"
        }
      ]
    },
    "vkDestroyRenderPass": {
      "core": [
        {
          "vuid": "renderPass",
          "text": " All submitted commands that refer to renderPass must have completed execution"
        },
        {
          "vuid": "renderPass",
          "text": " If VkAllocationCallbacks were provided when renderPass was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "renderPass",
          "text": " If no VkAllocationCallbacks were provided when renderPass was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "renderPass",
          "text": " If renderPass is not VK_NULL_HANDLE, renderPass must be a valid VkRenderPass handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "renderPass",
          "text": " If renderPass is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreateFramebuffer": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkFramebufferCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pFramebuffer",
          "text": " pFramebuffer must be a valid pointer to a VkFramebuffer handle"
        }
      ]
    },
    "VkFramebufferCreateInfo": {
      "core": [
        {
          "vuid": "attachmentCount",
          "text": " attachmentCount must be equal to the attachment count specified in renderPass"
        },
        {
          "vuid": "pAttachments",
          "text": " Each element of pAttachments that is used as a color attachment or resolve attachment by renderPass must have been created with a usage value including VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT"
        },
        {
          "vuid": "pAttachments",
          "text": " Each element of pAttachments that is used as a depth/stencil attachment by renderPass must have been created with a usage value including VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT"
        },
        {
          "vuid": "pAttachments",
          "text": " Each element of pAttachments that is used as an input attachment by renderPass must have been created with a usage value including VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT"
        },
        {
          "vuid": "pAttachments",
          "text": " Each element of pAttachments must have been created with an VkFormat value that matches the VkFormat specified by the corresponding VkAttachmentDescription in renderPass"
        },
        {
          "vuid": "pAttachments",
          "text": " Each element of pAttachments must have been created with a samples value that matches the samples value specified by the corresponding VkAttachmentDescription in renderPass"
        },
        {
          "vuid": "pAttachments",
          "text": " Each element of pAttachments must have dimensions at least as large as the corresponding framebuffer dimension"
        },
        {
          "vuid": "pAttachments",
          "text": " Each element of pAttachments must only specify a single mip level"
        },
        {
          "vuid": "pAttachments",
          "text": " Each element of pAttachments must have been created with the identity swizzle"
        },
        {
          "vuid": "width",
          "text": " width must be greater than 0."
        },
        {
          "vuid": "width",
          "text": " width must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferWidth"
        },
        {
          "vuid": "height",
          "text": " height must be greater than 0."
        },
        {
          "vuid": "height",
          "text": " height must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferHeight"
        },
        {
          "vuid": "layers",
          "text": " layers must be greater than 0."
        },
        {
          "vuid": "layers",
          "text": " layers must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferLayers"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "renderPass",
          "text": " renderPass must be a valid VkRenderPass handle"
        },
        {
          "vuid": "pAttachments",
          "text": " If attachmentCount is not 0, pAttachments must be a valid pointer to an array of attachmentCount valid VkImageView handles"
        },
        {
          "vuid": "commonparent",
          "text": " Both of renderPass, and the elements of pAttachments that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "pAttachments",
          "text": " Each element of pAttachments that is a 2D or 2D array image view taken from a 3D image must not be a depth/stencil format"
        }
      ]
    },
    "vkDestroyFramebuffer": {
      "core": [
        {
          "vuid": "framebuffer",
          "text": " All submitted commands that refer to framebuffer must have completed execution"
        },
        {
          "vuid": "framebuffer",
          "text": " If VkAllocationCallbacks were provided when framebuffer was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "framebuffer",
          "text": " If no VkAllocationCallbacks were provided when framebuffer was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "framebuffer",
          "text": " If framebuffer is not VK_NULL_HANDLE, framebuffer must be a valid VkFramebuffer handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "framebuffer",
          "text": " If framebuffer is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCmdBeginRenderPass": {
      "core": [
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set"
        },
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_SAMPLED_BIT or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set"
        },
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT set"
        },
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT set"
        },
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout members of the VkAttachmentDescription structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is not VK_IMAGE_LAYOUT_UNDEFINED, then each such initialLayout must be equal to the current layout of the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin"
        },
        {
          "vuid": "srcStageMask",
          "text": " The srcStageMask and dstStageMask members of any element of the pDependencies member of VkRenderPassCreateInfo used to create renderPass must be supported by the capabilities of the queue family identified by the queueFamilyIndex member of the VkCommandPoolCreateInfo used to create the command pool which commandBuffer was allocated from."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pRenderPassBegin",
          "text": " pRenderPassBegin must be a valid pointer to a valid VkRenderPassBeginInfo structure"
        },
        {
          "vuid": "contents",
          "text": " contents must be a valid VkSubpassContents value"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "bufferlevel",
          "text": " commandBuffer must be a primary VkCommandBuffer"
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
        }
      ]
    },
    "vkCmdBeginRenderPass2KHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set"
        },
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_SAMPLED_BIT or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set"
        },
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT set"
        },
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT set"
        },
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout members of the VkAttachmentDescription structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is not VK_IMAGE_LAYOUT_UNDEFINED, then each such initialLayout must be equal to the current layout of the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin"
        },
        {
          "vuid": "srcStageMask",
          "text": " The srcStageMask and dstStageMask members of any element of the pDependencies member of VkRenderPassCreateInfo used to create renderPass must be supported by the capabilities of the queue family identified by the queueFamilyIndex member of the VkCommandPoolCreateInfo used to create the command pool which commandBuffer was allocated from."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pRenderPassBegin",
          "text": " pRenderPassBegin must be a valid pointer to a valid VkRenderPassBeginInfo structure"
        },
        {
          "vuid": "pSubpassBeginInfo",
          "text": " pSubpassBeginInfo must be a valid pointer to a valid VkSubpassBeginInfoKHR structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "bufferlevel",
          "text": " commandBuffer must be a primary VkCommandBuffer"
        }
      ],
      "(VK_KHR_create_renderpass2)+!(VK_KHR_maintenance2)": [
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
        }
      ],
      "(VK_KHR_create_renderpass2)+(VK_KHR_maintenance2)": [
        {
          "vuid": "initialLayout",
          "text": " If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
        }
      ]
    },
    "VkRenderPassBeginInfo": {
      "core": [
        {
          "vuid": "clearValueCount",
          "text": " clearValueCount must be greater than the largest attachment index in renderPass that specifies a loadOp (or stencilLoadOp, if the attachment has a depth/stencil format) of VK_ATTACHMENT_LOAD_OP_CLEAR"
        },
        {
          "vuid": "clearValueCount",
          "text": " If clearValueCount is not 0, pClearValues must be a valid pointer to an array of clearValueCount valid VkClearValue unions"
        },
        {
          "vuid": "renderPass",
          "text": " renderPass must be renderpass-compatibility,compatible with the renderPass member of the VkFramebufferCreateInfo structure specified when creating framebuffer."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDeviceGroupRenderPassBeginInfo or VkRenderPassSampleLocationsBeginInfoEXT"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "renderPass",
          "text": " renderPass must be a valid VkRenderPass handle"
        },
        {
          "vuid": "framebuffer",
          "text": " framebuffer must be a valid VkFramebuffer handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of framebuffer, and renderPass must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkRenderPassSampleLocationsBeginInfoEXT": {
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT"
        },
        {
          "vuid": "pAttachmentInitialSampleLocations",
          "text": " If attachmentInitialSampleLocationsCount is not 0, pAttachmentInitialSampleLocations must be a valid pointer to an array of attachmentInitialSampleLocationsCount valid VkAttachmentSampleLocationsEXT structures"
        },
        {
          "vuid": "pPostSubpassSampleLocations",
          "text": " If postSubpassSampleLocationsCount is not 0, pPostSubpassSampleLocations must be a valid pointer to an array of postSubpassSampleLocationsCount valid VkSubpassSampleLocationsEXT structures"
        }
      ]
    },
    "VkAttachmentSampleLocationsEXT": {
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "attachmentIndex",
          "text": " attachmentIndex must be less than the attachmentCount specified in VkRenderPassCreateInfo the render pass specified by VkRenderPassBeginInfo::renderPass was created with"
        },
        {
          "vuid": "sampleLocationsInfo",
          "text": " sampleLocationsInfo must be a valid VkSampleLocationsInfoEXT structure"
        }
      ]
    },
    "VkSubpassSampleLocationsEXT": {
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "subpassIndex",
          "text": " subpassIndex must be less than the subpassCount specified in VkRenderPassCreateInfo the render pass specified by VkRenderPassBeginInfo::renderPass was created with"
        },
        {
          "vuid": "sampleLocationsInfo",
          "text": " sampleLocationsInfo must be a valid VkSampleLocationsInfoEXT structure"
        }
      ]
    },
    "VkSubpassBeginInfoKHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "contents",
          "text": " contents must be a valid VkSubpassContents value"
        }
      ]
    },
    "VkDeviceGroupRenderPassBeginInfo": {
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "deviceMask",
          "text": " deviceMask must be a valid device mask value"
        },
        {
          "vuid": "deviceMask",
          "text": " deviceMask must not be zero"
        },
        {
          "vuid": "deviceMask",
          "text": " deviceMask must be a subset of the command buffer’s initial device mask"
        },
        {
          "vuid": "deviceRenderAreaCount",
          "text": " deviceRenderAreaCount must either be zero or equal to the number of physical devices in the logical device."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO"
        },
        {
          "vuid": "pDeviceRenderAreas",
          "text": " If deviceRenderAreaCount is not 0, pDeviceRenderAreas must be a valid pointer to an array of deviceRenderAreaCount VkRect2D structures"
        }
      ]
    },
    "vkGetRenderAreaGranularity": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "renderPass",
          "text": " renderPass must be a valid VkRenderPass handle"
        },
        {
          "vuid": "pGranularity",
          "text": " pGranularity must be a valid pointer to a VkExtent2D structure"
        },
        {
          "vuid": "renderPass",
          "text": " renderPass must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCmdNextSubpass": {
      "core": [
        {
          "vuid": "None",
          "text": " The current subpass index must be less than the number of subpasses in the render pass minus one"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "contents",
          "text": " contents must be a valid VkSubpassContents value"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "bufferlevel",
          "text": " commandBuffer must be a primary VkCommandBuffer"
        }
      ]
    },
    "vkCmdNextSubpass2KHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "None",
          "text": " The current subpass index must be less than the number of subpasses in the render pass minus one"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pSubpassBeginInfo",
          "text": " pSubpassBeginInfo must be a valid pointer to a valid VkSubpassBeginInfoKHR structure"
        },
        {
          "vuid": "pSubpassEndInfo",
          "text": " pSubpassEndInfo must be a valid pointer to a valid VkSubpassEndInfoKHR structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "bufferlevel",
          "text": " commandBuffer must be a primary VkCommandBuffer"
        }
      ]
    },
    "vkCmdEndRenderPass": {
      "core": [
        {
          "vuid": "None",
          "text": " The current subpass index must be equal to the number of subpasses in the render pass minus one"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "bufferlevel",
          "text": " commandBuffer must be a primary VkCommandBuffer"
        }
      ]
    },
    "vkCmdEndRenderPass2KHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "None",
          "text": " The current subpass index must be equal to the number of subpasses in the render pass minus one"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pSubpassEndInfo",
          "text": " pSubpassEndInfo must be a valid pointer to a valid VkSubpassEndInfoKHR structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "bufferlevel",
          "text": " commandBuffer must be a primary VkCommandBuffer"
        }
      ]
    },
    "VkSubpassEndInfoKHR": {
      "(VK_KHR_create_renderpass2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkCreateShaderModule": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkShaderModuleCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pShaderModule",
          "text": " pShaderModule must be a valid pointer to a VkShaderModule handle"
        }
      ]
    },
    "VkShaderModuleCreateInfo": {
      "core": [
        {
          "vuid": "codeSize",
          "text": " codeSize must be greater than 0"
        },
        {
          "vuid": "pCode",
          "text": " pCode must declare the Shader capability for SPIR-V code"
        },
        {
          "vuid": "pCode",
          "text": " pCode must not declare any capability that is not supported by the API, as described by the spirvenv-module-validation, Capabilities section of the spirvenv-capabilities,SPIR-V Environment appendix"
        },
        {
          "vuid": "pCode",
          "text": " If pCode declares any of the capabilities listed as optional in the spirvenv-capabilities-table,SPIR-V Environment appendix, the corresponding feature(s) must be enabled."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkShaderModuleValidationCacheCreateInfoEXT"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pCode",
          "text": " pCode must be a valid pointer to an array of \\(codeSize \\over 4\\) uint32_t values"
        }
      ],
      "!(VK_NV_glsl_shader)": [
        {
          "vuid": "codeSize",
          "text": " codeSize must be a multiple of 4"
        },
        {
          "vuid": "pCode",
          "text": " pCode must point to valid SPIR-V code, formatted and packed as described by the spirv-spec,Khronos SPIR-V Specification"
        },
        {
          "vuid": "pCode",
          "text": " pCode must adhere to the validation rules described by the spirvenv-module-validation, Validation Rules within a Module section of the spirvenv-capabilities,SPIR-V Environment appendix"
        }
      ],
      "(VK_NV_glsl_shader)": [
        {
          "vuid": "pCode",
          "text": " If pCode points to SPIR-V code, codeSize must be a multiple of 4"
        },
        {
          "vuid": "pCode",
          "text": " pCode must point to either valid SPIR-V code, formatted and packed as described by the Khronos SPIR-V Specification or valid GLSL code which must be written to the GL_KHR_vulkan_glsl extension specification"
        },
        {
          "vuid": "pCode",
          "text": " If pCode points to SPIR-V code, that code must adhere to the validation rules described by the spirvenv-module-validation, Validation Rules within a Module section of the spirvenv-capabilities,SPIR-V Environment appendix"
        },
        {
          "vuid": "pCode",
          "text": " If pCode points to GLSL code, it must be valid GLSL code written to the GL_KHR_vulkan_glsl GLSL extension specification"
        }
      ]
    },
    "VkShaderModuleValidationCacheCreateInfoEXT": {
      "(VK_EXT_validation_cache)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT"
        },
        {
          "vuid": "validationCache",
          "text": " validationCache must be a valid VkValidationCacheEXT handle"
        }
      ]
    },
    "vkDestroyShaderModule": {
      "core": [
        {
          "vuid": "shaderModule",
          "text": " If VkAllocationCallbacks were provided when shaderModule was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "shaderModule",
          "text": " If no VkAllocationCallbacks were provided when shaderModule was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "shaderModule",
          "text": " If shaderModule is not VK_NULL_HANDLE, shaderModule must be a valid VkShaderModule handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "shaderModule",
          "text": " If shaderModule is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreateValidationCacheEXT": {
      "(VK_EXT_validation_cache)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkValidationCacheCreateInfoEXT structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pValidationCache",
          "text": " pValidationCache must be a valid pointer to a VkValidationCacheEXT handle"
        }
      ]
    },
    "VkValidationCacheCreateInfoEXT": {
      "(VK_EXT_validation_cache)": [
        {
          "vuid": "initialDataSize",
          "text": " If initialDataSize is not 0, it must be equal to the size of pInitialData, as returned by vkGetValidationCacheDataEXT when pInitialData was originally retrieved"
        },
        {
          "vuid": "initialDataSize",
          "text": " If initialDataSize is not 0, pInitialData must have been retrieved from a previous call to vkGetValidationCacheDataEXT"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pInitialData",
          "text": " If initialDataSize is not 0, pInitialData must be a valid pointer to an array of initialDataSize bytes"
        }
      ]
    },
    "vkMergeValidationCachesEXT": {
      "(VK_EXT_validation_cache)": [
        {
          "vuid": "dstCache",
          "text": " dstCache must not appear in the list of source caches"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "dstCache",
          "text": " dstCache must be a valid VkValidationCacheEXT handle"
        },
        {
          "vuid": "pSrcCaches",
          "text": " pSrcCaches must be a valid pointer to an array of srcCacheCount valid VkValidationCacheEXT handles"
        },
        {
          "vuid": "srcCacheCount",
          "text": " srcCacheCount must be greater than 0"
        },
        {
          "vuid": "dstCache",
          "text": " dstCache must have been created, allocated, or retrieved from device"
        },
        {
          "vuid": "pSrcCaches",
          "text": " Each element of pSrcCaches must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetValidationCacheDataEXT": {
      "(VK_EXT_validation_cache)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "validationCache",
          "text": " validationCache must be a valid VkValidationCacheEXT handle"
        },
        {
          "vuid": "pDataSize",
          "text": " pDataSize must be a valid pointer to a size_t value"
        },
        {
          "vuid": "pData",
          "text": " If the value referenced by pDataSize is not 0, and pData is not NULL, pData must be a valid pointer to an array of pDataSize bytes"
        },
        {
          "vuid": "validationCache",
          "text": " validationCache must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkDestroyValidationCacheEXT": {
      "(VK_EXT_validation_cache)": [
        {
          "vuid": "validationCache",
          "text": " If VkAllocationCallbacks were provided when validationCache was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "validationCache",
          "text": " If no VkAllocationCallbacks were provided when validationCache was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "validationCache",
          "text": " If validationCache is not VK_NULL_HANDLE, validationCache must be a valid VkValidationCacheEXT handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "validationCache",
          "text": " If validationCache is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreateComputePipelines": {
      "core": [
        {
          "vuid": "flags",
          "text": " If the flags member of any element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and the basePipelineIndex member of that same element is not -1, basePipelineIndex must be less than the index into pCreateInfos that corresponds to that element"
        },
        {
          "vuid": "flags",
          "text": " If the flags member of any element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, the base pipeline must have been created with the VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT flag set"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pipelineCache",
          "text": " If pipelineCache is not VK_NULL_HANDLE, pipelineCache must be a valid VkPipelineCache handle"
        },
        {
          "vuid": "pCreateInfos",
          "text": " pCreateInfos must be a valid pointer to an array of createInfoCount valid VkComputePipelineCreateInfo structures"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pPipelines",
          "text": " pPipelines must be a valid pointer to an array of createInfoCount VkPipeline handles"
        },
        {
          "vuid": "createInfoCount",
          "text": " createInfoCount must be greater than 0"
        },
        {
          "vuid": "pipelineCache",
          "text": " If pipelineCache is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "VkComputePipelineCreateInfo": {
      "core": [
        {
          "vuid": "flags",
          "text": " If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is -1, basePipelineHandle must be a valid handle to a compute VkPipeline"
        },
        {
          "vuid": "flags",
          "text": " If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is VK_NULL_HANDLE, basePipelineIndex must be a valid index into the calling command’s pCreateInfos parameter"
        },
        {
          "vuid": "flags",
          "text": " If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is not -1, basePipelineHandle must be VK_NULL_HANDLE"
        },
        {
          "vuid": "flags",
          "text": " If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is not VK_NULL_HANDLE, basePipelineIndex must be -1"
        },
        {
          "vuid": "stage",
          "text": " The stage member of stage must be VK_SHADER_STAGE_COMPUTE_BIT"
        },
        {
          "vuid": "stage",
          "text": " The shader code for the entry point identified by stage and the rest of the state identified by this structure must adhere to the pipeline linking rules described in the interfaces,Shader Interfaces chapter"
        },
        {
          "vuid": "layout",
          "text": " layout must be descriptorsets-pipelinelayout-consistency,consistent with the layout of the compute shader specified in stage"
        },
        {
          "vuid": "layout",
          "text": " The number of resources in layout accessible to the compute shader stage must be less than or equal to VkPhysicalDeviceLimits::maxPerStageResources"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkPipelineCreateFlagBits values"
        },
        {
          "vuid": "stage",
          "text": " stage must be a valid VkPipelineShaderStageCreateInfo structure"
        },
        {
          "vuid": "layout",
          "text": " layout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of basePipelineHandle, and layout that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkPipelineShaderStageCreateInfo": {
      "core": [
        {
          "vuid": "stage",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, stage must not be VK_SHADER_STAGE_GEOMETRY_BIT"
        },
        {
          "vuid": "stage",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, stage must not be VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT"
        },
        {
          "vuid": "stage",
          "text": " stage must not be VK_SHADER_STAGE_ALL_GRAPHICS, or VK_SHADER_STAGE_ALL"
        },
        {
          "vuid": "pName",
          "text": " pName must be the name of an OpEntryPoint in module with an execution model that matches stage"
        },
        {
          "vuid": "maxClipDistances",
          "text": " If the identified entry point includes any variable in its interface that is declared with the ClipDistance BuiltIn decoration, that variable must not have an array size greater than VkPhysicalDeviceLimits::maxClipDistances"
        },
        {
          "vuid": "maxCullDistances",
          "text": " If the identified entry point includes any variable in its interface that is declared with the CullDistance BuiltIn decoration, that variable must not have an array size greater than VkPhysicalDeviceLimits::maxCullDistances"
        },
        {
          "vuid": "maxCombinedClipAndCullDistances",
          "text": " If the identified entry point includes any variables in its interface that are declared with the ClipDistance or CullDistance BuiltIn decoration, those variables must not have array sizes which sum to more than VkPhysicalDeviceLimits::maxCombinedClipAndCullDistances"
        },
        {
          "vuid": "maxSampleMaskWords",
          "text": " If the identified entry point includes any variable in its interface that is declared with the SampleMask BuiltIn decoration, that variable must not have an array size greater than VkPhysicalDeviceLimits::maxSampleMaskWords"
        },
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_VERTEX_BIT, the identified entry point must not include any input variable in its interface that is decorated with CullDistance"
        },
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, and the identified entry point has an OpExecutionMode instruction that specifies a patch size with OutputVertices, the patch size must be greater than 0 and less than or equal to VkPhysicalDeviceLimits::maxTessellationPatchSize"
        },
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must have an OpExecutionMode instruction that specifies a maximum output vertex count that is greater than 0 and less than or equal to VkPhysicalDeviceLimits::maxGeometryOutputVertices"
        },
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must have an OpExecutionMode instruction that specifies an invocation count that is greater than 0 and less than or equal to VkPhysicalDeviceLimits::maxGeometryShaderInvocations"
        },
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_GEOMETRY_BIT, and the identified entry point writes to Layer for any primitive, it must write the same value to Layer for all vertices of a given primitive"
        },
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_GEOMETRY_BIT, and the identified entry point writes to ViewportIndex for any primitive, it must write the same value to ViewportIndex for all vertices of a given primitive"
        },
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_FRAGMENT_BIT, the identified entry point must not include any output variables in its interface decorated with CullDistance"
        },
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_FRAGMENT_BIT, and the identified entry point writes to FragDepth in any execution path, it must write to FragDepth in all execution paths"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "stage",
          "text": " stage must be a valid VkShaderStageFlagBits value"
        },
        {
          "vuid": "module",
          "text": " module must be a valid VkShaderModule handle"
        },
        {
          "vuid": "pName",
          "text": " pName must be a null-terminated UTF-8 string"
        },
        {
          "vuid": "pSpecializationInfo",
          "text": " If pSpecializationInfo is not NULL, pSpecializationInfo must be a valid pointer to a valid VkSpecializationInfo structure"
        }
      ],
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "stage",
          "text": " If the features-features-meshShader,mesh shader feature is not enabled, stage must not be VK_SHADER_STAGE_MESH_BIT_NV"
        },
        {
          "vuid": "stage",
          "text": " If the features-features-taskShader,task shader feature is not enabled, stage must not be VK_SHADER_STAGE_TASK_BIT_NV"
        },
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_MESH_BIT_NV, the identified entry point must have an OpExecutionMode instruction that specifies a maximum output vertex count, OutputVertices, that is greater than 0 and less than or equal to VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshOutputVertices."
        },
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_MESH_BIT_NV, the identified entry point must have an OpExecutionMode instruction that specifies a maximum output primitive count, OutputPrimitivesNV, that is greater than 0 and less than or equal to VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshOutputPrimitives."
        }
      ],
      "(VK_EXT_shader_stencil_export)": [
        {
          "vuid": "stage",
          "text": " If stage is VK_SHADER_STAGE_FRAGMENT_BIT, and the identified entry point writes to FragStencilRefEXT in any execution path, it must write to FragStencilRefEXT in all execution paths"
        }
      ]
    },
    "vkCreateGraphicsPipelines": {
      "core": [
        {
          "vuid": "flags",
          "text": " If the flags member of any element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and the basePipelineIndex member of that same element is not -1, basePipelineIndex must be less than the index into pCreateInfos that corresponds to that element"
        },
        {
          "vuid": "flags",
          "text": " If the flags member of any element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, the base pipeline must have been created with the VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT flag set"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pipelineCache",
          "text": " If pipelineCache is not VK_NULL_HANDLE, pipelineCache must be a valid VkPipelineCache handle"
        },
        {
          "vuid": "pCreateInfos",
          "text": " pCreateInfos must be a valid pointer to an array of createInfoCount valid VkGraphicsPipelineCreateInfo structures"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pPipelines",
          "text": " pPipelines must be a valid pointer to an array of createInfoCount VkPipeline handles"
        },
        {
          "vuid": "createInfoCount",
          "text": " createInfoCount must be greater than 0"
        },
        {
          "vuid": "pipelineCache",
          "text": " If pipelineCache is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "VkGraphicsPipelineCreateInfo": {
      "core": [
        {
          "vuid": "flags",
          "text": " If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is -1, basePipelineHandle must be a valid handle to a graphics VkPipeline"
        },
        {
          "vuid": "flags",
          "text": " If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is VK_NULL_HANDLE, basePipelineIndex must be a valid index into the calling command’s pCreateInfos parameter"
        },
        {
          "vuid": "flags",
          "text": " If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is not -1, basePipelineHandle must be VK_NULL_HANDLE"
        },
        {
          "vuid": "flags",
          "text": " If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is not VK_NULL_HANDLE, basePipelineIndex must be -1"
        },
        {
          "vuid": "stage",
          "text": " The stage member of each element of pStages must be unique"
        },
        {
          "vuid": "stage",
          "text": " The stage member of each element of pStages must not be VK_SHADER_STAGE_COMPUTE_BIT"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes a tessellation control shader stage, it must include a tessellation evaluation shader stage"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes a tessellation evaluation shader stage, it must include a tessellation control shader stage"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes a tessellation control shader stage and a tessellation evaluation shader stage, pTessellationState must be a valid pointer to a valid VkPipelineTessellationStateCreateInfo structure"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes tessellation shader stages, the shader code of at least one stage must contain an OpExecutionMode instruction that specifies the type of subdivision in the pipeline"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes tessellation shader stages, and the shader code of both stages contain an OpExecutionMode instruction that specifies the type of subdivision in the pipeline, they must both specify the same subdivision mode"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes tessellation shader stages, the shader code of at least one stage must contain an OpExecutionMode instruction that specifies the output patch size in the pipeline"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes tessellation shader stages, and the shader code of both contain an OpExecutionMode instruction that specifies the out patch size in the pipeline, they must both specify the same patch size"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes tessellation shader stages, the topology member of pInputAssembly must be VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"
        },
        {
          "vuid": "topology",
          "text": " If the topology member of pInputAssembly is VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, pStages must include tessellation shader stages"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes a geometry shader stage, and does not include any tessellation shader stages, its shader code must contain an OpExecutionMode instruction that specifies an input primitive type that is shaders-geometry-execution, compatible with the primitive topology specified in pInputAssembly"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes a geometry shader stage, and also includes tessellation shader stages, its shader code must contain an OpExecutionMode instruction that specifies an input primitive type that is shaders-geometry-execution, compatible with the primitive topology that is output by the tessellation stages"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes a fragment shader stage and a geometry shader stage, and the fragment shader code reads from an input variable that is decorated with PrimitiveID, then the geometry shader code must write to a matching output variable, decorated with PrimitiveID, in all execution paths"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes a fragment shader stage, its shader code must not read from any input attachment that is defined as VK_ATTACHMENT_UNUSED in subpass"
        },
        {
          "vuid": "pStages",
          "text": " The shader code for the entry points identified by pStages, and the rest of the state identified by this structure must adhere to the pipeline linking rules described in the interfaces,Shader Interfaces chapter"
        },
        {
          "vuid": "blendEnable",
          "text": " If rasterization is not disabled and the subpass uses color attachments, then for each color attachment in the subpass the blendEnable member of the corresponding element of the pAttachment member of pColorBlendState must be VK_FALSE if the attached image’s resources-image-format-features,format features does not contain the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT."
        },
        {
          "vuid": "attachmentCount",
          "text": " If rasterization is not disabled and the subpass uses color attachments, the attachmentCount member of pColorBlendState must be equal to the colorAttachmentCount used to create subpass"
        },
        {
          "vuid": "pDynamicStates",
          "text": " If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_VIEWPORT, the pViewports member of pViewportState must be a valid pointer to an array of pViewportState::viewportCount valid VkViewport structures"
        },
        {
          "vuid": "pDynamicStates",
          "text": " If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_SCISSOR, the pScissors member of pViewportState must be a valid pointer to an array of pViewportState::scissorCount VkRect2D structures"
        },
        {
          "vuid": "pDynamicStates",
          "text": " If the wide lines feature is not enabled, and no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_LINE_WIDTH, the lineWidth member of pRasterizationState must be 1.0"
        },
        {
          "vuid": "rasterizerDiscardEnable",
          "text": " If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, pViewportState must be a valid pointer to a valid VkPipelineViewportStateCreateInfo structure"
        },
        {
          "vuid": "rasterizerDiscardEnable",
          "text": " If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, pMultisampleState must be a valid pointer to a valid VkPipelineMultisampleStateCreateInfo structure"
        },
        {
          "vuid": "rasterizerDiscardEnable",
          "text": " If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, and subpass uses a depth/stencil attachment, pDepthStencilState must be a valid pointer to a valid VkPipelineDepthStencilStateCreateInfo structure"
        },
        {
          "vuid": "rasterizerDiscardEnable",
          "text": " If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, and subpass uses color attachments, pColorBlendState must be a valid pointer to a valid VkPipelineColorBlendStateCreateInfo structure"
        },
        {
          "vuid": "pDynamicStates",
          "text": " If the depth bias clamping feature is not enabled, no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_DEPTH_BIAS, and the depthBiasEnable member of pRasterizationState is VK_TRUE, the depthBiasClamp member of pRasterizationState must be 0.0"
        },
        {
          "vuid": "layout",
          "text": " layout must be descriptorsets-pipelinelayout-consistency,consistent with all shaders specified in pStages"
        },
        {
          "vuid": "subpass",
          "text": " If subpass does not use any color and/or depth/stencil attachments, then the rasterizationSamples member of pMultisampleState must follow the rules for a renderpass-noattachments, zero-attachment subpass"
        },
        {
          "vuid": "subpass",
          "text": " subpass must be a valid subpass within renderPass"
        },
        {
          "vuid": "layout",
          "text": " The number of resources in layout accessible to each shader stage that is used by the pipeline must be less than or equal to VkPhysicalDeviceLimits::maxPerStageResources"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes a vertex shader stage, pVertexInputState must be a valid pointer to a valid VkPipelineVertexInputStateCreateInfo structure"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes a vertex shader stage, pInputAssemblyState must be a valid pointer to a valid VkPipelineInputAssemblyStateCreateInfo structure"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkPipelineDiscardRectangleStateCreateInfoEXT or VkPipelineRepresentativeFragmentTestStateCreateInfoNV"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkPipelineCreateFlagBits values"
        },
        {
          "vuid": "pStages",
          "text": " pStages must be a valid pointer to an array of stageCount valid VkPipelineShaderStageCreateInfo structures"
        },
        {
          "vuid": "pRasterizationState",
          "text": " pRasterizationState must be a valid pointer to a valid VkPipelineRasterizationStateCreateInfo structure"
        },
        {
          "vuid": "pDynamicState",
          "text": " If pDynamicState is not NULL, pDynamicState must be a valid pointer to a valid VkPipelineDynamicStateCreateInfo structure"
        },
        {
          "vuid": "layout",
          "text": " layout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "renderPass",
          "text": " renderPass must be a valid VkRenderPass handle"
        },
        {
          "vuid": "stageCount",
          "text": " stageCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Each of basePipelineHandle, layout, and renderPass that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "!(VK_NV_mesh_shader)": [
        {
          "vuid": "stage",
          "text": " The stage member of one element of pStages must be VK_SHADER_STAGE_VERTEX_BIT"
        }
      ],
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "pStages",
          "text": " The geometric shader stages provided in pStages must be either from the mesh shading pipeline (stage is VK_SHADER_STAGE_TASK_BIT_NV or VK_SHADER_STAGE_MESH_BIT_NV) or from the primitive shading pipeline (stage is VK_SHADER_STAGE_VERTEX_BIT, VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT, VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, or VK_SHADER_STAGE_GEOEMETRY_BIT)."
        },
        {
          "vuid": "stage",
          "text": " The stage member of one element of pStages must be either VK_SHADER_STAGE_VERTEX_BIT or VK_SHADER_STAGE_MESH_BIT_NV."
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "subpass",
          "text": " If rasterization is not disabled and subpass uses a depth/stencil attachment in renderPass that has a layout of VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL in the VkAttachmentReference defined by subpass, the depthWriteEnable member of pDepthStencilState must be VK_FALSE"
        },
        {
          "vuid": "subpass",
          "text": " If rasterization is not disabled and subpass uses a depth/stencil attachment in renderPass that has a layout of VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL in the VkAttachmentReference defined by subpass, the failOp, passOp and depthFailOp members of each of the front and back members of pDepthStencilState must be VK_STENCIL_OP_KEEP"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "subpass",
          "text": " If rasterization is not disabled and subpass uses a depth/stencil attachment in renderPass that has a layout of VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL in the VkAttachmentReference defined by subpass, the depthWriteEnable member of pDepthStencilState must be VK_FALSE"
        },
        {
          "vuid": "subpass",
          "text": " If rasterization is not disabled and subpass uses a depth/stencil attachment in renderPass that has a layout of VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL in the VkAttachmentReference defined by subpass, the failOp, passOp and depthFailOp members of each of the front and back members of pDepthStencilState must be VK_STENCIL_OP_KEEP"
        },
        {
          "vuid": "pStages",
          "text": " If pStages includes a fragment shader stage and an input attachment was referenced by the VkRenderPassInputAttachmentAspectCreateInfo at renderPass create time, its shader code must not read from any aspect that was not specified in the aspectMask of the corresponding VkInputAttachmentAspectReference structure."
        }
      ],
      "!(VK_EXT_depth_range_unrestricted)": [
        {
          "vuid": "pDynamicStates",
          "text": " If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_DEPTH_BOUNDS, and the depthBoundsTestEnable member of pDepthStencilState is VK_TRUE, the minDepthBounds and maxDepthBounds members of pDepthStencilState must be between 0.0 and 1.0, inclusive"
        }
      ],
      "(VK_EXT_depth_range_unrestricted)": [
        {
          "vuid": "pDynamicStates",
          "text": " If the VK_EXT_depth_range_unrestricted extension is not enabled and no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_DEPTH_BOUNDS, and the depthBoundsTestEnable member of pDepthStencilState is VK_TRUE, the minDepthBounds and maxDepthBounds members of pDepthStencilState must be between 0.0 and 1.0, inclusive"
        }
      ],
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "pDynamicStates",
          "text": " If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT, and the sampleLocationsEnable member of a VkPipelineSampleLocationsStateCreateInfoEXT structure chained to the pNext chain of pMultisampleState is VK_TRUE, sampleLocationsInfo.sampleLocationGridSize.width must evenly divide VkMultisamplePropertiesEXT::sampleLocationGridSize.width as returned by vkGetPhysicalDeviceMultisamplePropertiesEXT with a samples parameter equaling rasterizationSamples"
        },
        {
          "vuid": "pDynamicStates",
          "text": " If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT, and the sampleLocationsEnable member of a VkPipelineSampleLocationsStateCreateInfoEXT structure chained to the pNext chain of pMultisampleState is VK_TRUE, sampleLocationsInfo.sampleLocationGridSize.height must evenly divide VkMultisamplePropertiesEXT::sampleLocationGridSize.height as returned by vkGetPhysicalDeviceMultisamplePropertiesEXT with a samples parameter equaling rasterizationSamples"
        },
        {
          "vuid": "pDynamicStates",
          "text": " If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT, and the sampleLocationsEnable member of a VkPipelineSampleLocationsStateCreateInfoEXT structure chained to the pNext chain of pMultisampleState is VK_TRUE, sampleLocationsInfo.sampleLocationsPerPixel must equal rasterizationSamples"
        },
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the sampleLocationsEnable member of a VkPipelineSampleLocationsStateCreateInfoEXT structure chained to the pNext chain of pMultisampleState is VK_TRUE, the fragment shader code must not statically use the extended instruction InterpolateAtSample"
        }
      ],
      "!(VK_AMD_mixed_attachment_samples)+!(VK_NV_framebuffer_mixed_samples)": [
        {
          "vuid": "subpass",
          "text": " If subpass uses color and/or depth/stencil attachments, then the rasterizationSamples member of pMultisampleState must be the same as the sample count for those subpass attachments"
        }
      ],
      "(VK_AMD_mixed_attachment_samples)": [
        {
          "vuid": "subpass",
          "text": " If subpass uses color and/or depth/stencil attachments, then the rasterizationSamples member of pMultisampleState must equal the maximum of the sample counts of those subpass attachments"
        }
      ],
      "(VK_NV_framebuffer_mixed_samples)": [
        {
          "vuid": "subpass",
          "text": " If subpass has a depth/stencil attachment and depth test, stencil test, or depth bounds test are enabled, then the rasterizationSamples member of pMultisampleState must be the same as the sample count of the depth/stencil attachment"
        },
        {
          "vuid": "subpass",
          "text": " If subpass has any color attachments, then the rasterizationSamples member of pMultisampleState must be greater than or equal to the sample count for those subpass attachments"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "renderPass",
          "text": " If the renderPass has multiview enabled and subpass has more than one bit set in the view mask and multiviewTessellationShader is not enabled, then pStages must not include tessellation shaders."
        },
        {
          "vuid": "renderPass",
          "text": " If the renderPass has multiview enabled and subpass has more than one bit set in the view mask and multiviewGeometryShader is not enabled, then pStages must not include a geometry shader."
        },
        {
          "vuid": "renderPass",
          "text": " If the renderPass has multiview enabled and subpass has more than one bit set in the view mask, shaders in the pipeline must not write to the Layer built-in output"
        },
        {
          "vuid": "renderPass",
          "text": " If the renderPass has multiview enabled, then all shaders must not include variables decorated with the Layer built-in decoration in their interfaces."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "flags",
          "text": " flags must not contain the VK_PIPELINE_CREATE_DISPATCH_BASE flag."
        }
      ],
      "(VK_NV_clip_space_w_scaling)": [
        {
          "vuid": "pDynamicStates",
          "text": " If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV, and the viewportWScalingEnable member of a VkPipelineViewportWScalingStateCreateInfoNV structure, chained to the pNext chain of pViewportState, is VK_TRUE, the pViewportWScalings member of the VkPipelineViewportWScalingStateCreateInfoNV must be a pointer to an array of VkPipelineViewportWScalingStateCreateInfoNV::viewportCount valid VkViewportWScalingNV structures"
        }
      ]
    },
    "VkPipelineDynamicStateCreateInfo": {
      "core": [
        {
          "vuid": "pDynamicStates",
          "text": " Each element of pDynamicStates must be unique"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pDynamicStates",
          "text": " pDynamicStates must be a valid pointer to an array of dynamicStateCount valid VkDynamicState values"
        },
        {
          "vuid": "dynamicStateCount",
          "text": " dynamicStateCount must be greater than 0"
        }
      ]
    },
    "vkDestroyPipeline": {
      "core": [
        {
          "vuid": "pipeline",
          "text": " All submitted commands that refer to pipeline must have completed execution"
        },
        {
          "vuid": "pipeline",
          "text": " If VkAllocationCallbacks were provided when pipeline was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "pipeline",
          "text": " If no VkAllocationCallbacks were provided when pipeline was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pipeline",
          "text": " If pipeline is not VK_NULL_HANDLE, pipeline must be a valid VkPipeline handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pipeline",
          "text": " If pipeline is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreatePipelineCache": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkPipelineCacheCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pPipelineCache",
          "text": " pPipelineCache must be a valid pointer to a VkPipelineCache handle"
        }
      ]
    },
    "VkPipelineCacheCreateInfo": {
      "core": [
        {
          "vuid": "initialDataSize",
          "text": " If initialDataSize is not 0, it must be equal to the size of pInitialData, as returned by vkGetPipelineCacheData when pInitialData was originally retrieved"
        },
        {
          "vuid": "initialDataSize",
          "text": " If initialDataSize is not 0, pInitialData must have been retrieved from a previous call to vkGetPipelineCacheData"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pInitialData",
          "text": " If initialDataSize is not 0, pInitialData must be a valid pointer to an array of initialDataSize bytes"
        }
      ]
    },
    "vkMergePipelineCaches": {
      "core": [
        {
          "vuid": "dstCache",
          "text": " dstCache must not appear in the list of source caches"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "dstCache",
          "text": " dstCache must be a valid VkPipelineCache handle"
        },
        {
          "vuid": "pSrcCaches",
          "text": " pSrcCaches must be a valid pointer to an array of srcCacheCount valid VkPipelineCache handles"
        },
        {
          "vuid": "srcCacheCount",
          "text": " srcCacheCount must be greater than 0"
        },
        {
          "vuid": "dstCache",
          "text": " dstCache must have been created, allocated, or retrieved from device"
        },
        {
          "vuid": "pSrcCaches",
          "text": " Each element of pSrcCaches must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetPipelineCacheData": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pipelineCache",
          "text": " pipelineCache must be a valid VkPipelineCache handle"
        },
        {
          "vuid": "pDataSize",
          "text": " pDataSize must be a valid pointer to a size_t value"
        },
        {
          "vuid": "pData",
          "text": " If the value referenced by pDataSize is not 0, and pData is not NULL, pData must be a valid pointer to an array of pDataSize bytes"
        },
        {
          "vuid": "pipelineCache",
          "text": " pipelineCache must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkDestroyPipelineCache": {
      "core": [
        {
          "vuid": "pipelineCache",
          "text": " If VkAllocationCallbacks were provided when pipelineCache was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "pipelineCache",
          "text": " If no VkAllocationCallbacks were provided when pipelineCache was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pipelineCache",
          "text": " If pipelineCache is not VK_NULL_HANDLE, pipelineCache must be a valid VkPipelineCache handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pipelineCache",
          "text": " If pipelineCache is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "VkSpecializationInfo": {
      "core": [
        {
          "vuid": "offset",
          "text": " The offset member of each element of pMapEntries must be less than dataSize"
        },
        {
          "vuid": "pMapEntries",
          "text": " The size member of each element of pMapEntries must be less than or equal to dataSize minus offset"
        },
        {
          "vuid": "pMapEntries",
          "text": " If mapEntryCount is not 0, pMapEntries must be a valid pointer to an array of mapEntryCount valid VkSpecializationMapEntry structures"
        },
        {
          "vuid": "pData",
          "text": " If dataSize is not 0, pData must be a valid pointer to an array of dataSize bytes"
        }
      ]
    },
    "VkSpecializationMapEntry": {
      "core": [
        {
          "vuid": "constantID",
          "text": " For a constantID specialization constant declared in a shader, size must match the byte size of the constantID. If the specialization constant is of type boolean, size must be the byte size of VkBool32"
        }
      ]
    },
    "vkCmdBindPipeline": {
      "core": [
        {
          "vuid": "pipelineBindPoint",
          "text": " If pipelineBindPoint is VK_PIPELINE_BIND_POINT_COMPUTE, the VkCommandPool that commandBuffer was allocated from must support compute operations"
        },
        {
          "vuid": "pipelineBindPoint",
          "text": " If pipelineBindPoint is VK_PIPELINE_BIND_POINT_GRAPHICS, the VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "pipelineBindPoint",
          "text": " If pipelineBindPoint is VK_PIPELINE_BIND_POINT_COMPUTE, pipeline must be a compute pipeline"
        },
        {
          "vuid": "pipelineBindPoint",
          "text": " If pipelineBindPoint is VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline must be a graphics pipeline"
        },
        {
          "vuid": "pipeline",
          "text": " If the features-features-variableMultisampleRate,variable multisample rate feature is not supported, pipeline is a graphics pipeline, the current subpass has no attachments, and this is not the first call to this function with a graphics pipeline after transitioning to the current subpass, then the sample count specified by this pipeline must match that set in the previous pipeline"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pipelineBindPoint",
          "text": " pipelineBindPoint must be a valid VkPipelineBindPoint value"
        },
        {
          "vuid": "pipeline",
          "text": " pipeline must be a valid VkPipeline handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and pipeline must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "variableSampleLocations",
          "text": " If VkPhysicalDeviceSampleLocationsPropertiesEXT::variableSampleLocations is VK_FALSE, and pipeline is a graphics pipeline created with a VkPipelineSampleLocationsStateCreateInfoEXT structure having its sampleLocationsEnable member set to VK_TRUE but without VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT enabled then the current render pass instance must have been begun by specifying a VkRenderPassSampleLocationsBeginInfoEXT structure whose pPostSubpassSampleLocations member contains an element with a subpassIndex matching the current subpass index and the sampleLocationsInfo member of that element must match the sampleLocationsInfo specified in VkPipelineSampleLocationsStateCreateInfoEXT when the pipeline was created"
        }
      ]
    },
    "vkGetShaderInfoAMD": {
      "(VK_AMD_shader_info)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pipeline",
          "text": " pipeline must be a valid VkPipeline handle"
        },
        {
          "vuid": "shaderStage",
          "text": " shaderStage must be a valid VkShaderStageFlagBits value"
        },
        {
          "vuid": "infoType",
          "text": " infoType must be a valid VkShaderInfoTypeAMD value"
        },
        {
          "vuid": "pInfoSize",
          "text": " pInfoSize must be a valid pointer to a size_t value"
        },
        {
          "vuid": "pInfo",
          "text": " If the value referenced by pInfoSize is not 0, and pInfo is not NULL, pInfo must be a valid pointer to an array of pInfoSize bytes"
        },
        {
          "vuid": "pipeline",
          "text": " pipeline must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreateRaytracingPipelinesNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pipelineCache",
          "text": " If pipelineCache is not VK_NULL_HANDLE, pipelineCache must be a valid VkPipelineCache handle"
        },
        {
          "vuid": "pCreateInfos",
          "text": " pCreateInfos must be a valid pointer to an array of createInfoCount valid VkRaytracingPipelineCreateInfoNVX structures"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pPipelines",
          "text": " pPipelines must be a valid pointer to an array of createInfoCount VkPipeline handles"
        },
        {
          "vuid": "createInfoCount",
          "text": " createInfoCount must be greater than 0"
        },
        {
          "vuid": "pipelineCache",
          "text": " If pipelineCache is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "VkRaytracingPipelineCreateInfoNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_RAYTRACING_PIPELINE_CREATE_INFO_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkPipelineCreateFlagBits values"
        },
        {
          "vuid": "pStages",
          "text": " pStages must be a valid pointer to an array of stageCount valid VkPipelineShaderStageCreateInfo structures"
        },
        {
          "vuid": "pGroupNumbers",
          "text": " pGroupNumbers must be a valid pointer to an array of stageCount uint32_t values"
        },
        {
          "vuid": "layout",
          "text": " layout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "stageCount",
          "text": " stageCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of basePipelineHandle, and layout that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkGetRaytracingShaderHandlesNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pipeline",
          "text": " pipeline must be a valid VkPipeline handle"
        },
        {
          "vuid": "pData",
          "text": " pData must be a valid pointer to an array of dataSize bytes"
        },
        {
          "vuid": "dataSize",
          "text": " dataSize must be greater than 0"
        },
        {
          "vuid": "pipeline",
          "text": " pipeline must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCompileDeferredNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "pipeline",
          "text": " pipeline must have been created with VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NVX."
        },
        {
          "vuid": "shader",
          "text": " shader must not have been called as a deferred compile before."
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pipeline",
          "text": " pipeline must be a valid VkPipeline handle"
        },
        {
          "vuid": "pipeline",
          "text": " pipeline must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "VkAllocationCallbacks": {
      "core": [
        {
          "vuid": "pfnAllocation",
          "text": " pfnAllocation must be a valid pointer to a valid user-defined PFN_vkAllocationFunction"
        },
        {
          "vuid": "pfnReallocation",
          "text": " pfnReallocation must be a valid pointer to a valid user-defined PFN_vkReallocationFunction"
        },
        {
          "vuid": "pfnFree",
          "text": " pfnFree must be a valid pointer to a valid user-defined PFN_vkFreeFunction"
        },
        {
          "vuid": "pfnInternalAllocation",
          "text": " If either of pfnInternalAllocation or pfnInternalFree is not NULL, both must be valid callbacks"
        }
      ]
    },
    "vkGetPhysicalDeviceMemoryProperties": {
      "core": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pMemoryProperties",
          "text": " pMemoryProperties must be a valid pointer to a VkPhysicalDeviceMemoryProperties structure"
        }
      ]
    },
    "vkGetPhysicalDeviceMemoryProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pMemoryProperties",
          "text": " pMemoryProperties must be a valid pointer to a VkPhysicalDeviceMemoryProperties2 structure"
        }
      ]
    },
    "VkPhysicalDeviceMemoryProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkAllocateMemory": {
      "core": [
        {
          "vuid": "pAllocateInfo",
          "text": " pAllocateInfo\\-allocationSize must be less than or equal to VkPhysicalDeviceMemoryProperties::memoryHeaps[pAllocateInfo\\-memoryTypeIndex].size as returned by vkGetPhysicalDeviceMemoryProperties for the VkPhysicalDevice that device was created from."
        },
        {
          "vuid": "pAllocateInfo",
          "text": " pAllocateInfo\\-memoryTypeIndex must be less than VkPhysicalDeviceMemoryProperties::memoryTypeCount as returned by vkGetPhysicalDeviceMemoryProperties for the VkPhysicalDevice that device was created from."
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pAllocateInfo",
          "text": " pAllocateInfo must be a valid pointer to a valid VkMemoryAllocateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pMemory",
          "text": " pMemory must be a valid pointer to a VkDeviceMemory handle"
        }
      ]
    },
    "VkMemoryAllocateInfo": {
      "!(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "allocationSize",
          "text": " allocationSize must be greater than 0"
        }
      ],
      "(VK_KHR_external_memory)+(VK_KHR_dedicated_allocation,VK_NV_dedicated_allocation)": [
        {
          "vuid": "pNext",
          "text": "     If the pNext chain contains an instance of     VkExportMemoryAllocateInfo, and any of the handle types specified     in VkExportMemoryAllocateInfo::handleTypes require a     dedicated allocation, as reported by     vkGetPhysicalDeviceImageFormatProperties2 in     VkExternalImageFormatProperties::externalMemoryProperties::externalMemoryFeatures     or     VkExternalBufferProperties::externalMemoryProperties::externalMemoryFeatures,     the pNext chain must contain an instance of ifdef::VK_KHR_dedicated_allocation[VkMemoryDedicatedAllocateInfo]"
        }
      ],
      "(VK_KHR_external_memory)+(VK_NV_external_memory)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain contains an instance of VkExportMemoryAllocateInfo, it must not contain an instance of VkExportMemoryAllocateInfoNV or VkExportMemoryWin32HandleInfoNV."
        }
      ],
      "(VK_KHR_external_memory_win32+VK_NV_external_memory_win32)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain contains an instance of VkImportMemoryWin32HandleInfoKHR, it must not contain an instance of VkImportMemoryWin32HandleInfoNV."
        }
      ],
      "(VK_KHR_external_memory_fd)": [
        {
          "vuid": "allocationSize",
          "text": " If the parameters define an import operation, the external handle specified was created by the Vulkan API, and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR, then the values of allocationSize and memoryTypeIndex must match those specified when the memory object being imported was created."
        },
        {
          "vuid": "memoryTypeIndex",
          "text": " If the parameters define an import operation and the external handle is a POSIX file descriptor created outside of the Vulkan API, the value of memoryTypeIndex must be one of those returned by vkGetMemoryFdPropertiesKHR."
        }
      ],
      "(VK_KHR_external_memory+VK_KHR_device_group)": [
        {
          "vuid": "None",
          "text": " If the parameters define an import operation and the external handle specified was created by the Vulkan API, the device mask specified by VkMemoryAllocateFlagsInfo must match that specified when the memory object being imported was allocated."
        },
        {
          "vuid": "None",
          "text": " If the parameters define an import operation and the external handle specified was created by the Vulkan API, the list of physical devices that comprise the logical device passed to vkAllocateMemory must match the list of physical devices that comprise the logical device on which the memory was originally allocated."
        }
      ],
      "(VK_KHR_external_memory_win32)": [
        {
          "vuid": "memoryTypeIndex",
          "text": " If the parameters define an import operation and the external handle is an NT handle or a global share handle created outside of the Vulkan API, the value of memoryTypeIndex must be one of those returned by vkGetMemoryWin32HandlePropertiesKHR."
        },
        {
          "vuid": "allocationSize",
          "text": " If the parameters define an import operation, the external handle was created by the Vulkan API, and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR or VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR, then the values of allocationSize and memoryTypeIndex must match those specified when the memory object being imported was created."
        },
        {
          "vuid": "allocationSize",
          "text": " If the parameters define an import operation and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, allocationSize must match the size reported in the memory requirements of the image or buffer member of the instance of VkDedicatedAllocationMemoryAllocateInfoNV included in the pNext chain."
        },
        {
          "vuid": "allocationSize",
          "text": " If the parameters define an import operation and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, allocationSize must match the size specified when creating the Direct3D 12 heap from which the external handle was extracted."
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "memoryTypeIndex",
          "text": " If the protected memory feature is not enabled, the VkMemoryAllocateInfo::memoryTypeIndex must not indicate a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT."
        }
      ],
      "(VK_EXT_external_memory_host)": [
        {
          "vuid": "memoryTypeIndex",
          "text": " If the parameters define an import operation and the external handle is a host pointer, the value of memoryTypeIndex must be one of those returned by vkGetMemoryHostPointerPropertiesEXT"
        },
        {
          "vuid": "allocationSize",
          "text": " If the parameters define an import operation and the external handle is a host pointer, allocationSize must be an integer multiple of VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment"
        }
      ],
      "(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "None",
          "text": " If the parameters define an import operation and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID:"
        },
        {
          "vuid": "pNext",
          "text": " If the parameters do not define an import operation, and the pNext chain contains an instance of VkExportMemoryAllocateInfo with VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID included in its handleTypes member, and the pNext contains an instance of VkMemoryDedicatedAllocateInfo with image not equal to VK_NULL_HANDLE, then allocationSize must be 0, otherwise allocationSize must be greater than 0."
        },
        {
          "vuid": "pNext",
          "text": " If the parameters define an import operation, the external handle is an Android hardware buffer, and the pNext chain includes an instance of VkMemoryDedicatedAllocateInfo with image that is not VK_NULL_HANDLE:"
        }
      ],
      "core": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDedicatedAllocationMemoryAllocateInfoNV, VkExportMemoryAllocateInfo, VkExportMemoryAllocateInfoNV, VkExportMemoryWin32HandleInfoKHR, VkExportMemoryWin32HandleInfoNV, VkImportAndroidHardwareBufferInfoANDROID, VkImportMemoryFdInfoKHR, VkImportMemoryHostPointerInfoEXT, VkImportMemoryWin32HandleInfoKHR, VkImportMemoryWin32HandleInfoNV, VkMemoryAllocateFlagsInfo, or VkMemoryDedicatedAllocateInfo"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        }
      ]
    },
    "VkMemoryDedicatedAllocateInfo": {
      "(VK_VERSION_1_1,VK_KHR_dedicated_allocation)": [
        {
          "vuid": "image",
          "text": " At least one of image and buffer must be VK_NULL_HANDLE"
        },
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE, VkMemoryAllocateInfo::allocationSize must equal the VkMemoryRequirements::size of the image"
        },
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE, image must have been created without VK_IMAGE_CREATE_SPARSE_BINDING_BIT set in VkImageCreateInfo::flags"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not VK_NULL_HANDLE, VkMemoryAllocateInfo::allocationSize must equal the VkMemoryRequirements::size of the buffer"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not VK_NULL_HANDLE, buffer must have been created without VK_BUFFER_CREATE_SPARSE_BINDING_BIT set in VkBufferCreateInfo::flags"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO"
        },
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE, image must be a valid VkImage handle"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not VK_NULL_HANDLE, buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of buffer, and image that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_dedicated_allocation)+(VK_KHR_external_memory_win32)": [
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation with handle type VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, and the external handle was created by the Vulkan API, then the memory being imported must also be a dedicated image allocation and image must be identical to the image associated with the imported memory."
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation with handle type VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, and the external handle was created by the Vulkan API, then the memory being imported must also be a dedicated buffer allocation and buffer must be identical to the buffer associated with the imported memory."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_dedicated_allocation)+(VK_KHR_external_memory_fd)": [
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation with handle type VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT, the memory being imported must also be a dedicated image allocation and image must be identical to the image associated with the imported memory."
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation with handle type VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT, the memory being imported must also be a dedicated buffer allocation and buffer must be identical to the buffer associated with the imported memory."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_dedicated_allocation)+(VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE, image must not have been created with VK_IMAGE_CREATE_DISJOINT_BIT set in VkImageCreateInfo::flags"
        }
      ]
    },
    "VkDedicatedAllocationMemoryAllocateInfoNV": {
      "(VK_NV_dedicated_allocation)": [
        {
          "vuid": "image",
          "text": " At least one of image and buffer must be VK_NULL_HANDLE"
        },
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE, the image must have been created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not VK_NULL_HANDLE, the buffer must have been created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE"
        },
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE, VkMemoryAllocateInfo::allocationSize must equal the VkMemoryRequirements::size of the image"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not VK_NULL_HANDLE, VkMemoryAllocateInfo::allocationSize must equal the VkMemoryRequirements::size of the buffer"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV"
        },
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE, image must be a valid VkImage handle"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not VK_NULL_HANDLE, buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of buffer, and image that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_NV_dedicated_allocation)+(VK_KHR_external_memory_win32,VK_KHR_external_memory_fd)": [
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation, the memory being imported must also be a dedicated image allocation and image must be identical to the image associated with the imported memory."
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation, the memory being imported must also be a dedicated buffer allocation and buffer must be identical to the buffer associated with the imported memory."
        }
      ]
    },
    "VkExportMemoryAllocateInfo": {
      "(VK_VERSION_1_1,VK_KHR_external_memory)": [
        {
          "vuid": "handleTypes",
          "text": " The bits in handleTypes must be supported and compatible, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO"
        },
        {
          "vuid": "handleTypes",
          "text": " handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBits values"
        }
      ]
    },
    "VkExportMemoryWin32HandleInfoKHR": {
      "(VK_KHR_external_memory_win32)": [
        {
          "vuid": "handleTypes",
          "text": " If VkExportMemoryAllocateInfo::handleTypes does not include VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, VkExportMemoryWin32HandleInfoKHR must not be in the pNext chain of VkMemoryAllocateInfo."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR"
        },
        {
          "vuid": "pAttributes",
          "text": " If pAttributes is not NULL, pAttributes must be a valid pointer to a valid SECURITY_ATTRIBUTES value"
        }
      ]
    },
    "VkImportMemoryWin32HandleInfoKHR": {
      "(VK_KHR_external_memory_win32)": [
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, it must be supported for import, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties."
        },
        {
          "vuid": "handle",
          "text": " The memory from which handle was exported, or the memory named by name must have been created on the same underlying physical device as device."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, it must be defined as an NT handle or a global share handle."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, name must be NULL."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0 and handle is NULL, name must name a valid memory resource of the type specified by handleType."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0 and name is NULL, handle must be a valid handle of the type specified by handleType."
        },
        {
          "vuid": "handle",
          "text": " if handle is not NULL, name must be NULL."
        },
        {
          "vuid": "handle",
          "text": " If handle is not NULL, it must obey any requirements listed for handleType in external memory handle types compatibility."
        },
        {
          "vuid": "name",
          "text": " If name is not NULL, it must obey any requirements listed for handleType in external memory handle types compatibility."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR"
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, handleType must be a valid VkExternalMemoryHandleTypeFlagBits value"
        }
      ]
    },
    "vkGetMemoryWin32HandleKHR": {
      "(VK_KHR_external_memory_win32)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pGetWin32HandleInfo",
          "text": " pGetWin32HandleInfo must be a valid pointer to a valid VkMemoryGetWin32HandleInfoKHR structure"
        },
        {
          "vuid": "pHandle",
          "text": " pHandle must be a valid pointer to a HANDLE value"
        }
      ]
    },
    "VkMemoryGetWin32HandleInfoKHR": {
      "(VK_KHR_external_memory_win32)": [
        {
          "vuid": "handleType",
          "text": " handleType must have been included in VkExportMemoryAllocateInfo::handleTypes when memory was created."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is defined as an NT handle, vkGetMemoryWin32HandleKHR must be called no more than once for each valid unique combination of memory and handleType."
        },
        {
          "vuid": "handleType",
          "text": " handleType must be defined as an NT handle or a global share handle."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalMemoryHandleTypeFlagBits value"
        }
      ]
    },
    "vkGetMemoryWin32HandlePropertiesKHR": {
      "(VK_KHR_external_memory_win32)": [
        {
          "vuid": "handle",
          "text": " handle must be an external memory handle created outside of the Vulkan API."
        },
        {
          "vuid": "handleType",
          "text": " handleType must not be one of the handle types defined as opaque."
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalMemoryHandleTypeFlagBits value"
        },
        {
          "vuid": "pMemoryWin32HandleProperties",
          "text": " pMemoryWin32HandleProperties must be a valid pointer to a VkMemoryWin32HandlePropertiesKHR structure"
        }
      ]
    },
    "VkImportMemoryFdInfoKHR": {
      "(VK_KHR_external_memory_fd)": [
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, it must be supported for import, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties."
        },
        {
          "vuid": "fd",
          "text": " The memory from which fd was exported must have been created on the same underlying physical device as device."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, it must be defined as a POSIX file descriptor handle."
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, fd must be a valid handle of the type specified by handleType."
        },
        {
          "vuid": "fd",
          "text": " The memory represented by fd must have been created from a physical device and driver that is compatible with device and handleType, as described in external-memory-handle-types-compatibility."
        },
        {
          "vuid": "fd",
          "text": " fd must obey any requirements listed for handleType in external-memory-handle-types-compatibility,external memory handle types compatibility."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR"
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, handleType must be a valid VkExternalMemoryHandleTypeFlagBits value"
        }
      ]
    },
    "vkGetMemoryFdKHR": {
      "(VK_KHR_external_memory_fd)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pGetFdInfo",
          "text": " pGetFdInfo must be a valid pointer to a valid VkMemoryGetFdInfoKHR structure"
        },
        {
          "vuid": "pFd",
          "text": " pFd must be a valid pointer to a int value"
        }
      ]
    },
    "VkMemoryGetFdInfoKHR": {
      "(VK_KHR_external_memory_fd)": [
        {
          "vuid": "handleType",
          "text": " handleType must have been included in VkExportMemoryAllocateInfo::handleTypes when memory was created."
        },
        {
          "vuid": "handleType",
          "text": " handleType must be defined as a POSIX file descriptor handle."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalMemoryHandleTypeFlagBits value"
        }
      ]
    },
    "vkGetMemoryFdPropertiesKHR": {
      "(VK_KHR_external_memory_fd)": [
        {
          "vuid": "fd",
          "text": " fd must be an external memory handle created outside of the Vulkan API."
        },
        {
          "vuid": "handleType",
          "text": " handleType must not be VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR."
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalMemoryHandleTypeFlagBits value"
        },
        {
          "vuid": "pMemoryFdProperties",
          "text": " pMemoryFdProperties must be a valid pointer to a VkMemoryFdPropertiesKHR structure"
        }
      ]
    },
    "VkImportMemoryHostPointerInfoEXT": {
      "(VK_EXT_external_memory_host)": [
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, it must be supported for import, as reported in VkExternalMemoryPropertiesKHR"
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, it must be VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT or VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT"
        },
        {
          "vuid": "pHostPointer",
          "text": " pHostPointer must be a pointer aligned to an integer multiple of VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment"
        },
        {
          "vuid": "handleType",
          "text": " If handleType is VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT, pHostPointer must be a pointer to allocationSize number of bytes of host memory, where allocationSize is the member of the VkMemoryAllocateInfo structure this structure is chained to"
        },
        {
          "vuid": "handleType",
          "text": " If handleType is VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT, pHostPointer must be a pointer to allocationSize number of bytes of host mapped foreign memory, where allocationSize is the member of the VkMemoryAllocateInfo structure this structure is chained to"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalMemoryHandleTypeFlagBits value"
        }
      ]
    },
    "vkGetMemoryHostPointerPropertiesEXT": {
      "(VK_EXT_external_memory_host)": [
        {
          "vuid": "handleType",
          "text": " handleType must be VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT or VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT"
        },
        {
          "vuid": "pHostPointer",
          "text": " pHostPointer must be a pointer aligned to an integer multiple of VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment"
        },
        {
          "vuid": "handleType",
          "text": " If handleType is VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT, pHostPointer must be a pointer to host memory"
        },
        {
          "vuid": "handleType",
          "text": " If handleType is VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT, pHostPointer must be a pointer to host mapped foreign memory"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalMemoryHandleTypeFlagBits value"
        },
        {
          "vuid": "pMemoryHostPointerProperties",
          "text": " pMemoryHostPointerProperties must be a valid pointer to a VkMemoryHostPointerPropertiesEXT structure"
        }
      ]
    },
    "VkMemoryHostPointerPropertiesEXT": {
      "(VK_EXT_external_memory_host)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "VkImportAndroidHardwareBufferInfoANDROID": {
      "(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "buffer",
          "text": " If buffer is not NULL, Android hardware buffers must be supported for import, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties."
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not NULL, it must be a valid Android hardware buffer object with format and usage compatible with Vulkan as described by VkExternalMemoryHandleTypeFlagBits."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid pointer to a AHardwareBuffer value"
        }
      ]
    },
    "vkGetMemoryAndroidHardwareBufferANDROID": {
      "(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pInfo",
          "text": " pInfo must be a valid pointer to a valid VkMemoryGetAndroidHardwareBufferInfoANDROID structure"
        },
        {
          "vuid": "pBuffer",
          "text": " pBuffer must be a valid pointer to a valid pointer to a AHardwareBuffer value"
        }
      ]
    },
    "VkMemoryGetAndroidHardwareBufferInfoANDROID": {
      "(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "handleTypes",
          "text": " VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID must have been included in VkExportMemoryAllocateInfoKHR::handleTypes when memory was created."
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain of the VkMemoryAllocateInfo used to allocate memory included a VkMemoryDedicatedAllocateInfo with non-NULL image member, then that image must already be bound to memory."
        }
      ]
    },
    "vkGetAndroidHardwareBufferPropertiesANDROID": {
      "(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "buffer",
          "text": " buffer must be a valid Android hardware buffer object with at least one of the AHARDWAREBUFFER_USAGE_GPU_* usage flags."
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid pointer to a valid AHardwareBuffer value"
        },
        {
          "vuid": "pProperties",
          "text": " pProperties must be a valid pointer to a VkAndroidHardwareBufferPropertiesANDROID structure"
        }
      ]
    },
    "VkAndroidHardwareBufferFormatPropertiesANDROID": {
      "(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID"
        }
      ]
    },
    "VkExportMemoryAllocateInfoNV": {
      "(VK_NV_external_memory)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV"
        },
        {
          "vuid": "handleTypes",
          "text": " handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values"
        }
      ]
    },
    "VkExportMemoryWin32HandleInfoNV": {
      "(VK_NV_external_memory_win32)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV"
        },
        {
          "vuid": "pAttributes",
          "text": " If pAttributes is not NULL, pAttributes must be a valid pointer to a valid SECURITY_ATTRIBUTES value"
        }
      ]
    },
    "VkImportMemoryWin32HandleInfoNV": {
      "(VK_NV_external_memory_win32)": [
        {
          "vuid": "handleType",
          "text": " handleType must not have more than one bit set."
        },
        {
          "vuid": "handle",
          "text": " handle must be a valid handle to memory, obtained as specified by handleType."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values"
        }
      ]
    },
    "vkGetMemoryWin32HandleNV": {
      "(VK_NV_external_memory_win32)": [
        {
          "vuid": "handleType",
          "text": " handleType must be a flag specified in VkExportMemoryAllocateInfoNV::handleTypes when allocating memory"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values"
        },
        {
          "vuid": "handleType",
          "text": " handleType must not be 0"
        },
        {
          "vuid": "pHandle",
          "text": " pHandle must be a valid pointer to a HANDLE value"
        },
        {
          "vuid": "memory",
          "text": " memory must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "VkMemoryAllocateFlagsInfo": {
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "deviceMask",
          "text": " If VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT is set, deviceMask must be a valid device mask."
        },
        {
          "vuid": "deviceMask",
          "text": " If VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT is set, deviceMask must not be zero"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkMemoryAllocateFlagBits values"
        }
      ]
    },
    "vkFreeMemory": {
      "core": [
        {
          "vuid": "memory",
          "text": " All submitted commands that refer to memory (via images or buffers) must have completed execution"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "memory",
          "text": " If memory is not VK_NULL_HANDLE, memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "memory",
          "text": " If memory is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkMapMemory": {
      "core": [
        {
          "vuid": "memory",
          "text": " memory must not be currently mapped"
        },
        {
          "vuid": "offset",
          "text": " offset must be less than the size of memory"
        },
        {
          "vuid": "size",
          "text": " If size is not equal to VK_WHOLE_SIZE, size must be greater than 0"
        },
        {
          "vuid": "size",
          "text": " If size is not equal to VK_WHOLE_SIZE, size must be less than or equal to the size of the memory minus offset"
        },
        {
          "vuid": "memory",
          "text": " memory must have been created with a memory type that reports VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "ppData",
          "text": " ppData must be a valid pointer to a pointer value"
        },
        {
          "vuid": "memory",
          "text": " memory must have been created, allocated, or retrieved from device"
        }
      ],
      "(VK_KHR_device_group)": [
        {
          "vuid": "memory",
          "text": " memory must not have been allocated with multiple instances."
        }
      ]
    },
    "vkFlushMappedMemoryRanges": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pMemoryRanges",
          "text": " pMemoryRanges must be a valid pointer to an array of memoryRangeCount valid VkMappedMemoryRange structures"
        },
        {
          "vuid": "memoryRangeCount",
          "text": " memoryRangeCount must be greater than 0"
        }
      ]
    },
    "vkInvalidateMappedMemoryRanges": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pMemoryRanges",
          "text": " pMemoryRanges must be a valid pointer to an array of memoryRangeCount valid VkMappedMemoryRange structures"
        },
        {
          "vuid": "memoryRangeCount",
          "text": " memoryRangeCount must be greater than 0"
        }
      ]
    },
    "VkMappedMemoryRange": {
      "core": [
        {
          "vuid": "memory",
          "text": " memory must be currently mapped"
        },
        {
          "vuid": "size",
          "text": " If size is not equal to VK_WHOLE_SIZE, offset and size must specify a range contained within the currently mapped range of memory"
        },
        {
          "vuid": "size",
          "text": " If size is equal to VK_WHOLE_SIZE, offset must be within the currently mapped range of memory"
        },
        {
          "vuid": "size",
          "text": " If size is equal to VK_WHOLE_SIZE, the end of the current mapping of memory must be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize bytes from the beginning of the memory object."
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize"
        },
        {
          "vuid": "size",
          "text": " If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        }
      ]
    },
    "vkUnmapMemory": {
      "core": [
        {
          "vuid": "memory",
          "text": " memory must be currently mapped"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "memory",
          "text": " memory must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetDeviceMemoryCommitment": {
      "core": [
        {
          "vuid": "memory",
          "text": " memory must have been created with a memory type that reports VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "pCommittedMemoryInBytes",
          "text": " pCommittedMemoryInBytes must be a valid pointer to a VkDeviceSize value"
        },
        {
          "vuid": "memory",
          "text": " memory must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetDeviceGroupPeerMemoryFeatures": {
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "heapIndex",
          "text": " heapIndex must be less than memoryHeapCount"
        },
        {
          "vuid": "localDeviceIndex",
          "text": " localDeviceIndex must be a valid device index"
        },
        {
          "vuid": "remoteDeviceIndex",
          "text": " remoteDeviceIndex must be a valid device index"
        },
        {
          "vuid": "localDeviceIndex",
          "text": " localDeviceIndex must not equal remoteDeviceIndex"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pPeerMemoryFeatures",
          "text": " pPeerMemoryFeatures must be a valid pointer to a VkPeerMemoryFeatureFlags value"
        }
      ]
    },
    "vkCreateBuffer": {
      "core": [
        {
          "vuid": "flags",
          "text": " If the flags member of pCreateInfo includes VK_BUFFER_CREATE_SPARSE_BINDING_BIT, creating this VkBuffer must not cause the total required sparse memory for all currently valid sparse resources on the device to exceed VkPhysicalDeviceLimits::sparseAddressSpaceSize"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkBufferCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pBuffer",
          "text": " pBuffer must be a valid pointer to a VkBuffer handle"
        }
      ]
    },
    "VkBufferCreateInfo": {
      "core": [
        {
          "vuid": "size",
          "text": " size must be greater than 0"
        },
        {
          "vuid": "sharingMode",
          "text": " If sharingMode is VK_SHARING_MODE_CONCURRENT, pQueueFamilyIndices must be a valid pointer to an array of queueFamilyIndexCount uint32_t values"
        },
        {
          "vuid": "sharingMode",
          "text": " If sharingMode is VK_SHARING_MODE_CONCURRENT, queueFamilyIndexCount must be greater than 1"
        },
        {
          "vuid": "flags",
          "text": " If the features-features-sparseBinding,sparse bindings feature is not enabled, flags must not contain VK_BUFFER_CREATE_SPARSE_BINDING_BIT"
        },
        {
          "vuid": "flags",
          "text": " If the features-features-sparseResidencyBuffer,sparse buffer residency feature is not enabled, flags must not contain VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT"
        },
        {
          "vuid": "flags",
          "text": " If the features-features-sparseResidencyAliased,sparse aliased residency feature is not enabled, flags must not contain VK_BUFFER_CREATE_SPARSE_ALIASED_BIT"
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT or VK_BUFFER_CREATE_SPARSE_ALIASED_BIT, it must also contain VK_BUFFER_CREATE_SPARSE_BINDING_BIT"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDedicatedAllocationBufferCreateInfoNV or VkExternalMemoryBufferCreateInfo"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkBufferCreateFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must be a valid combination of VkBufferUsageFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must not be 0"
        },
        {
          "vuid": "sharingMode",
          "text": " sharingMode must be a valid VkSharingMode value"
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sharingMode",
          "text": " If sharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the physicalDevice that was used to create device"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sharingMode",
          "text": " If sharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by either vkGetPhysicalDeviceQueueFamilyProperties or vkGetPhysicalDeviceQueueFamilyProperties2 for the physicalDevice that was used to create device"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_external_memory)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain contains an instance of VkExternalMemoryBufferCreateInfo, its handleTypes member must only contain bits that are also in VkExternalBufferProperties::externalMemoryProperties.compatibleHandleTypes, as returned by vkGetPhysicalDeviceExternalBufferProperties with pExternalBufferInfo\\-handleType equal to any one of the handle types specified in VkExternalMemoryBufferCreateInfo::handleTypes"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "flags",
          "text": " If the protected memory feature is not enabled, flags must not contain VK_BUFFER_CREATE_PROTECTED_BIT"
        },
        {
          "vuid": "None",
          "text": " If any of the bits VK_BUFFER_CREATE_SPARSE_BINDING_BIT, VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT, or VK_BUFFER_CREATE_SPARSE_ALIASED_BIT are set, VK_BUFFER_CREATE_PROTECTED_BIT must not also be set"
        }
      ],
      "(VK_NV_dedicated_allocation)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain contains an instance of VkDedicatedAllocationBufferCreateInfoNV, and the dedicatedAllocation member of the chained structure is VK_TRUE, then flags must not include VK_BUFFER_CREATE_SPARSE_BINDING_BIT, VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT, or VK_BUFFER_CREATE_SPARSE_ALIASED_BIT"
        }
      ]
    },
    "VkDedicatedAllocationBufferCreateInfoNV": {
      "(VK_NV_dedicated_allocation)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV"
        }
      ]
    },
    "VkExternalMemoryBufferCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_external_memory)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO"
        },
        {
          "vuid": "handleTypes",
          "text": " handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBits values"
        }
      ]
    },
    "vkDestroyBuffer": {
      "core": [
        {
          "vuid": "buffer",
          "text": " All submitted commands that refer to buffer, either directly or via a VkBufferView, must have completed execution"
        },
        {
          "vuid": "buffer",
          "text": " If VkAllocationCallbacks were provided when buffer was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "buffer",
          "text": " If no VkAllocationCallbacks were provided when buffer was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is not VK_NULL_HANDLE, buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreateBufferView": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkBufferViewCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pView",
          "text": " pView must be a valid pointer to a VkBufferView handle"
        }
      ]
    },
    "VkBufferViewCreateInfo": {
      "core": [
        {
          "vuid": "offset",
          "text": " offset must be less than the size of buffer"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of VkPhysicalDeviceLimits::minTexelBufferOffsetAlignment"
        },
        {
          "vuid": "range",
          "text": " If range is not equal to VK_WHOLE_SIZE, range must be greater than 0"
        },
        {
          "vuid": "range",
          "text": " If range is not equal to VK_WHOLE_SIZE, range must be a multiple of the element size of format"
        },
        {
          "vuid": "range",
          "text": " If range is not equal to VK_WHOLE_SIZE, range divided by the element size of format must be less than or equal to VkPhysicalDeviceLimits::maxTexelBufferElements"
        },
        {
          "vuid": "offset",
          "text": " If range is not equal to VK_WHOLE_SIZE, the sum of offset and range must be less than or equal to the size of buffer"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with a usage value containing at least one of VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT or VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT"
        },
        {
          "vuid": "buffer",
          "text": " If buffer was created with usage containing VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT, format must be supported for uniform texel buffers, as specified by the VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT flag in VkFormatProperties::bufferFeatures returned by vkGetPhysicalDeviceFormatProperties"
        },
        {
          "vuid": "buffer",
          "text": " If buffer was created with usage containing VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, format must be supported for storage texel buffers, as specified by the VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT flag in VkFormatProperties::bufferFeatures returned by vkGetPhysicalDeviceFormatProperties"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        }
      ]
    },
    "vkDestroyBufferView": {
      "core": [
        {
          "vuid": "bufferView",
          "text": " All submitted commands that refer to bufferView must have completed execution"
        },
        {
          "vuid": "bufferView",
          "text": " If VkAllocationCallbacks were provided when bufferView was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "bufferView",
          "text": " If no VkAllocationCallbacks were provided when bufferView was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "bufferView",
          "text": " If bufferView is not VK_NULL_HANDLE, bufferView must be a valid VkBufferView handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "bufferView",
          "text": " If bufferView is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreateImage": {
      "core": [
        {
          "vuid": "flags",
          "text": " If the flags member of pCreateInfo includes VK_IMAGE_CREATE_SPARSE_BINDING_BIT, creating this VkImage must not cause the total required sparse memory for all currently valid sparse resources on the device to exceed VkPhysicalDeviceLimits::sparseAddressSpaceSize"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkImageCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pImage",
          "text": " pImage must be a valid pointer to a VkImage handle"
        }
      ]
    },
    "VkImageCreateInfo": {
      "!(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "format",
          "text": " The combination of format, imageType, tiling, usage, and flags must be supported, as indicated by a VK_SUCCESS return value from vkGetPhysicalDeviceImageFormatProperties invoked with the same values passed to the corresponding parameters."
        },
        {
          "vuid": "format",
          "text": " format must not be VK_FORMAT_UNDEFINED"
        }
      ],
      "(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain does not contain an instance of VkExternalFormatANDROID, or if format is not VK_FORMAT_UNDEFINED, the combination of format, imageType, tiling, usage, and flags must be supported, as indicated by a VK_SUCCESS return value from vkGetPhysicalDeviceImageFormatProperties invoked with the same values passed to the corresponding parameters."
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain contains an instance of VkExternalFormatANDROID, and its member externalFormat is non-zero the format must be VK_FORMAT_UNDEFINED."
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain does not contain an instance of VkExternalFormatANDROID, or does and its member externalFormat is 0 the format must not be VK_FORMAT_UNDEFINED."
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes a VkExternalMemoryImageCreateInfo structure whose handleTypes member includes VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID:"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes a VkExternalFormatANDROID structure whose externalFormat member is not 0:"
        }
      ],
      "core": [
        {
          "vuid": "sharingMode",
          "text": " If sharingMode is VK_SHARING_MODE_CONCURRENT, pQueueFamilyIndices must be a valid pointer to an array of queueFamilyIndexCount uint32_t values"
        },
        {
          "vuid": "sharingMode",
          "text": " If sharingMode is VK_SHARING_MODE_CONCURRENT, queueFamilyIndexCount must be greater than 1"
        },
        {
          "vuid": "extent",
          "text": " extent::width must be greater than 0."
        },
        {
          "vuid": "extent",
          "text": " extent::height must be greater than 0."
        },
        {
          "vuid": "extent",
          "text": " extent::depth must be greater than 0."
        },
        {
          "vuid": "mipLevels",
          "text": " mipLevels must be greater than 0"
        },
        {
          "vuid": "arrayLayers",
          "text": " arrayLayers must be greater than 0"
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, imageType must be VK_IMAGE_TYPE_2D"
        },
        {
          "vuid": "imageType",
          "text": " If imageType is VK_IMAGE_TYPE_1D, extent.width must be less than or equal to VkPhysicalDeviceLimits::maxImageDimension1D, or VkImageFormatProperties::maxExtent.width (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure) - whichever is higher"
        },
        {
          "vuid": "imageType",
          "text": " If imageType is VK_IMAGE_TYPE_2D and flags does not contain VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, extent.width and extent.height must be less than or equal to VkPhysicalDeviceLimits::maxImageDimension2D, or VkImageFormatProperties::maxExtent.width/height (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure) - whichever is higher"
        },
        {
          "vuid": "imageType",
          "text": " If imageType is VK_IMAGE_TYPE_2D and flags contains VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, extent.width and extent.height must be less than or equal to VkPhysicalDeviceLimits::maxImageDimensionCube, or VkImageFormatProperties::maxExtent.width/height (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure) - whichever is higher"
        },
        {
          "vuid": "imageType",
          "text": " If imageType is VK_IMAGE_TYPE_2D and flags contains VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, extent.width and extent.height must be equal and arrayLayers must be greater than or equal to 6"
        },
        {
          "vuid": "imageType",
          "text": " If imageType is VK_IMAGE_TYPE_3D, extent.width, extent.height and extent.depth must be less than or equal to VkPhysicalDeviceLimits::maxImageDimension3D, or VkImageFormatProperties::maxExtent.width/height/depth (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure) - whichever is higher"
        },
        {
          "vuid": "imageType",
          "text": " If imageType is VK_IMAGE_TYPE_1D, both extent.height and extent.depth must be 1"
        },
        {
          "vuid": "imageType",
          "text": " If imageType is VK_IMAGE_TYPE_2D, extent.depth must be 1"
        },
        {
          "vuid": "mipLevels",
          "text": " mipLevels must be less than or equal to the number of levels in the complete mipmap chain based on +extent.width+, +extent.height+, and +extent.depth+."
        },
        {
          "vuid": "extent",
          "text": " mipLevels must be less than or equal to VkImageFormatProperties::maxMipLevels (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure)"
        },
        {
          "vuid": "arrayLayers",
          "text": " arrayLayers must be less than or equal to VkImageFormatProperties::maxArrayLayers (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure)"
        },
        {
          "vuid": "imageType",
          "text": " If imageType is VK_IMAGE_TYPE_3D, arrayLayers must be 1."
        },
        {
          "vuid": "samples",
          "text": " If samples is not VK_SAMPLE_COUNT_1_BIT, imageType must be VK_IMAGE_TYPE_2D, flags must not contain VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, tiling must be VK_IMAGE_TILING_OPTIMAL, and mipLevels must be equal to 1"
        },
        {
          "vuid": "usage",
          "text": " If usage includes VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, then bits other than VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, and VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT must not be set"
        },
        {
          "vuid": "usage",
          "text": " If usage includes VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, extent.width must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferWidth"
        },
        {
          "vuid": "usage",
          "text": " If usage includes VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, extent.height must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferHeight"
        },
        {
          "vuid": "usage",
          "text": " If usage includes VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, usage must also contain at least one of VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT."
        },
        {
          "vuid": "samples",
          "text": " samples must be a bit value that is set in VkImageFormatProperties::sampleCounts returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure"
        },
        {
          "vuid": "usage",
          "text": " If the features-features-shaderStorageImageMultisample,multisampled storage images feature is not enabled, and usage contains VK_IMAGE_USAGE_STORAGE_BIT, samples must be VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "flags",
          "text": " If the features-features-sparseBinding,sparse bindings feature is not enabled, flags must not contain VK_IMAGE_CREATE_SPARSE_BINDING_BIT"
        },
        {
          "vuid": "flags",
          "text": " If the features-features-sparseResidencyAliased,sparse aliased residency feature is not enabled, flags must not contain VK_IMAGE_CREATE_SPARSE_ALIASED_BIT"
        },
        {
          "vuid": "imageType",
          "text": " If imageType is VK_IMAGE_TYPE_1D, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
        },
        {
          "vuid": "imageType",
          "text": " If the features-features-sparseResidencyImage2D,sparse residency for 2D images feature is not enabled, and imageType is VK_IMAGE_TYPE_2D, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
        },
        {
          "vuid": "imageType",
          "text": " If the features-features-sparseResidencyImage3D,sparse residency for 3D images feature is not enabled, and imageType is VK_IMAGE_TYPE_3D, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
        },
        {
          "vuid": "imageType",
          "text": " If the features-features-sparseResidency2Samples,sparse residency for images with 2 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_2_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
        },
        {
          "vuid": "imageType",
          "text": " If the features-features-sparseResidency4Samples,sparse residency for images with 4 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_4_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
        },
        {
          "vuid": "imageType",
          "text": " If the features-features-sparseResidency8Samples,sparse residency for images with 8 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_8_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
        },
        {
          "vuid": "imageType",
          "text": " If the features-features-sparseResidency16Samples,sparse residency for images with 16 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_16_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT, it must also contain VK_IMAGE_CREATE_SPARSE_BINDING_BIT"
        },
        {
          "vuid": "None",
          "text": " If any of the bits VK_IMAGE_CREATE_SPARSE_BINDING_BIT, VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT are set, VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT must not also be set"
        },
        {
          "vuid": "initialLayout",
          "text": " initialLayout must be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDedicatedAllocationImageCreateInfoNV, VkExternalFormatANDROID, VkExternalMemoryImageCreateInfo, VkExternalMemoryImageCreateInfoNV, VkImageFormatListCreateInfoKHR, or VkImageSwapchainCreateInfoKHR"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkImageCreateFlagBits values"
        },
        {
          "vuid": "imageType",
          "text": " imageType must be a valid VkImageType value"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "samples",
          "text": " samples must be a valid VkSampleCountFlagBits value"
        },
        {
          "vuid": "tiling",
          "text": " tiling must be a valid VkImageTiling value"
        },
        {
          "vuid": "usage",
          "text": " usage must be a valid combination of VkImageUsageFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must not be 0"
        },
        {
          "vuid": "sharingMode",
          "text": " sharingMode must be a valid VkSharingMode value"
        },
        {
          "vuid": "initialLayout",
          "text": " initialLayout must be a valid VkImageLayout value"
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sharingMode",
          "text": " If sharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the physicalDevice that was used to create device"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sharingMode",
          "text": " If sharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by either vkGetPhysicalDeviceQueueFamilyProperties or vkGetPhysicalDeviceQueueFamilyProperties2 for the physicalDevice that was used to create device"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT, imageType must be VK_IMAGE_TYPE_3D"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "flags",
          "text": " If the protected memory feature is not enabled, flags must not contain VK_IMAGE_CREATE_PROTECTED_BIT."
        },
        {
          "vuid": "None",
          "text": " If any of the bits VK_IMAGE_CREATE_SPARSE_BINDING_BIT, VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT are set, VK_IMAGE_CREATE_PROTECTED_BIT must not also be set."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_external_memory)+(VK_NV_external_memory)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain contains an instance of VkExternalMemoryImageCreateInfoNV, it must not contain an instance of VkExternalMemoryImageCreateInfo."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_external_memory)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain contains an instance of VkExternalMemoryImageCreateInfo, its handleTypes member must only contain bits that are also in VkExternalImageFormatProperties::externalMemoryProperties.compatibleHandleTypes, as returned by vkGetPhysicalDeviceImageFormatProperties2 with format, imageType, tiling, usage, and flags equal to those in this structure, and with an instance of VkPhysicalDeviceExternalImageFormatInfo in the pNext chain, with a handleType equal to any one of the handle types specified in VkExternalMemoryImageCreateInfo::handleTypes"
        }
      ],
      "(VK_NV_external_memory+VK_NV_external_memory_capabilities)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain contains an instance of VkExternalMemoryImageCreateInfoNV, its handleTypes member must only contain bits that are also in VkExternalImageFormatPropertiesNV::externalMemoryProperties.compatibleHandleTypes, as returned by vkGetPhysicalDeviceExternalImageFormatPropertiesNV with format, imageType, tiling, usage, and flags equal to those in this structure, and with externalHandleType equal to any one of the handle types specified in VkExternalMemoryImageCreateInfoNV::handleTypes"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "physicalDeviceCount",
          "text": " If the logical device was created with VkDeviceGroupDeviceCreateInfo::physicalDeviceCount equal to 1, flags must not contain VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT"
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT, then mipLevels must be one, arrayLayers must be one, imageType must be VK_IMAGE_TYPE_2D, and tiling must be VK_IMAGE_TILING_OPTIMAL"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT, then format must be a appendix-compressedtex-bc,block-compressed image format, an appendix-compressedtex-etc2, ETC compressed image format, or an appendix-compressedtex-astc, ASTC compressed image format."
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT, then flags must also contain VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_external_memory,VK_NV_external_memory)": [
        {
          "vuid": "pNext",
          "text": "     If the pNext chain includes a ifdef::VK_VERSION_1_1,VK_KHR_external_memory[VkExternalMemoryImageCreateInfo]"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "format",
          "text": " If the image format is one of those listed in features-formats-requiring-sampler-ycbcr-conversion:"
        },
        {
          "vuid": "tiling",
          "text": " If tiling is VK_IMAGE_TILING_OPTIMAL, format is a multi-planar format, and VkFormatProperties::optimalTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_DISJOINT_BIT, flags must not contain VK_IMAGE_CREATE_DISJOINT_BIT"
        },
        {
          "vuid": "tiling",
          "text": " If tiling is VK_IMAGE_TILING_LINEAR, format is a multi-planar format, and VkFormatProperties::linearTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_DISJOINT_BIT, flags must not contain VK_IMAGE_CREATE_DISJOINT_BIT"
        },
        {
          "vuid": "format",
          "text": " If format is not a multi-planar format, and flags does not include VK_IMAGE_CREATE_ALIAS_BIT, flags must not contain VK_IMAGE_CREATE_DISJOINT_BIT"
        }
      ],
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT format must be a depth or depth/stencil format"
        }
      ],
      "(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV, imageType must be VK_IMAGE_TYPE_2D or VK_IMAGE_TYPE_3D"
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV, it must not contain VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT and the format must not be a depth/stencil format"
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV and imageType is VK_IMAGE_TYPE_2D, extent::width and extent::height must be greater than 1"
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV and imageType is VK_IMAGE_TYPE_3D, extent::width, extent::height, and extent::depth must be greater than 1"
        }
      ],
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "imageType",
          "text": " If usage includes VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV, imageType must be VK_IMAGE_TYPE_2D."
        },
        {
          "vuid": "samples",
          "text": " If usage includes VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV, samples must be VK_SAMPLE_COUNT_1_BIT."
        },
        {
          "vuid": "tiling",
          "text": " If usage includes VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV, tiling must be VK_IMAGE_TILING_OPTIMAL."
        }
      ]
    },
    "VkDedicatedAllocationImageCreateInfoNV": {
      "(VK_NV_dedicated_allocation)": [
        {
          "vuid": "dedicatedAllocation",
          "text": " If dedicatedAllocation is VK_TRUE, VkImageCreateInfo::flags must not include VK_IMAGE_CREATE_SPARSE_BINDING_BIT, VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV"
        }
      ]
    },
    "VkExternalMemoryImageCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_external_memory)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO"
        },
        {
          "vuid": "handleTypes",
          "text": " handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBits values"
        },
        {
          "vuid": "handleTypes",
          "text": " handleTypes must not be 0"
        }
      ]
    },
    "VkExternalMemoryImageCreateInfoNV": {
      "(VK_NV_external_memory)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV"
        },
        {
          "vuid": "handleTypes",
          "text": " handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values"
        }
      ]
    },
    "VkExternalFormatANDROID": {
      "(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "externalFormat",
          "text": " externalFormat must be 0 or a value returned in the externalFormat member of VkAndroidHardwareBufferFormatPropertiesANDROID by an earlier call to vkGetAndroidHardwareBufferPropertiesANDROID"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID"
        }
      ]
    },
    "VkImageSwapchainCreateInfoKHR": {
      "(VK_VERSION_1_1,VK_KHR_device_group)+(VK_KHR_swapchain)": [
        {
          "vuid": "swapchain",
          "text": " If swapchain is not VK_NULL_HANDLE, the fields of VkImageCreateInfo must match the swapchain-wsi-image-create-info, implied image creation parameters of the swapchain"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR"
        },
        {
          "vuid": "swapchain",
          "text": " If swapchain is not VK_NULL_HANDLE, swapchain must be a valid VkSwapchainKHR handle"
        }
      ]
    },
    "VkImageFormatListCreateInfoKHR": {
      "(VK_KHR_image_format_list)": [
        {
          "vuid": "viewFormatCount",
          "text": " If viewFormatCount is not 0, all of the formats in the pViewFormats array must be compatible with the format specified in the format field of VkImageCreateInfo, as described in the compatibility table."
        },
        {
          "vuid": "flags",
          "text": " If VkImageCreateInfo::flags does not contain VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT, viewFormatCount must be 0 or 1."
        },
        {
          "vuid": "viewFormatCount",
          "text": " If viewFormatCount is not 0, VkImageCreateInfo::format must be in pViewFormats."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR"
        },
        {
          "vuid": "pViewFormats",
          "text": " If viewFormatCount is not 0, pViewFormats must be a valid pointer to an array of viewFormatCount valid VkFormat values"
        }
      ]
    },
    "vkGetImageSubresourceLayout": {
      "core": [
        {
          "vuid": "image",
          "text": " image must have been created with tiling equal to VK_IMAGE_TILING_LINEAR"
        },
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of pSubresource must only have a single bit set"
        },
        {
          "vuid": "mipLevel",
          "text": " The mipLevel member of pSubresource must be less than the mipLevels specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "arrayLayer",
          "text": " The arrayLayer member of pSubresource must be less than the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "pSubresource",
          "text": " pSubresource must be a valid pointer to a valid VkImageSubresource structure"
        },
        {
          "vuid": "pLayout",
          "text": " pLayout must be a valid pointer to a VkSubresourceLayout structure"
        },
        {
          "vuid": "image",
          "text": " image must have been created, allocated, or retrieved from device"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "format",
          "text": " If the format of image is a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format with two planes, the aspectMask member of pSubresource must be VK_IMAGE_ASPECT_PLANE_0_BIT or VK_IMAGE_ASPECT_PLANE_1_BIT"
        },
        {
          "vuid": "format",
          "text": " If the format of image is a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format with three planes, the aspectMask member of pSubresource must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT or VK_IMAGE_ASPECT_PLANE_2_BIT"
        }
      ],
      "(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "image",
          "text": " If image was created with the VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID external memory handle type, then image must be bound to memory."
        }
      ]
    },
    "VkImageSubresource": {
      "core": [
        {
          "vuid": "aspectMask",
          "text": " aspectMask must be a valid combination of VkImageAspectFlagBits values"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must not be 0"
        }
      ]
    },
    "vkDestroyImage": {
      "core": [
        {
          "vuid": "image",
          "text": " All submitted commands that refer to image, either directly or via a VkImageView, must have completed execution"
        },
        {
          "vuid": "image",
          "text": " If VkAllocationCallbacks were provided when image was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "image",
          "text": " If no VkAllocationCallbacks were provided when image was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "image",
          "text": " If image is not VK_NULL_HANDLE, image must be a valid VkImage handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "image",
          "text": " If image is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreateImageView": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkImageViewCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pView",
          "text": " pView must be a valid pointer to a VkImageView handle"
        }
      ]
    },
    "VkImageViewCreateInfo": {
      "core": [
        {
          "vuid": "image",
          "text": " If image was not created with VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT then viewType must not be VK_IMAGE_VIEW_TYPE_CUBE or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        },
        {
          "vuid": "viewType",
          "text": " If the features-features-imageCubeArray,image cubemap arrays feature is not enabled, viewType must not be VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_LINEAR, format must be format that has at least one supported feature bit present in the value of VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_LINEAR and usage contains VK_IMAGE_USAGE_SAMPLED_BIT, format must be supported for sampled images, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_LINEAR and usage contains VK_IMAGE_USAGE_STORAGE_BIT, format must be supported for storage images, as specified by the VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_LINEAR and usage contains VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, format must be supported for color attachments, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_LINEAR and usage contains VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, format must be supported for depth/stencil attachments, as specified by the VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "subresourceRange",
          "text": " subresourceRange.baseMipLevel must be less than the mipLevels specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "subresourceRange",
          "text": " If subresourceRange.levelCount is not VK_REMAINING_MIP_LEVELS, +subresourceRange.baseMipLevel + subresourceRange.levelCount+ must be less than or equal to the mipLevels specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "image",
          "text": " If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, format must be compatible with the format used to create image, as defined in features-formats-compatibility-classes,Format Compatibility Classes"
        },
        {
          "vuid": "image",
          "text": " If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "subResourceRange",
          "text": " subresourceRange and viewType must be compatible with the image, as described in the resources-image-views-compatibility,compatibility table"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkImageViewASTCDecodeModeEXT, VkImageViewUsageCreateInfo, or VkSamplerYcbcrConversionInfo"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "viewType",
          "text": " viewType must be a valid VkImageViewType value"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "components",
          "text": " components must be a valid VkComponentMapping structure"
        },
        {
          "vuid": "subresourceRange",
          "text": " subresourceRange must be a valid VkImageSubresourceRange structure"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TYPE_3D but without VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set then viewType must not be VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY"
        },
        {
          "vuid": "image",
          "text": " If image is not a 3D image created with VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set, or viewType is not VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY, subresourceRange::baseArrayLayer must be less than the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "subresourceRange",
          "text": " If subresourceRange::layerCount is not VK_REMAINING_ARRAY_LAYERS, image is not a 3D image created with VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set, or viewType is not VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY, subresourceRange::layerCount must be non-zero and +subresourceRange::baseArrayLayer + subresourceRange::layerCount+ must be less than or equal to the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "image",
          "text": " If image is a 3D image created with VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set, and viewType is VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY, subresourceRange::baseArrayLayer must be less than the extent.depth specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "subresourceRange",
          "text": " If subresourceRange::layerCount is not VK_REMAINING_ARRAY_LAYERS, image is a 3D image created with VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set, and viewType is VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY, subresourceRange::layerCount must be non-zero and +subresourceRange::baseArrayLayer + subresourceRange::layerCount+ must be less than or equal to the extent.depth specified in VkImageCreateInfo when image was created"
        }
      ],
      "!(VK_NV_shading_rate_image)": [
        {
          "vuid": "image",
          "text": " image must have been created with a usage value containing at least one of VK_IMAGE_USAGE_SAMPLED_BIT, VK_IMAGE_USAGE_STORAGE_BIT, VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT"
        }
      ],
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "image",
          "text": " image must have been created with a usage value containing at least one of VK_IMAGE_USAGE_SAMPLED_BIT, VK_IMAGE_USAGE_STORAGE_BIT, VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, or VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV"
        },
        {
          "vuid": "image",
          "text": " If image was created with usage containing VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV, viewType must be VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY"
        },
        {
          "vuid": "image",
          "text": " If image was created with usage containing VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV, format must be VK_FORMAT_R8_UINT"
        }
      ],
      "!(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_OPTIMAL, format must be format that has at least one supported feature bit present in the value of VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_OPTIMAL and usage contains VK_IMAGE_USAGE_SAMPLED_BIT, format must be supported for sampled images, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_OPTIMAL and usage contains VK_IMAGE_USAGE_STORAGE_BIT, format must be supported for storage images, as specified by the VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_OPTIMAL and usage contains VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, format must be supported for color attachments, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_OPTIMAL and usage contains VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, format must be supported for depth/stencil attachments, as specified by the VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        }
      ],
      "(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_OPTIMAL and format is not VK_FORMAT_UNDEFINED, format must be format that has at least one supported feature bit present in the value of VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_OPTIMAL, and format is not VK_FORMAT_UNDEFINED, and usage contains VK_IMAGE_USAGE_SAMPLED_BIT, format must be supported for sampled images, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_OPTIMAL, and format is not VK_FORMAT_UNDEFINED, and usage contains VK_IMAGE_USAGE_STORAGE_BIT, format must be supported for storage images, as specified by the VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_OPTIMAL, and format is not VK_FORMAT_UNDEFINED, and usage contains VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, format must be supported for color attachments, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image was created with VK_IMAGE_TILING_OPTIMAL, and format is not VK_FORMAT_UNDEFINED, and usage contains VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, format must be supported for depth/stencil attachments, as specified by the VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format"
        },
        {
          "vuid": "image",
          "text": " If image has an memory-external-android-hardware-buffer-external-formats,external format:"
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "subresourceRange",
          "text": " subresourceRange.baseArrayLayer must be less than the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "subresourceRange",
          "text": " If subresourceRange.layerCount is not VK_REMAINING_ARRAY_LAYERS, +subresourceRange.baseArrayLayer + subresourceRange.layerCount+ must be less than or equal to the arrayLayers specified in VkImageCreateInfo when image was created"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance2)+!(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, but without the VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT flag, format must be compatible with the format used to create image, as defined in features-formats-compatibility-classes,Format Compatibility Classes"
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_maintenance2)+(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, and if the format of the image is not a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format, format must be compatible with the format used to create image, as defined in features-formats-compatibility-classes,Format Compatibility Classes"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance2)+(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, but without the VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT flag, and if the format of the image is not a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format, format must be compatible with the format used to create image, as defined in features-formats-compatibility-classes,Format Compatibility Classes"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "image",
          "text": " If image was created with the VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT flag, format must be compatible with, or must be an uncompressed format that is size-compatible with, the format used to create image."
        },
        {
          "vuid": "image",
          "text": " If image was created with the VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT flag, the levelCount and layerCount members of subresourceRange must both be 1."
        }
      ],
      "(VK_KHR_image_format_list)": [
        {
          "vuid": "pNext",
          "text": " If a VkImageFormatListCreateInfoKHR structure was included in the pNext chain of the VkImageCreateInfo struct used when creating image and the viewFormatCount field of VkImageFormatListCreateInfoKHR is not zero then format must be one of the formats in VkImageFormatListCreateInfoKHR::pViewFormats."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, if the format of the image is a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format, and if subresourceRange.aspectMask is one of VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT, then format must be compatible with the VkFormat for the plane of the image format indicated by subresourceRange.aspectMask, as defined in features-formats-compatible-planes"
        },
        {
          "vuid": "image",
          "text": " If image was not created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, or if the format of the image is a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format and if subresourceRange.aspectMask is VK_IMAGE_ASPECT_COLOR_BIT, format must be identical to the format used to create image"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain contains an instance of VkSamplerYcbcrConversionInfo with a conversion value other than VK_NULL_HANDLE, all members of components must have the value VK_COMPONENT_SWIZZLE_IDENTITY."
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " If image was not created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, format must be identical to the format used to create image"
        }
      ]
    },
    "VkImageViewUsageCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "usage",
          "text": " usage must not include any set bits that were not set in the usage member of the VkImageCreateInfo structure used to create the image this image view is created from."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO"
        },
        {
          "vuid": "usage",
          "text": " usage must be a valid combination of VkImageUsageFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must not be 0"
        }
      ]
    },
    "VkImageSubresourceRange": {
      "core": [
        {
          "vuid": "levelCount",
          "text": " If levelCount is not VK_REMAINING_MIP_LEVELS, it must be greater than 0"
        },
        {
          "vuid": "layerCount",
          "text": " If layerCount is not VK_REMAINING_ARRAY_LAYERS, it must be greater than 0"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must be a valid combination of VkImageAspectFlagBits values"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must not be 0"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "aspectMask",
          "text": " If aspectMask includes VK_IMAGE_ASPECT_COLOR_BIT, then it must not include any of VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT"
        }
      ]
    },
    "VkComponentMapping": {
      "core": [
        {
          "vuid": "r",
          "text": " r must be a valid VkComponentSwizzle value"
        },
        {
          "vuid": "g",
          "text": " g must be a valid VkComponentSwizzle value"
        },
        {
          "vuid": "b",
          "text": " b must be a valid VkComponentSwizzle value"
        },
        {
          "vuid": "a",
          "text": " a must be a valid VkComponentSwizzle value"
        }
      ]
    },
    "VkImageViewASTCDecodeModeEXT": {
      "(VK_EXT_astc_decode_mode)": [
        {
          "vuid": "decodeMode",
          "text": " decodeMode must be one of VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, or VK_FORMAT_E5B9G9R9_UFLOAT_PACK32"
        },
        {
          "vuid": "decodeMode",
          "text": " If the features-features-astc-decodeModeSharedExponent, decodeModeSharedExponent feature is not enabled, decodeMode must not be VK_FORMAT_E5B9G9R9_UFLOAT_PACK32"
        },
        {
          "vuid": "decodeMode",
          "text": " If decodeMode is VK_FORMAT_R8G8B8A8_UNORM the image view must not include blocks using any of the ASTC HDR modes"
        },
        {
          "vuid": "format",
          "text": " format of the image view must be one of VK_FORMAT_ASTC_4x4_UNORM_BLOCK, VK_FORMAT_ASTC_4x4_SRGB_BLOCK, VK_FORMAT_ASTC_5x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x4_SRGB_BLOCK, VK_FORMAT_ASTC_5x5_UNORM_BLOCK, VK_FORMAT_ASTC_5x5_SRGB_BLOCK, VK_FORMAT_ASTC_6x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x5_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_8x5_UNORM_BLOCK, VK_FORMAT_ASTC_8x5_SRGB_BLOCK, VK_FORMAT_ASTC_8x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x6_SRGB_BLOCK, VK_FORMAT_ASTC_8x8_UNORM_BLOCK, VK_FORMAT_ASTC_8x8_SRGB_BLOCK, VK_FORMAT_ASTC_10x5_UNORM_BLOCK, VK_FORMAT_ASTC_10x5_SRGB_BLOCK, VK_FORMAT_ASTC_10x6_UNORM_BLOCK, VK_FORMAT_ASTC_10x6_SRGB_BLOCK, VK_FORMAT_ASTC_10x8_UNORM_BLOCK, VK_FORMAT_ASTC_10x8_SRGB_BLOCK, VK_FORMAT_ASTC_10x10_UNORM_BLOCK, VK_FORMAT_ASTC_10x10_SRGB_BLOCK, VK_FORMAT_ASTC_12x10_UNORM_BLOCK, VK_FORMAT_ASTC_12x10_SRGB_BLOCK, VK_FORMAT_ASTC_12x12_UNORM_BLOCK, or VK_FORMAT_ASTC_12x12_SRGB_BLOCK"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT"
        },
        {
          "vuid": "decodeMode",
          "text": " decodeMode must be a valid VkFormat value"
        }
      ]
    },
    "vkDestroyImageView": {
      "core": [
        {
          "vuid": "imageView",
          "text": " All submitted commands that refer to imageView must have completed execution"
        },
        {
          "vuid": "imageView",
          "text": " If VkAllocationCallbacks were provided when imageView was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "imageView",
          "text": " If no VkAllocationCallbacks were provided when imageView was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "imageView",
          "text": " If imageView is not VK_NULL_HANDLE, imageView must be a valid VkImageView handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "imageView",
          "text": " If imageView is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetBufferMemoryRequirements": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "pMemoryRequirements",
          "text": " pMemoryRequirements must be a valid pointer to a VkMemoryRequirements structure"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetImageMemoryRequirements": {
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " image must not have been created with the VK_IMAGE_CREATE_DISJOINT_BIT flag set"
        }
      ],
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "pMemoryRequirements",
          "text": " pMemoryRequirements must be a valid pointer to a VkMemoryRequirements structure"
        },
        {
          "vuid": "image",
          "text": " image must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetBufferMemoryRequirements2": {
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pInfo",
          "text": " pInfo must be a valid pointer to a valid VkBufferMemoryRequirementsInfo2 structure"
        },
        {
          "vuid": "pMemoryRequirements",
          "text": " pMemoryRequirements must be a valid pointer to a VkMemoryRequirements2 structure"
        }
      ]
    },
    "VkBufferMemoryRequirementsInfo2": {
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        }
      ]
    },
    "vkGetImageMemoryRequirements2": {
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pInfo",
          "text": " pInfo must be a valid pointer to a valid VkImageMemoryRequirementsInfo2 structure"
        },
        {
          "vuid": "pMemoryRequirements",
          "text": " pMemoryRequirements must be a valid pointer to a VkMemoryRequirements2 structure"
        }
      ]
    },
    "VkImageMemoryRequirementsInfo2": {
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)+(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " If image was created with a multi-planar format and the VK_IMAGE_CREATE_DISJOINT_BIT flag, there must be a VkImagePlaneMemoryRequirementsInfo in the pNext chain of the VkImageMemoryRequirementsInfo2 structure"
        },
        {
          "vuid": "image",
          "text": " If image was not created with the VK_IMAGE_CREATE_DISJOINT_BIT flag, there must not be a VkImagePlaneMemoryRequirementsInfo in the pNext chain of the VkImageMemoryRequirementsInfo2 structure"
        },
        {
          "vuid": "image",
          "text": " If image was created with a single-plane format, there must not be a VkImagePlaneMemoryRequirementsInfo in the pNext chain of the VkImageMemoryRequirementsInfo2 structure"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)+(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)+(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "image",
          "text": " If image was created with the VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID external memory handle type, then image must be bound to memory."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkImagePlaneMemoryRequirementsInfo"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        }
      ]
    },
    "VkImagePlaneMemoryRequirementsInfo": {
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)+(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "planeAspect",
          "text": " planeAspect must be an aspect that exists in the format; that is, for a two-plane image planeAspect must be VK_IMAGE_ASPECT_PLANE_0_BIT or VK_IMAGE_ASPECT_PLANE_1_BIT, and for a three-plane image planeAspect must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT or VK_IMAGE_ASPECT_PLANE_2_BIT"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO"
        },
        {
          "vuid": "planeAspect",
          "text": " planeAspect must be a valid VkImageAspectFlagBits value"
        }
      ]
    },
    "VkMemoryRequirements2": {
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkMemoryDedicatedRequirements"
        }
      ]
    },
    "VkMemoryDedicatedRequirements": {
      "(VK_VERSION_1_1,VK_KHR_dedicated_allocation)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS"
        }
      ]
    },
    "vkBindBufferMemory": {
      "core": [
        {
          "vuid": "buffer",
          "text": " buffer must not already be backed by a memory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must not have been created with any sparse memory binding flags"
        },
        {
          "vuid": "memoryOffset",
          "text": " memoryOffset must be less than the size of memory"
        },
        {
          "vuid": "memory",
          "text": " memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer"
        },
        {
          "vuid": "memoryOffset",
          "text": " memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer"
        },
        {
          "vuid": "size",
          "text": " The size member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer must be less than or equal to the size of memory minus memoryOffset"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created, allocated, or retrieved from device"
        },
        {
          "vuid": "memory",
          "text": " memory must have been created, allocated, or retrieved from device"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_dedicated_allocation)": [
        {
          "vuid": "buffer",
          "text": " If buffer requires a dedicated allocation(as reported by vkGetBufferMemoryRequirements2 in VkMemoryDedicatedRequirements::requiresDedicatedAllocation for buffer), memory must have been created with VkMemoryDedicatedAllocateInfo::buffer equal to buffer"
        },
        {
          "vuid": "memory",
          "text": " If the VkMemoryAllocateInfo provided when memory was allocated included an instance of VkMemoryDedicatedAllocateInfo in its pNext chain, and VkMemoryDedicatedAllocateInfo::buffer was not VK_NULL_HANDLE, then buffer must equal VkMemoryDedicatedAllocateInfo::buffer, and memoryOffset must be zero."
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "None",
          "text": " If buffer was created with the VK_BUFFER_CREATE_PROTECTED_BIT bit set, the buffer must be bound to a memory object allocated with a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT"
        },
        {
          "vuid": "None",
          "text": " If buffer was created with the VK_BUFFER_CREATE_PROTECTED_BIT bit not set, the buffer must not be bound to a memory object created with a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT"
        }
      ],
      "(VK_NV_dedicated_allocation)": [
        {
          "vuid": "buffer",
          "text": " If buffer was created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must have been created with VkDedicatedAllocationMemoryAllocateInfoNV::buffer equal to a buffer handle created with identical creation parameters to buffer and memoryOffset must be zero"
        }
      ],
      "(VK_NV_dedicated_allocation)+!(VK_VERSION_1_1,VK_KHR_dedicated_allocation)": [
        {
          "vuid": "buffer",
          "text": " If buffer was not created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must not have been allocated dedicated for a specific buffer or image"
        }
      ]
    },
    "vkBindBufferMemory2": {
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pBindInfos",
          "text": " pBindInfos must be a valid pointer to an array of bindInfoCount valid VkBindBufferMemoryInfo structures"
        },
        {
          "vuid": "bindInfoCount",
          "text": " bindInfoCount must be greater than 0"
        }
      ]
    },
    "VkBindBufferMemoryInfo": {
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)": [
        {
          "vuid": "buffer",
          "text": " buffer must not already be backed by a memory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must not have been created with any sparse memory binding flags"
        },
        {
          "vuid": "memoryOffset",
          "text": " memoryOffset must be less than the size of memory"
        },
        {
          "vuid": "memory",
          "text": " memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer"
        },
        {
          "vuid": "memoryOffset",
          "text": " memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer"
        },
        {
          "vuid": "size",
          "text": " The size member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer must be less than or equal to the size of memory minus memoryOffset"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkBindBufferMemoryDeviceGroupInfo"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of buffer, and memory must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_VERSION_1_1,VK_KHR_dedicated_allocation)": [
        {
          "vuid": "buffer",
          "text": " If buffer requires a dedicated allocation(as reported by vkGetBufferMemoryRequirements2 in VkMemoryDedicatedRequirements::requiresDedicatedAllocation for buffer), memory must have been created with VkMemoryDedicatedAllocateInfo::buffer equal to buffer and memoryOffset must be zero"
        },
        {
          "vuid": "memory",
          "text": " If the VkMemoryAllocateInfo provided when memory was allocated included an instance of VkMemoryDedicatedAllocateInfo in its pNext chain, and VkMemoryDedicatedAllocateInfo::buffer was not VK_NULL_HANDLE, then buffer must equal VkMemoryDedicatedAllocateInfo::buffer and memoryOffset must be zero."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_NV_dedicated_allocation)": [
        {
          "vuid": "buffer",
          "text": " If buffer was created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must have been created with VkDedicatedAllocationMemoryAllocateInfoNV::buffer equal to buffer and memoryOffset must be zero"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_NV_dedicated_allocation)+!(VK_VERSION_1_1,VK_KHR_dedicated_allocation)": [
        {
          "vuid": "buffer",
          "text": " If buffer was not created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must not have been allocated dedicated for a specific buffer or image"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes VkBindBufferMemoryDeviceGroupInfo, all instances of memory specified by VkBindBufferMemoryDeviceGroupInfo::pDeviceIndices must have been allocated"
        }
      ]
    },
    "VkBindBufferMemoryDeviceGroupInfo": {
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "deviceIndexCount",
          "text": " deviceIndexCount must either be zero or equal to the number of physical devices in the logical device"
        },
        {
          "vuid": "pDeviceIndices",
          "text": " All elements of pDeviceIndices must be valid device indices"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO"
        },
        {
          "vuid": "pDeviceIndices",
          "text": " If deviceIndexCount is not 0, pDeviceIndices must be a valid pointer to an array of deviceIndexCount uint32_t values"
        }
      ]
    },
    "vkBindImageMemory": {
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " image must not have been created with the VK_IMAGE_CREATE_DISJOINT_BIT set."
        }
      ],
      "core": [
        {
          "vuid": "image",
          "text": " image must not already be backed by a memory object"
        },
        {
          "vuid": "image",
          "text": " image must not have been created with any sparse memory binding flags"
        },
        {
          "vuid": "memoryOffset",
          "text": " memoryOffset must be less than the size of memory"
        },
        {
          "vuid": "memory",
          "text": " memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image"
        },
        {
          "vuid": "memoryOffset",
          "text": " memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image"
        },
        {
          "vuid": "size",
          "text": " The size member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image must be less than or equal to the size of memory minus memoryOffset"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "image",
          "text": " image must have been created, allocated, or retrieved from device"
        },
        {
          "vuid": "memory",
          "text": " memory must have been created, allocated, or retrieved from device"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_dedicated_allocation)": [
        {
          "vuid": "image",
          "text": " If image requires a dedicated allocation (as reported by vkGetImageMemoryRequirements2 in VkMemoryDedicatedRequirements::requiresDedicatedAllocation for image), memory must have been created with VkMemoryDedicatedAllocateInfo::image equal to image"
        },
        {
          "vuid": "memory",
          "text": " If the VkMemoryAllocateInfo provided when memory was allocated included an instance of VkMemoryDedicatedAllocateInfo in its pNext chain, and VkMemoryDedicatedAllocateInfo::image was not VK_NULL_HANDLE, then image must equal VkMemoryDedicatedAllocateInfo::image and memoryOffset must be zero."
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "None",
          "text": " If image was created with the VK_IMAGE_CREATE_PROTECTED_BIT bit set, the image must be bound to a memory object allocated with a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT"
        },
        {
          "vuid": "None",
          "text": " If image was created with the VK_IMAGE_CREATE_PROTECTED_BIT bit not set, the image must not be bound to a memory object created with a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT"
        }
      ],
      "(VK_NV_dedicated_allocation)": [
        {
          "vuid": "image",
          "text": " If image was created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must have been created with VkDedicatedAllocationMemoryAllocateInfoNV::image equal to an image handle created with identical creation parameters to image and memoryOffset must be zero"
        }
      ],
      "(VK_NV_dedicated_allocation)+!(VK_VERSION_1_1,VK_KHR_dedicated_allocation)": [
        {
          "vuid": "image",
          "text": " If image was not created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must not have been allocated dedicated for a specific buffer or image"
        }
      ]
    },
    "vkBindImageMemory2": {
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pBindInfos",
          "text": " pBindInfos must be a valid pointer to an array of bindInfoCount valid VkBindImageMemoryInfo structures"
        },
        {
          "vuid": "bindInfoCount",
          "text": " bindInfoCount must be greater than 0"
        }
      ]
    },
    "VkBindImageMemoryInfo": {
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)": [
        {
          "vuid": "image",
          "text": " image must not already be backed by a memory object"
        },
        {
          "vuid": "image",
          "text": " image must not have been created with any sparse memory binding flags"
        },
        {
          "vuid": "memoryOffset",
          "text": " memoryOffset must be less than the size of memory"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkBindImageMemoryDeviceGroupInfo, VkBindImageMemorySwapchainInfoKHR, or VkBindImagePlaneMemoryInfo"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of image, and memory that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+!(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "memory",
          "text": " memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image"
        },
        {
          "vuid": "memoryOffset",
          "text": " memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image"
        },
        {
          "vuid": "memory",
          "text": " The difference of the size of memory and memoryOffset must be greater than or equal to the size member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with the same image"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain does not include an instance of the VkBindImagePlaneMemoryInfo structure, memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with image"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain does not include an instance of the VkBindImagePlaneMemoryInfo structure, memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with image"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain does not include an instance of the VkBindImagePlaneMemoryInfo structure, the difference of the size of memory and memoryOffset must be greater than or equal to the size member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with the same image"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of the VkBindImagePlaneMemoryInfo structure, image must have been created with the VK_IMAGE_CREATE_DISJOINT_BIT bit set."
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of the VkBindImagePlaneMemoryInfo structure, memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with image and the correct planeAspect for this plane in the VkImagePlaneMemoryRequirementsInfo structure attached to the VkImageMemoryRequirementsInfo2’s pNext chain"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of the VkBindImagePlaneMemoryInfo structure, memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with image and the correct planeAspect for this plane in the VkImagePlaneMemoryRequirementsInfo structure attached to the VkImageMemoryRequirementsInfo2’s pNext chain"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of the VkBindImagePlaneMemoryInfo structure, the difference of the size of memory and memoryOffset must be greater than or equal to the size member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with the same image and the correct planeAspect for this plane in the VkImagePlaneMemoryRequirementsInfo structure attached to the VkImageMemoryRequirementsInfo2’s pNext chain"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_VERSION_1_1,VK_KHR_dedicated_allocation)": [
        {
          "vuid": "image",
          "text": " If image requires a dedicated allocation (as reported by vkGetImageMemoryRequirements2 in VkMemoryDedicatedRequirements::requiresDedicatedAllocation for image), memory must have been created with VkMemoryDedicatedAllocateInfo::image equal to image and memoryOffset must be zero"
        },
        {
          "vuid": "memory",
          "text": " If the VkMemoryAllocateInfo provided when memory was allocated included an instance of VkMemoryDedicatedAllocateInfo in its pNext chain, and VkMemoryDedicatedAllocateInfo::image was not VK_NULL_HANDLE, then image must equal VkMemoryDedicatedAllocateInfo::image and memoryOffset must be zero."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_NV_dedicated_allocation)": [
        {
          "vuid": "image",
          "text": " If image was created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must have been created with VkDedicatedAllocationMemoryAllocateInfoNV::image equal to image and memoryOffset must be zero"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_NV_dedicated_allocation)+!(VK_VERSION_1_1,VK_KHR_dedicated_allocation)": [
        {
          "vuid": "image",
          "text": " If image was not created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must not have been allocated dedicated for a specific buffer or image"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+!(VK_VERSION_1_1+VK_KHR_swapchain)+!(VK_KHR_device_group+VK_KHR_swapchain)": [
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes VkBindImageMemoryDeviceGroupInfo, all instances of memory specified by VkBindImageMemoryDeviceGroupInfo::pDeviceIndices must have been allocated"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes VkBindImageMemoryDeviceGroupInfo, and VkBindImageMemoryDeviceGroupInfo::splitInstanceBindRegionCount is not zero, then image must have been created with the VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT bit set"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes VkBindImageMemoryDeviceGroupInfo, all elements of VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions must be valid rectangles contained within the dimensions of image"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes VkBindImageMemoryDeviceGroupInfo, the union of the areas of all elements of VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions that correspond to the same instance of image must cover the entire image."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_VERSION_1_1,VK_KHR_device_group)+(VK_KHR_swapchain)": [
        {
          "vuid": "image",
          "text": " If image was created with a valid swapchain handle in VkImageSwapchainCreateInfoKHR::swapchain, then the pNext chain must include a valid instance of VkBindImageMemorySwapchainInfoKHR"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain includes an instance of VkBindImageMemorySwapchainInfoKHR, memory must be VK_NULL_HANDLE"
        },
        {
          "vuid": "pNext",
          "text": " If the pNext chain does not include an instance of VkBindImageMemorySwapchainInfoKHR, memory must be a valid VkDeviceMemory handle"
        }
      ]
    },
    "VkBindImageMemoryDeviceGroupInfo": {
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "deviceIndexCount",
          "text": " At least one of deviceIndexCount and splitInstanceBindRegionCount must be zero."
        },
        {
          "vuid": "deviceIndexCount",
          "text": " deviceIndexCount must either be zero or equal to the number of physical devices in the logical device"
        },
        {
          "vuid": "pDeviceIndices",
          "text": " All elements of pDeviceIndices must be valid device indices."
        },
        {
          "vuid": "splitInstanceBindRegionCount",
          "text": " splitInstanceBindRegionCount must either be zero or equal to the number of physical devices in the logical device squared"
        },
        {
          "vuid": "pSplitInstanceBindRegions",
          "text": " Elements of pSplitInstanceBindRegions that correspond to the same instance of an image must not overlap."
        },
        {
          "vuid": "offset",
          "text": " The offset.x member of any element of pSplitInstanceBindRegions must be a multiple of the sparse image block width (VkSparseImageFormatProperties::imageGranularity.width) of all non-metadata aspects of the image"
        },
        {
          "vuid": "offset",
          "text": " The offset.y member of any element of pSplitInstanceBindRegions must be a multiple of the sparse image block height (VkSparseImageFormatProperties::imageGranularity.height) of all non-metadata aspects of the image"
        },
        {
          "vuid": "extent",
          "text": " The extent.width member of any element of pSplitInstanceBindRegions must either be a multiple of the sparse image block width of all non-metadata aspects of the image, or else extent.width + offset.x must equal the width of the image subresource"
        },
        {
          "vuid": "extent",
          "text": " The extent.height member of any element of pSplitInstanceBindRegions must either be a multiple of the sparse image block height of all non-metadata aspects of the image, or else extent.height<br> offset.y must equal the width of the image subresource"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO"
        },
        {
          "vuid": "pDeviceIndices",
          "text": " If deviceIndexCount is not 0, pDeviceIndices must be a valid pointer to an array of deviceIndexCount uint32_t values"
        },
        {
          "vuid": "pSplitInstanceBindRegions",
          "text": " If splitInstanceBindRegionCount is not 0, pSplitInstanceBindRegions must be a valid pointer to an array of splitInstanceBindRegionCount VkRect2D structures"
        }
      ]
    },
    "VkBindImageMemorySwapchainInfoKHR": {
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_VERSION_1_1,VK_KHR_device_group)+(VK_KHR_swapchain)": [
        {
          "vuid": "imageIndex",
          "text": " imageIndex must be less than the number of images in swapchain"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR"
        },
        {
          "vuid": "swapchain",
          "text": " swapchain must be a valid VkSwapchainKHR handle"
        }
      ]
    },
    "VkBindImagePlaneMemoryInfo": {
      "(VK_VERSION_1_1,VK_KHR_bind_memory2)+(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "planeAspect",
          "text": "planeAspect must be a single valid plane aspect for the image format (that is, planeAspect must be VK_IMAGE_ASPECT_PLANE_0_BIT or VK_IMAGE_ASPECT_PLANE_1_BIT for \"_2PLANE\" formats and planeAspect must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT for _3PLANE formats)"
        },
        {
          "vuid": "None",
          "text": " A single call to vkBindImageMemory2 must bind all or none of the planes of an image (i.e. bindings to all planes of an image must be made in a single vkBindImageMemory2 call), as separate bindings"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO"
        },
        {
          "vuid": "planeAspect",
          "text": " planeAspect must be a valid VkImageAspectFlagBits value"
        }
      ]
    },
    "vkCreateAccelerationStructureNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkAccelerationStructureCreateInfoNVX structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pAccelerationStructure",
          "text": " pAccelerationStructure must be a valid pointer to a VkAccelerationStructureNVX handle"
        }
      ]
    },
    "VkAccelerationStructureCreateInfoNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "geometryCount",
          "text": " geometryCount must be less than or equal to VkPhysicalDeviceRaytracingPropertiesNVX::maxGeometryCount"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkAccelerationStructureTypeNVX value"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkBuildAccelerationStructureFlagBitsNVX values"
        },
        {
          "vuid": "pGeometries",
          "text": " If geometryCount is not 0, pGeometries must be a valid pointer to an array of geometryCount valid VkGeometryNVX structures"
        }
      ]
    },
    "VkGeometryNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_GEOMETRY_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "geometryType",
          "text": " geometryType must be a valid VkGeometryTypeNVX value"
        },
        {
          "vuid": "geometry",
          "text": " geometry must be a valid VkGeometryDataNVX structure"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkGeometryFlagBitsNVX values"
        }
      ]
    },
    "VkGeometryDataNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "triangles",
          "text": " triangles must be a valid VkGeometryTrianglesNVX structure"
        },
        {
          "vuid": "aabbs",
          "text": " aabbs must be a valid VkGeometryAABBNVX structure"
        }
      ]
    },
    "VkGeometryTrianglesNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "vertexData",
          "text": " If vertexData is not VK_NULL_HANDLE, vertexData must be a valid VkBuffer handle"
        },
        {
          "vuid": "vertexFormat",
          "text": " vertexFormat must be a valid VkFormat value"
        },
        {
          "vuid": "indexData",
          "text": " If indexData is not VK_NULL_HANDLE, indexData must be a valid VkBuffer handle"
        },
        {
          "vuid": "indexType",
          "text": " indexType must be a valid VkIndexType value"
        },
        {
          "vuid": "transformData",
          "text": " If transformData is not VK_NULL_HANDLE, transformData must be a valid VkBuffer handle"
        },
        {
          "vuid": "commonparent",
          "text": " Each of indexData, transformData, and vertexData that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkGeometryAABBNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_GEOMETRY_AABB_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "aabbData",
          "text": " If aabbData is not VK_NULL_HANDLE, aabbData must be a valid VkBuffer handle"
        }
      ]
    },
    "vkDestroyAccelerationStructureNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "accelerationStructure",
          "text": " accelerationStructure must be a valid VkAccelerationStructureNVX handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "accelerationStructure",
          "text": " accelerationStructure must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetAccelerationStructureMemoryRequirementsNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pInfo",
          "text": " pInfo must be a valid pointer to a valid VkAccelerationStructureMemoryRequirementsInfoNVX structure"
        },
        {
          "vuid": "pMemoryRequirements",
          "text": " pMemoryRequirements must be a valid pointer to a VkMemoryRequirements2KHR structure"
        }
      ]
    },
    "vkGetAccelerationStructureScratchMemoryRequirementsNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pInfo",
          "text": " pInfo must be a valid pointer to a valid VkAccelerationStructureMemoryRequirementsInfoNVX structure"
        },
        {
          "vuid": "pMemoryRequirements",
          "text": " pMemoryRequirements must be a valid pointer to a VkMemoryRequirements2KHR structure"
        }
      ]
    },
    "VkAccelerationStructureMemoryRequirementsInfoNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "accelerationStructure",
          "text": " accelerationStructure must be a valid VkAccelerationStructureNVX handle"
        }
      ]
    },
    "vkBindAccelerationStructureMemoryNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pBindInfos",
          "text": " pBindInfos must be a valid pointer to an array of bindInfoCount valid VkBindAccelerationStructureMemoryInfoNVX structures"
        },
        {
          "vuid": "bindInfoCount",
          "text": " bindInfoCount must be greater than 0"
        }
      ]
    },
    "VkBindAccelerationStructureMemoryInfoNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "accelerationStructure",
          "text": " accelerationStructure must be a valid VkAccelerationStructureNVX handle"
        },
        {
          "vuid": "memory",
          "text": " memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "pDeviceIndices",
          "text": " If deviceIndexCount is not 0, pDeviceIndices must be a valid pointer to an array of deviceIndexCount uint32_t values"
        },
        {
          "vuid": "commonparent",
          "text": " Both of accelerationStructure, and memory must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkGetAccelerationStructureHandleNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "dataSize",
          "text": " dataSize must be large enough to contain the result of the query, as described above"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "accelerationStructure",
          "text": " accelerationStructure must be a valid VkAccelerationStructureNVX handle"
        },
        {
          "vuid": "pData",
          "text": " pData must be a valid pointer to an array of dataSize bytes"
        },
        {
          "vuid": "dataSize",
          "text": " dataSize must be greater than 0"
        },
        {
          "vuid": "accelerationStructure",
          "text": " accelerationStructure must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreateSampler": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkSamplerCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSampler",
          "text": " pSampler must be a valid pointer to a VkSampler handle"
        }
      ]
    },
    "VkSamplerCreateInfo": {
      "core": [
        {
          "vuid": "mipLodBias",
          "text": " The absolute value of mipLodBias must be less than or equal to VkPhysicalDeviceLimits::maxSamplerLodBias"
        },
        {
          "vuid": "maxLod",
          "text": " maxLod must be greater than or equal to minLod"
        },
        {
          "vuid": "anisotropyEnable",
          "text": " If the features-features-samplerAnisotropy,anisotropic sampling feature is not enabled, anisotropyEnable must be VK_FALSE"
        },
        {
          "vuid": "anisotropyEnable",
          "text": " If anisotropyEnable is VK_TRUE, maxAnisotropy must be between 1.0 and VkPhysicalDeviceLimits::maxSamplerAnisotropy, inclusive"
        },
        {
          "vuid": "unnormalizedCoordinates",
          "text": " If unnormalizedCoordinates is VK_TRUE, minFilter and magFilter must be equal"
        },
        {
          "vuid": "unnormalizedCoordinates",
          "text": " If unnormalizedCoordinates is VK_TRUE, mipmapMode must be VK_SAMPLER_MIPMAP_MODE_NEAREST"
        },
        {
          "vuid": "unnormalizedCoordinates",
          "text": " If unnormalizedCoordinates is VK_TRUE, minLod and maxLod must be zero"
        },
        {
          "vuid": "unnormalizedCoordinates",
          "text": " If unnormalizedCoordinates is VK_TRUE, addressModeU and addressModeV must each be either VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE or VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER"
        },
        {
          "vuid": "unnormalizedCoordinates",
          "text": " If unnormalizedCoordinates is VK_TRUE, anisotropyEnable must be VK_FALSE"
        },
        {
          "vuid": "unnormalizedCoordinates",
          "text": " If unnormalizedCoordinates is VK_TRUE, compareEnable must be VK_FALSE"
        },
        {
          "vuid": "addressModeU",
          "text": " If any of addressModeU, addressModeV or addressModeW are VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER, borderColor must be a valid VkBorderColor value"
        },
        {
          "vuid": "addressModeU",
          "text": " If the VK_KHR_sampler_mirror_clamp_to_edge extension is not enabled, addressModeU, addressModeV and addressModeW must not be VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE"
        },
        {
          "vuid": "compareEnable",
          "text": " If compareEnable is VK_TRUE, compareOp must be a valid VkCompareOp value"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkSamplerReductionModeCreateInfoEXT or VkSamplerYcbcrConversionInfo"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "magFilter",
          "text": " magFilter must be a valid VkFilter value"
        },
        {
          "vuid": "minFilter",
          "text": " minFilter must be a valid VkFilter value"
        },
        {
          "vuid": "mipmapMode",
          "text": " mipmapMode must be a valid VkSamplerMipmapMode value"
        },
        {
          "vuid": "addressModeU",
          "text": " addressModeU must be a valid VkSamplerAddressMode value"
        },
        {
          "vuid": "addressModeV",
          "text": " addressModeV must be a valid VkSamplerAddressMode value"
        },
        {
          "vuid": "addressModeW",
          "text": " addressModeW must be a valid VkSamplerAddressMode value"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "minFilter",
          "text": " If samplers-YCbCr-conversion,sampler Y’C<sub>B</sub>C<sub>R</sub> conversion is enabled and VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT is not set for the format, minFilter and magFilter must be equal to the sampler Y’C<sub>B</sub>C<sub>R</sub> conversion’s chromaFilter"
        },
        {
          "vuid": "addressModeU",
          "text": " If samplers-YCbCr-conversion,sampler Y’C<sub>B</sub>C<sub>R</sub> conversion is enabled, addressModeU, addressModeV, and addressModeW must be VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE, anisotropyEnable must be VK_FALSE, and unnormalizedCoordinates must be VK_FALSE"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)+(VK_EXT_sampler_filter_minmax)": [
        {
          "vuid": "None",
          "text": " The sampler reduction mode must be set to VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT if samplers-YCbCr-conversion,sampler Y’C<sub>B</sub>C<sub>R</sub> conversion is enabled"
        }
      ],
      "(VK_IMG_filter_cubic)": [
        {
          "vuid": "magFilter",
          "text": " If either magFilter or minFilter is VK_FILTER_CUBIC_IMG, anisotropyEnable must be VK_FALSE"
        }
      ],
      "(VK_IMG_filter_cubic+VK_EXT_sampler_filter_minmax)": [
        {
          "vuid": "magFilter",
          "text": " If either magFilter or minFilter is VK_FILTER_CUBIC_IMG, the reductionMode member of VkSamplerReductionModeCreateInfoEXT must be VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT"
        }
      ],
      "(VK_EXT_sampler_filter_minmax)": [
        {
          "vuid": "compareEnable",
          "text": " If compareEnable is VK_TRUE, the reductionMode member of VkSamplerReductionModeCreateInfoEXT must be VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT"
        }
      ]
    },
    "VkSamplerReductionModeCreateInfoEXT": {
      "(VK_EXT_sampler_filter_minmax)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT"
        },
        {
          "vuid": "reductionMode",
          "text": " reductionMode must be a valid VkSamplerReductionModeEXT value"
        }
      ]
    },
    "vkDestroySampler": {
      "core": [
        {
          "vuid": "sampler",
          "text": " All submitted commands that refer to sampler must have completed execution"
        },
        {
          "vuid": "sampler",
          "text": " If VkAllocationCallbacks were provided when sampler was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "sampler",
          "text": " If no VkAllocationCallbacks were provided when sampler was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "sampler",
          "text": " If sampler is not VK_NULL_HANDLE, sampler must be a valid VkSampler handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "sampler",
          "text": " If sampler is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "VkSamplerYcbcrConversionInfo": {
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO"
        },
        {
          "vuid": "conversion",
          "text": " conversion must be a valid VkSamplerYcbcrConversion handle"
        }
      ]
    },
    "vkCreateSamplerYcbcrConversion": {
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "None",
          "text": " The features-features-sampler-YCbCr-conversion, sampler Y’C<sub>B</sub>C<sub>R</sub> conversion feature must be enabled"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkSamplerYcbcrConversionCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pYcbcrConversion",
          "text": " pYcbcrConversion must be a valid pointer to a VkSamplerYcbcrConversion handle"
        }
      ]
    },
    "VkSamplerYcbcrConversionCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)+!(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "format",
          "text": " format must not be VK_FORMAT_UNDEFINED"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)+(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "format",
          "text": " If an external format conversion is being created, format must be VK_FORMAT_UNDEFINED, otherwise it must not be VK_FORMAT_UNDEFINED."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "format",
          "text": " format must support VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT or VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT"
        },
        {
          "vuid": "xChromaOffset",
          "text": " If the format does not support VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT, xChromaOffset and yChromaOffset must not be VK_CHROMA_LOCATION_COSITED_EVEN"
        },
        {
          "vuid": "xChromaOffset",
          "text": " If the format does not support VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT, xChromaOffset and yChromaOffset must not be VK_CHROMA_LOCATION_MIDPOINT"
        },
        {
          "vuid": "format",
          "text": " format must represent unsigned normalized values (i.e. the format must be a UNORM format)"
        },
        {
          "vuid": "None",
          "text": " If the format has a _422 or _420 suffix:"
        },
        {
          "vuid": "ycbcrModel",
          "text": " If ycbcrModel is not VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY, then components.r, components.g, and components.b must correspond to channels of the format; that is, components.r, components.g, and components.b must not be VK_COMPONENT_SWIZZLE_ZERO or VK_COMPONENT_SWIZZLE_ONE, and must not correspond to a channel which contains zero or one as a consequence of textures-conversion-to-rgba,conversion to RGBA"
        },
        {
          "vuid": "forceExplicitReconstruction",
          "text": " If the format does not support VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT, forceExplicitReconstruction must be FALSE"
        },
        {
          "vuid": "chromaFilter",
          "text": " If the format does not support VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT, chromaFilter must be VK_FILTER_NEAREST"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkExternalFormatANDROID"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "ycbcrModel",
          "text": " ycbcrModel must be a valid VkSamplerYcbcrModelConversion value"
        },
        {
          "vuid": "ycbcrRange",
          "text": " ycbcrRange must be a valid VkSamplerYcbcrRange value"
        },
        {
          "vuid": "components",
          "text": " components must be a valid VkComponentMapping structure"
        },
        {
          "vuid": "xChromaOffset",
          "text": " xChromaOffset must be a valid VkChromaLocation value"
        },
        {
          "vuid": "yChromaOffset",
          "text": " yChromaOffset must be a valid VkChromaLocation value"
        },
        {
          "vuid": "chromaFilter",
          "text": " chromaFilter must be a valid VkFilter value"
        }
      ]
    },
    "vkDestroySamplerYcbcrConversion": {
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "ycbcrConversion",
          "text": " If ycbcrConversion is not VK_NULL_HANDLE, ycbcrConversion must be a valid VkSamplerYcbcrConversion handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "ycbcrConversion",
          "text": " If ycbcrConversion is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreateDescriptorSetLayout": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkDescriptorSetLayoutCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSetLayout",
          "text": " pSetLayout must be a valid pointer to a VkDescriptorSetLayout handle"
        }
      ]
    },
    "VkDescriptorSetLayoutCreateInfo": {
      "core": [
        {
          "vuid": "binding",
          "text": " The VkDescriptorSetLayoutBinding::binding members of the elements of the pBindings array must each have different values."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkDescriptorSetLayoutBindingFlagsCreateInfoEXT"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkDescriptorSetLayoutCreateFlagBits values"
        },
        {
          "vuid": "pBindings",
          "text": " If bindingCount is not 0, pBindings must be a valid pointer to an array of bindingCount valid VkDescriptorSetLayoutBinding structures"
        }
      ],
      "(VK_KHR_push_descriptor)": [
        {
          "vuid": "flags",
          "text": " If flags contains VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, then all elements of pBindings must not have a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC"
        },
        {
          "vuid": "flags",
          "text": " If flags contains VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, then the total number of elements of all bindings must be less than or equal to VkPhysicalDevicePushDescriptorPropertiesKHR::maxPushDescriptors"
        }
      ],
      "(VK_KHR_push_descriptor)+(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "flags",
          "text": " If flags contains VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, then all elements of pBindings must not have a descriptorType of VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT"
        }
      ],
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "flags",
          "text": " If any binding has the VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT bit set, flags must include VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT"
        },
        {
          "vuid": "descriptorType",
          "text": " If any binding has the VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT bit set, then all bindings must not have descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC"
        }
      ]
    },
    "VkDescriptorSetLayoutBinding": {
      "core": [
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLER or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and descriptorCount is not 0 and pImmutableSamplers is not NULL, pImmutableSamplers must be a valid pointer to an array of descriptorCount valid VkSampler handles"
        },
        {
          "vuid": "descriptorCount",
          "text": " If descriptorCount is not 0, stageFlags must be a valid combination of VkShaderStageFlagBits values"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT and descriptorCount is not 0, then stageFlags must be 0 or VK_SHADER_STAGE_FRAGMENT_BIT"
        },
        {
          "vuid": "descriptorType",
          "text": " descriptorType must be a valid VkDescriptorType value"
        }
      ],
      "(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT then descriptorCount must be a multiple of 4"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT then descriptorCount must be less than or equal to VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxInlineUniformBlockSize"
        }
      ]
    },
    "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT": {
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "bindingCount",
          "text": " If bindingCount is not zero, bindingCount must equal VkDescriptorSetLayoutCreateInfo::bindingCount"
        },
        {
          "vuid": "pBindingFlags",
          "text": " If an element of pBindingFlags includes VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT, then all other elements of VkDescriptorSetLayoutCreateInfo::pBindings must have a smaller value of binding"
        },
        {
          "vuid": "descriptorBindingUniformBufferUpdateAfterBind",
          "text": " If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUniformBufferUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT"
        },
        {
          "vuid": "descriptorBindingSampledImageUpdateAfterBind",
          "text": " If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingSampledImageUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_SAMPLER, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, or VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT"
        },
        {
          "vuid": "descriptorBindingStorageImageUpdateAfterBind",
          "text": " If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageImageUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_STORAGE_IMAGE must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT"
        },
        {
          "vuid": "descriptorBindingStorageBufferUpdateAfterBind",
          "text": " If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageBufferUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT"
        },
        {
          "vuid": "descriptorBindingUniformTexelBufferUpdateAfterBind",
          "text": " If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUniformTexelBufferUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT"
        },
        {
          "vuid": "descriptorBindingStorageTexelBufferUpdateAfterBind",
          "text": " If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageTexelBufferUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT"
        },
        {
          "vuid": "None",
          "text": " All bindings with descriptor type VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT"
        },
        {
          "vuid": "descriptorBindingUpdateUnusedWhilePending",
          "text": " If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUpdateUnusedWhilePending is not enabled, all elements of pBindingFlags must not include VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT"
        },
        {
          "vuid": "descriptorBindingPartiallyBound",
          "text": " If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingPartiallyBound is not enabled, all elements of pBindingFlags must not include VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT"
        },
        {
          "vuid": "descriptorBindingVariableDescriptorCount",
          "text": " If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingVariableDescriptorCount is not enabled, all elements of pBindingFlags must not include VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT"
        },
        {
          "vuid": "pBindingFlags",
          "text": " If an element of pBindingFlags includes VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT, that element’s descriptorType must not be VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT"
        },
        {
          "vuid": "pBindingFlags",
          "text": " If bindingCount is not 0, and pBindingFlags is not NULL, pBindingFlags must be a valid pointer to an array of bindingCount valid combinations of VkDescriptorBindingFlagBitsEXT values"
        }
      ],
      "(VK_EXT_descriptor_indexing)+(VK_KHR_push_descriptor)": [
        {
          "vuid": "flags",
          "text": " If VkDescriptorSetLayoutCreateInfo::flags includes VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, then all elements of pBindingFlags must not include VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT, VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT, or VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT"
        }
      ],
      "(VK_EXT_descriptor_indexing)+(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "descriptorBindingInlineUniformBlockUpdateAfterBind",
          "text": " If VkPhysicalDeviceInlineUniformBlockFeatureEXT::descriptorBindingInlineUniformBlockUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT"
        }
      ]
    },
    "vkGetDescriptorSetLayoutSupport": {
      "(VK_VERSION_1_1,VK_KHR_maintenance3)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkDescriptorSetLayoutCreateInfo structure"
        },
        {
          "vuid": "pSupport",
          "text": " pSupport must be a valid pointer to a VkDescriptorSetLayoutSupport structure"
        }
      ]
    },
    "VkDescriptorSetLayoutSupport": {
      "(VK_VERSION_1_1,VK_KHR_maintenance3)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkDescriptorSetVariableDescriptorCountLayoutSupportEXT"
        }
      ]
    },
    "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT": {
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT"
        }
      ]
    },
    "vkDestroyDescriptorSetLayout": {
      "core": [
        {
          "vuid": "descriptorSetLayout",
          "text": " If VkAllocationCallbacks were provided when descriptorSetLayout was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "descriptorSetLayout",
          "text": " If no VkAllocationCallbacks were provided when descriptorSetLayout was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "descriptorSetLayout",
          "text": " If descriptorSetLayout is not VK_NULL_HANDLE, descriptorSetLayout must be a valid VkDescriptorSetLayout handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "descriptorSetLayout",
          "text": " If descriptorSetLayout is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreatePipelineLayout": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkPipelineLayoutCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pPipelineLayout",
          "text": " pPipelineLayout must be a valid pointer to a VkPipelineLayout handle"
        }
      ]
    },
    "VkPipelineLayoutCreateInfo": {
      "core": [
        {
          "vuid": "setLayoutCount",
          "text": " setLayoutCount must be less than or equal to VkPhysicalDeviceLimits::maxBoundDescriptorSets"
        },
        {
          "vuid": "pPushConstantRanges",
          "text": " Any two elements of pPushConstantRanges must not include the same stage in stageFlags"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pSetLayouts",
          "text": " If setLayoutCount is not 0, pSetLayouts must be a valid pointer to an array of setLayoutCount valid VkDescriptorSetLayout handles"
        },
        {
          "vuid": "pPushConstantRanges",
          "text": " If pushConstantRangeCount is not 0, pPushConstantRanges must be a valid pointer to an array of pushConstantRangeCount valid VkPushConstantRange structures"
        }
      ],
      "!(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible to any shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSamplers"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER and VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible to any shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorUniformBuffers"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER and VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible to any shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible to any shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible to any shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorStorageImages"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorInputAttachments"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetSamplers"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffers"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffersDynamic"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffers"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffersDynamic"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetSampledImages"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageImages"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetInputAttachments"
        }
      ],
      "!(VK_EXT_descriptor_indexing)+(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "descriptorType",
          "text": " The total number of bindings with a descriptorType of VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxPerStageDescriptorInlineUniformBlocks"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of bindings with a descriptorType of VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxDescriptorSetInlineUniformBlocks"
        }
      ],
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSamplers"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER and VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorUniformBuffers"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_BUFFER and VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorStorageImages"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorInputAttachments"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindSamplers"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER and VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindUniformBuffers"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_BUFFER and VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindStorageBuffers"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindSampledImages"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindStorageImages"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindInputAttachments"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetSamplers"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffers"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffersDynamic"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffers"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffersDynamic"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetSampledImages"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageImages"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetInputAttachments"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindSamplers"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindUniformBuffers"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageBuffers"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindSampledImages"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageImages"
        },
        {
          "vuid": "pSetLayouts",
          "text": " The total number of descriptors of the type VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindInputAttachments"
        }
      ],
      "(VK_EXT_descriptor_indexing)+(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "descriptorType",
          "text": " The total number of bindings in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxPerStageDescriptorInlineUniformBlocks"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of bindings with a descriptorType of VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of bindings in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxDescriptorSetInlineUniformBlocks"
        },
        {
          "vuid": "descriptorType",
          "text": " The total number of bindings with a descriptorType of VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceInlineUniformBlockPropertiesEXT::maxDescriptorSetUpdateAfterBindInlineUniformBlocks"
        }
      ],
      "(VK_KHR_push_descriptor)": [
        {
          "vuid": "pSetLayouts",
          "text": " pSetLayouts must not contain more than one descriptor set layout that was created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR set"
        }
      ]
    },
    "VkPushConstantRange": {
      "core": [
        {
          "vuid": "offset",
          "text": " offset must be less than VkPhysicalDeviceLimits::maxPushConstantsSize"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "size",
          "text": " size must be greater than 0"
        },
        {
          "vuid": "size",
          "text": " size must be a multiple of 4"
        },
        {
          "vuid": "size",
          "text": " size must be less than or equal to VkPhysicalDeviceLimits::maxPushConstantsSize minus offset"
        },
        {
          "vuid": "stageFlags",
          "text": " stageFlags must be a valid combination of VkShaderStageFlagBits values"
        },
        {
          "vuid": "stageFlags",
          "text": " stageFlags must not be 0"
        }
      ]
    },
    "vkDestroyPipelineLayout": {
      "core": [
        {
          "vuid": "pipelineLayout",
          "text": " If VkAllocationCallbacks were provided when pipelineLayout was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "pipelineLayout",
          "text": " If no VkAllocationCallbacks were provided when pipelineLayout was created, pAllocator must be NULL"
        },
        {
          "vuid": "pipelineLayout",
          "text": " pipelineLayout must not have been passed to any vkCmd* command for any command buffers that are still in the commandbuffers-lifecycle, recording state when vkDestroyPipelineLayout is called"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pipelineLayout",
          "text": " If pipelineLayout is not VK_NULL_HANDLE, pipelineLayout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pipelineLayout",
          "text": " If pipelineLayout is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCreateDescriptorPool": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkDescriptorPoolCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pDescriptorPool",
          "text": " pDescriptorPool must be a valid pointer to a VkDescriptorPool handle"
        }
      ]
    },
    "VkDescriptorPoolCreateInfo": {
      "core": [
        {
          "vuid": "maxSets",
          "text": " maxSets must be greater than 0"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkDescriptorPoolInlineUniformBlockCreateInfoEXT"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkDescriptorPoolCreateFlagBits values"
        },
        {
          "vuid": "pPoolSizes",
          "text": " pPoolSizes must be a valid pointer to an array of poolSizeCount valid VkDescriptorPoolSize structures"
        },
        {
          "vuid": "poolSizeCount",
          "text": " poolSizeCount must be greater than 0"
        }
      ]
    },
    "VkDescriptorPoolInlineUniformBlockCreateInfoEXT": {
      "(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT"
        }
      ]
    },
    "VkDescriptorPoolSize": {
      "core": [
        {
          "vuid": "descriptorCount",
          "text": " descriptorCount must be greater than 0"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkDescriptorType value"
        }
      ],
      "(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "type",
          "text": " If type is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT then descriptorCount must be a multiple of 4"
        }
      ]
    },
    "vkDestroyDescriptorPool": {
      "core": [
        {
          "vuid": "descriptorPool",
          "text": " All submitted commands that refer to descriptorPool (via any allocated descriptor sets) must have completed execution"
        },
        {
          "vuid": "descriptorPool",
          "text": " If VkAllocationCallbacks were provided when descriptorPool was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "descriptorPool",
          "text": " If no VkAllocationCallbacks were provided when descriptorPool was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "descriptorPool",
          "text": " If descriptorPool is not VK_NULL_HANDLE, descriptorPool must be a valid VkDescriptorPool handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "descriptorPool",
          "text": " If descriptorPool is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkAllocateDescriptorSets": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pAllocateInfo",
          "text": " pAllocateInfo must be a valid pointer to a valid VkDescriptorSetAllocateInfo structure"
        },
        {
          "vuid": "pDescriptorSets",
          "text": " pDescriptorSets must be a valid pointer to an array of pAllocateInfo::descriptorSetCount VkDescriptorSet handles"
        }
      ]
    },
    "VkDescriptorSetAllocateInfo": {
      "!(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "descriptorSetCount",
          "text": " descriptorSetCount must not be greater than the number of sets that are currently available for allocation in descriptorPool"
        },
        {
          "vuid": "descriptorPool",
          "text": " descriptorPool must have enough free descriptor capacity remaining to allocate the descriptor sets of the specified layouts"
        }
      ],
      "(VK_KHR_push_descriptor)": [
        {
          "vuid": "pSetLayouts",
          "text": " Each element of pSetLayouts must not have been created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR set"
        }
      ],
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "pSetLayouts",
          "text": " If any element of pSetLayouts was created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set, descriptorPool must have been created with the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT flag set"
        }
      ],
      "core": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkDescriptorSetVariableDescriptorCountAllocateInfoEXT"
        },
        {
          "vuid": "descriptorPool",
          "text": " descriptorPool must be a valid VkDescriptorPool handle"
        },
        {
          "vuid": "pSetLayouts",
          "text": " pSetLayouts must be a valid pointer to an array of descriptorSetCount valid VkDescriptorSetLayout handles"
        },
        {
          "vuid": "descriptorSetCount",
          "text": " descriptorSetCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of descriptorPool, and the elements of pSetLayouts must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT": {
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "descriptorSetCount",
          "text": " If descriptorSetCount is not zero, descriptorSetCount must equal VkDescriptorSetAllocateInfo::descriptorSetCount"
        },
        {
          "vuid": "pSetLayouts",
          "text": " If VkDescriptorSetAllocateInfo::pSetLayouts[i] has a variable descriptor count binding, then pDescriptorCounts[i] must be less than or equal to the descriptor count specified for that binding when the descriptor set layout was created."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT"
        },
        {
          "vuid": "pDescriptorCounts",
          "text": " If descriptorSetCount is not 0, pDescriptorCounts must be a valid pointer to an array of descriptorSetCount uint32_t values"
        }
      ]
    },
    "vkFreeDescriptorSets": {
      "core": [
        {
          "vuid": "pDescriptorSets",
          "text": " All submitted commands that refer to any element of pDescriptorSets must have completed execution"
        },
        {
          "vuid": "pDescriptorSets",
          "text": " pDescriptorSets must be a valid pointer to an array of descriptorSetCount VkDescriptorSet handles, each element of which must either be a valid handle or VK_NULL_HANDLE"
        },
        {
          "vuid": "pDescriptorSets",
          "text": " Each valid handle in pDescriptorSets must have been allocated from descriptorPool"
        },
        {
          "vuid": "descriptorPool",
          "text": " descriptorPool must have been created with the VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT flag"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "descriptorPool",
          "text": " descriptorPool must be a valid VkDescriptorPool handle"
        },
        {
          "vuid": "descriptorSetCount",
          "text": " descriptorSetCount must be greater than 0"
        },
        {
          "vuid": "descriptorPool",
          "text": " descriptorPool must have been created, allocated, or retrieved from device"
        },
        {
          "vuid": "pDescriptorSets",
          "text": " Each element of pDescriptorSets that is a valid handle must have been created, allocated, or retrieved from descriptorPool"
        }
      ]
    },
    "vkResetDescriptorPool": {
      "core": [
        {
          "vuid": "descriptorPool",
          "text": " All uses of descriptorPool (via any allocated descriptor sets) must have completed execution"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "descriptorPool",
          "text": " descriptorPool must be a valid VkDescriptorPool handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "descriptorPool",
          "text": " descriptorPool must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkUpdateDescriptorSets": {
      "!(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "dstSet",
          "text": " The dstSet member of each element of pDescriptorWrites or pDescriptorCopies must not be used by any command that was recorded to a command buffer which is in the commandbuffers-lifecycle, pending state."
        }
      ],
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "None",
          "text": " Descriptor bindings updated by this command which were created without the VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT or VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT bits set must not be used by any command that was recorded to a command buffer which is in the commandbuffers-lifecycle,pending state."
        }
      ],
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pDescriptorWrites",
          "text": " If descriptorWriteCount is not 0, pDescriptorWrites must be a valid pointer to an array of descriptorWriteCount valid VkWriteDescriptorSet structures"
        },
        {
          "vuid": "pDescriptorCopies",
          "text": " If descriptorCopyCount is not 0, pDescriptorCopies must be a valid pointer to an array of descriptorCopyCount valid VkCopyDescriptorSet structures"
        }
      ]
    },
    "VkWriteDescriptorSet": {
      "core": [
        {
          "vuid": "dstBinding",
          "text": " dstBinding must be less than or equal to the maximum value of binding of all VkDescriptorSetLayoutBinding structures specified when dstSet’s descriptor set layout was created"
        },
        {
          "vuid": "dstBinding",
          "text": " dstBinding must be a binding with a non-zero descriptorCount"
        },
        {
          "vuid": "descriptorCount",
          "text": " All consecutive bindings updated via a single VkWriteDescriptorSet structure, except those with a descriptorCount of zero, must have identical descriptorType and stageFlags."
        },
        {
          "vuid": "descriptorCount",
          "text": " All consecutive bindings updated via a single VkWriteDescriptorSet structure, except those with a descriptorCount of zero, must all either use immutable samplers or must all not use immutable samplers."
        },
        {
          "vuid": "descriptorType",
          "text": " descriptorType must match the type of dstBinding within dstSet"
        },
        {
          "vuid": "dstSet",
          "text": " dstSet must be a valid VkDescriptorSet handle"
        },
        {
          "vuid": "dstArrayElement",
          "text": " The sum of dstArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding specified by dstBinding, and all applicable consecutive bindings, as described by descriptorsets-updates-consecutive"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLER, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, pImageInfo must be a valid pointer to an array of descriptorCount valid VkDescriptorImageInfo structures"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, pTexelBufferView must be a valid pointer to an array of descriptorCount valid VkBufferView handles"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, pBufferInfo must be a valid pointer to an array of descriptorCount valid VkDescriptorBufferInfo structures"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLER or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and dstSet was not allocated with a layout that included immutable samplers for dstBinding with descriptorType, the sampler member of each element of pImageInfo must be a valid VkSampler object"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView and imageLayout members of each element of pImageInfo must be a valid VkImageView and VkImageLayout, respectively"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, then the imageView member of each pImageInfo element must have been created without a VkSamplerYcbcrConversionInfo structure in its pNext chain"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and if any element of pImageInfo has a imageView member that was created with a VkSamplerYcbcrConversionInfo structure in its pNext chain, then dstSet must have been allocated with a layout that included immutable samplers for dstBinding"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and dstSet was allocated with a layout that included immutable samplers for dstBinding, then the imageView member of each element of pImageInfo which corresponds to an immutable sampler that enables samplers-YCbCr-conversion,sampler Y’C<sub>B</sub>C<sub>R</sub> conversion must have been created with a VkSamplerYcbcrConversionInfo structure in its pNext chain with an identically defined VkSamplerYcbcrConversionInfo to the corresponding immutable sampler"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, for each descriptor that will be accessed via load or store operations the imageLayout member for corresponding elements of pImageInfo must be VK_IMAGE_LAYOUT_GENERAL"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the offset member of each element of pBufferInfo must be a multiple of VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the offset member of each element of pBufferInfo must be a multiple of VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, and the buffer member of any element of pBufferInfo is the handle of a non-sparse buffer, then that buffer must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the buffer member of each element of pBufferInfo must have been created with VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT set"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the buffer member of each element of pBufferInfo must have been created with VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the range member of each element of pBufferInfo, or the effective range if range is VK_WHOLE_SIZE, must be less than or equal to VkPhysicalDeviceLimits::maxUniformBufferRange"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the range member of each element of pBufferInfo, or the effective range if range is VK_WHOLE_SIZE, must be less than or equal to VkPhysicalDeviceLimits::maxStorageBufferRange"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, the VkBuffer that each element of pTexelBufferView was created from must have been created with VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT set"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, the VkBuffer that each element of pTexelBufferView was created from must have been created with VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT set"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView member of each element of pImageInfo must have been created with the identity swizzle"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, the imageView member of each element of pImageInfo must have been created with VK_IMAGE_USAGE_SAMPLED_BIT set"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, the imageLayout member of each element of pImageInfo must be VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView member of each element of pImageInfo must have been created with VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, the imageView member of each element of pImageInfo must have been created with VK_IMAGE_USAGE_STORAGE_BIT set"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDescriptorAccelerationStructureInfoNVX or VkWriteDescriptorSetInlineUniformBlockEXT"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "descriptorType",
          "text": " descriptorType must be a valid VkDescriptorType value"
        },
        {
          "vuid": "descriptorCount",
          "text": " descriptorCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of dstSet, and the elements of pTexelBufferView that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, dstArrayElement must be an integer multiple of 4"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, descriptorCount must be an integer multiple of 4"
        },
        {
          "vuid": "descriptorType",
          "text": " If descriptorType is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, the pNext chain must include a VkWriteDescriptorSetInlineUniformBlockEXT structure whose dataSize member equals descriptorCount"
        }
      ],
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "descriptorCount",
          "text": " All consecutive bindings updated via a single VkWriteDescriptorSet structure, except those with a descriptorCount of zero, must have identical VkDescriptorBindingFlagBitsEXT."
        }
      ]
    },
    "VkDescriptorBufferInfo": {
      "core": [
        {
          "vuid": "offset",
          "text": " offset must be less than the size of buffer"
        },
        {
          "vuid": "range",
          "text": " If range is not equal to VK_WHOLE_SIZE, range must be greater than 0"
        },
        {
          "vuid": "range",
          "text": " If range is not equal to VK_WHOLE_SIZE, range must be less than or equal to the size of buffer minus offset"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        }
      ]
    },
    "VkDescriptorImageInfo": {
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "imageView",
          "text": " imageView must not be 2D or 2D array image view created from a 3D image"
        }
      ],
      "core": [
        {
          "vuid": "imageView",
          "text": " If imageView is created from a depth/stencil image, the aspectMask used to create the imageView must include either VK_IMAGE_ASPECT_DEPTH_BIT or VK_IMAGE_ASPECT_STENCIL_BIT but not both."
        },
        {
          "vuid": "imageLayout",
          "text": " imageLayout must match the actual VkImageLayout of each subresource accessible from imageView at the time this descriptor is accessed as defined by the resources-image-layouts-matching-rule, image layout matching rules"
        },
        {
          "vuid": "commonparent",
          "text": " Both of imageView, and sampler that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "sampler",
          "text": " If sampler is used and the VkFormat of the image is a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format, the image must have been created with VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT, and the aspectMask of the imageView must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT or (for three-plane formats only) VK_IMAGE_ASPECT_PLANE_2_BIT"
        }
      ]
    },
    "VkWriteDescriptorSetInlineUniformBlockEXT": {
      "(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "dataSize",
          "text": " dataSize must be an integer multiple of 4"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT"
        },
        {
          "vuid": "pData",
          "text": " pData must be a valid pointer to an array of dataSize bytes"
        },
        {
          "vuid": "dataSize",
          "text": " dataSize must be greater than 0"
        }
      ]
    },
    "VkCopyDescriptorSet": {
      "core": [
        {
          "vuid": "srcBinding",
          "text": " srcBinding must be a valid binding within srcSet"
        },
        {
          "vuid": "srcArrayElement",
          "text": " The sum of srcArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding specified by srcBinding, and all applicable consecutive bindings, as described by descriptorsets-updates-consecutive"
        },
        {
          "vuid": "dstBinding",
          "text": " dstBinding must be a valid binding within dstSet"
        },
        {
          "vuid": "dstArrayElement",
          "text": " The sum of dstArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding specified by dstBinding, and all applicable consecutive bindings, as described by descriptorsets-updates-consecutive"
        },
        {
          "vuid": "srcSet",
          "text": " If srcSet is equal to dstSet, then the source and destination ranges of descriptors must not overlap, where the ranges may include array elements from consecutive bindings as described by descriptorsets-updates-consecutive"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "srcSet",
          "text": " srcSet must be a valid VkDescriptorSet handle"
        },
        {
          "vuid": "dstSet",
          "text": " dstSet must be a valid VkDescriptorSet handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of dstSet, and srcSet must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "srcBinding",
          "text": " If the descriptor type of the descriptor set binding specified by srcBinding is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, srcArrayElement must be an integer multiple of 4"
        },
        {
          "vuid": "dstBinding",
          "text": " If the descriptor type of the descriptor set binding specified by dstBinding is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, dstArrayElement must be an integer multiple of 4"
        },
        {
          "vuid": "srcBinding",
          "text": " If the descriptor type of the descriptor set binding specified by either srcBinding or dstBinding is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, descriptorCount must be an integer multiple of 4"
        }
      ],
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "srcSet",
          "text": " If srcSet’s layout was created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT flag set, then dstSet’s layout must also have been created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT flag set"
        },
        {
          "vuid": "srcSet",
          "text": " If srcSet’s layout was created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT flag set, then dstSet’s layout must also have been created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT flag set"
        },
        {
          "vuid": "srcSet",
          "text": " If the descriptor pool from which srcSet was allocated was created with the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT flag set, then the descriptor pool from which dstSet was allocated must also have been created with the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT flag set"
        },
        {
          "vuid": "srcSet",
          "text": " If the descriptor pool from which srcSet was allocated was created without the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT flag set, then the descriptor pool from which dstSet was allocated must also have been created without the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT flag set"
        }
      ]
    },
    "vkCreateDescriptorUpdateTemplate": {
      "(VK_VERSION_1_1,VK_KHR_descriptor_update_template)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkDescriptorUpdateTemplateCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pDescriptorUpdateTemplate",
          "text": " pDescriptorUpdateTemplate must be a valid pointer to a VkDescriptorUpdateTemplate handle"
        }
      ]
    },
    "VkDescriptorUpdateTemplateCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_descriptor_update_template)": [
        {
          "vuid": "templateType",
          "text": " If templateType is VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET, descriptorSetLayout must be a valid VkDescriptorSetLayout handle"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pDescriptorUpdateEntries",
          "text": " pDescriptorUpdateEntries must be a valid pointer to an array of descriptorUpdateEntryCount valid VkDescriptorUpdateTemplateEntry structures"
        },
        {
          "vuid": "templateType",
          "text": " templateType must be a valid VkDescriptorUpdateTemplateType value"
        },
        {
          "vuid": "descriptorSetLayout",
          "text": " If descriptorSetLayout is not VK_NULL_HANDLE, descriptorSetLayout must be a valid VkDescriptorSetLayout handle"
        },
        {
          "vuid": "descriptorUpdateEntryCount",
          "text": " descriptorUpdateEntryCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of descriptorSetLayout, and pipelineLayout that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_descriptor_update_template)+(VK_KHR_push_descriptor)": [
        {
          "vuid": "templateType",
          "text": " If templateType is VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, pipelineBindPoint must be a valid VkPipelineBindPoint value"
        },
        {
          "vuid": "templateType",
          "text": " If templateType is VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, pipelineLayout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "templateType",
          "text": " If templateType is VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, set must be the unique set number in the pipeline layout that uses a descriptor set layout that was created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR"
        }
      ]
    },
    "VkDescriptorUpdateTemplateEntry": {
      "(VK_VERSION_1_1,VK_KHR_descriptor_update_template)": [
        {
          "vuid": "dstBinding",
          "text": " dstBinding must be a valid binding in the descriptor set layout implicitly specified when using a descriptor update template to update descriptors."
        },
        {
          "vuid": "dstArrayElement",
          "text": " dstArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding implicitly specified when using a descriptor update template to update descriptors, and all applicable consecutive bindings, as described by descriptorsets-updates-consecutive"
        },
        {
          "vuid": "descriptorType",
          "text": " descriptorType must be a valid VkDescriptorType value"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_descriptor_update_template)+(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "descriptor",
          "text": " If descriptor type is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, dstArrayElement must be an integer multiple of 4"
        },
        {
          "vuid": "descriptor",
          "text": " If descriptor type is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, descriptorCount must be an integer multiple of 4"
        }
      ]
    },
    "vkDestroyDescriptorUpdateTemplate": {
      "(VK_VERSION_1_1,VK_KHR_descriptor_update_template)": [
        {
          "vuid": "descriptorSetLayout",
          "text": " If VkAllocationCallbacks were provided when descriptorSetLayout was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "descriptorSetLayout",
          "text": " If no VkAllocationCallbacks were provided when descriptorSetLayout was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "descriptorUpdateTemplate",
          "text": " If descriptorUpdateTemplate is not VK_NULL_HANDLE, descriptorUpdateTemplate must be a valid VkDescriptorUpdateTemplate handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "descriptorUpdateTemplate",
          "text": " If descriptorUpdateTemplate is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkUpdateDescriptorSetWithTemplate": {
      "(VK_VERSION_1_1,VK_KHR_descriptor_update_template)": [
        {
          "vuid": "pData",
          "text": " pData must be a valid pointer to a memory that contains one or more valid instances of VkDescriptorImageInfo, VkDescriptorBufferInfo, or VkBufferView in a layout defined by descriptorUpdateTemplate when it was created with vkCreateDescriptorUpdateTemplate"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "descriptorSet",
          "text": " descriptorSet must be a valid VkDescriptorSet handle"
        },
        {
          "vuid": "descriptorUpdateTemplate",
          "text": " descriptorUpdateTemplate must be a valid VkDescriptorUpdateTemplate handle"
        },
        {
          "vuid": "descriptorUpdateTemplate",
          "text": " descriptorUpdateTemplate must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCmdBindDescriptorSets": {
      "core": [
        {
          "vuid": "pDescriptorSets",
          "text": " Each element of pDescriptorSets must have been allocated with a VkDescriptorSetLayout that matches (is the same as, or identically defined as) the VkDescriptorSetLayout at set n in layout, where n is the sum of firstSet and the index into pDescriptorSets"
        },
        {
          "vuid": "dynamicOffsetCount",
          "text": " dynamicOffsetCount must be equal to the total number of dynamic descriptors in pDescriptorSets"
        },
        {
          "vuid": "firstSet",
          "text": " The sum of firstSet and descriptorSetCount must be less than or equal to VkPipelineLayoutCreateInfo::setLayoutCount provided when layout was created"
        },
        {
          "vuid": "pipelineBindPoint",
          "text": " pipelineBindPoint must be supported by the commandBuffer’s parent VkCommandPool’s queue family"
        },
        {
          "vuid": "pDynamicOffsets",
          "text": " Each element of pDynamicOffsets which corresponds to a descriptor binding with type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC must be a multiple of VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment"
        },
        {
          "vuid": "pDynamicOffsets",
          "text": " Each element of pDynamicOffsets which corresponds to a descriptor binding with type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC must be a multiple of VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment"
        },
        {
          "vuid": "pDescriptorSets",
          "text": " For each dynamic uniform or storage buffer binding in pDescriptorSets, the sum of the effective offset, as defined above, and the range of the binding must be less than or equal to the size of the buffer"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pipelineBindPoint",
          "text": " pipelineBindPoint must be a valid VkPipelineBindPoint value"
        },
        {
          "vuid": "layout",
          "text": " layout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "pDescriptorSets",
          "text": " pDescriptorSets must be a valid pointer to an array of descriptorSetCount valid VkDescriptorSet handles"
        },
        {
          "vuid": "pDynamicOffsets",
          "text": " If dynamicOffsetCount is not 0, pDynamicOffsets must be a valid pointer to an array of dynamicOffsetCount uint32_t values"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "descriptorSetCount",
          "text": " descriptorSetCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Each of commandBuffer, layout, and the elements of pDescriptorSets must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdPushDescriptorSetKHR": {
      "(VK_KHR_push_descriptor)": [
        {
          "vuid": "pipelineBindPoint",
          "text": " pipelineBindPoint must be supported by the commandBuffer’s parent VkCommandPool’s queue family"
        },
        {
          "vuid": "set",
          "text": " set must be less than VkPipelineLayoutCreateInfo::setLayoutCount provided when layout was created"
        },
        {
          "vuid": "set",
          "text": " set must be the unique set number in the pipeline layout that uses a descriptor set layout that was created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pipelineBindPoint",
          "text": " pipelineBindPoint must be a valid VkPipelineBindPoint value"
        },
        {
          "vuid": "layout",
          "text": " layout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "pDescriptorWrites",
          "text": " pDescriptorWrites must be a valid pointer to an array of descriptorWriteCount valid VkWriteDescriptorSet structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "descriptorWriteCount",
          "text": " descriptorWriteCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and layout must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdPushDescriptorSetWithTemplateKHR": {
      "(VK_KHR_push_descriptor)+(VK_VERSION_1_1,VK_KHR_descriptor_update_template)": [
        {
          "vuid": "commandBuffer",
          "text": " The pipelineBindPoint specified during the creation of the descriptor update template must be supported by the commandBuffer’s parent VkCommandPool’s queue family"
        },
        {
          "vuid": "pData",
          "text": " pData must be a valid pointer to a memory that contains one or more valid instances of VkDescriptorImageInfo, VkDescriptorBufferInfo, or VkBufferView in a layout defined by descriptorUpdateTemplate when it was created with vkCreateDescriptorUpdateTemplateKHR"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "descriptorUpdateTemplate",
          "text": " descriptorUpdateTemplate must be a valid VkDescriptorUpdateTemplate handle"
        },
        {
          "vuid": "layout",
          "text": " layout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "commonparent",
          "text": " Each of commandBuffer, descriptorUpdateTemplate, and layout must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdPushConstants": {
      "core": [
        {
          "vuid": "offset",
          "text": " For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage"
        },
        {
          "vuid": "offset",
          "text": " For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range’s VkPushConstantRange::stageFlags"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "size",
          "text": " size must be a multiple of 4"
        },
        {
          "vuid": "offset",
          "text": " offset must be less than VkPhysicalDeviceLimits::maxPushConstantsSize"
        },
        {
          "vuid": "size",
          "text": " size must be less than or equal to VkPhysicalDeviceLimits::maxPushConstantsSize minus offset"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "layout",
          "text": " layout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "stageFlags",
          "text": " stageFlags must be a valid combination of VkShaderStageFlagBits values"
        },
        {
          "vuid": "stageFlags",
          "text": " stageFlags must not be 0"
        },
        {
          "vuid": "pValues",
          "text": " pValues must be a valid pointer to an array of size bytes"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "size",
          "text": " size must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and layout must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkDescriptorAccelerationStructureInfoNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "accelerationStructureCount",
          "text": " accelerationStructureCount must be equal to descriptorCount in the extended structure."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_ACCELERATION_STRUCTURE_INFO_NVX"
        },
        {
          "vuid": "pAccelerationStructures",
          "text": " pAccelerationStructures must be a valid pointer to an array of accelerationStructureCount valid VkAccelerationStructureNVX handles"
        },
        {
          "vuid": "accelerationStructureCount",
          "text": " accelerationStructureCount must be greater than 0"
        }
      ]
    },
    "vkCreateQueryPool": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkQueryPoolCreateInfo structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pQueryPool",
          "text": " pQueryPool must be a valid pointer to a VkQueryPool handle"
        }
      ]
    },
    "VkQueryPoolCreateInfo": {
      "core": [
        {
          "vuid": "queryType",
          "text": " If the features-features-pipelineStatisticsQuery,pipeline statistics queries feature is not enabled, queryType must not be VK_QUERY_TYPE_PIPELINE_STATISTICS"
        },
        {
          "vuid": "queryType",
          "text": " If queryType is VK_QUERY_TYPE_PIPELINE_STATISTICS, pipelineStatistics must be a valid combination of VkQueryPipelineStatisticFlagBits values"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "queryType",
          "text": " queryType must be a valid VkQueryType value"
        }
      ]
    },
    "vkDestroyQueryPool": {
      "core": [
        {
          "vuid": "queryPool",
          "text": " All submitted commands that refer to queryPool must have completed execution"
        },
        {
          "vuid": "queryPool",
          "text": " If VkAllocationCallbacks were provided when queryPool was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "queryPool",
          "text": " If no VkAllocationCallbacks were provided when queryPool was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "queryPool",
          "text": " If queryPool is not VK_NULL_HANDLE, queryPool must be a valid VkQueryPool handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "queryPool",
          "text": " If queryPool is a valid handle, it must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCmdResetQueryPool": {
      "core": [
        {
          "vuid": "firstQuery",
          "text": " firstQuery must be less than the number of queries in queryPool"
        },
        {
          "vuid": "firstQuery",
          "text": " The sum of firstQuery and queryCount must be less than or equal to the number of queries in queryPool"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "queryPool",
          "text": " queryPool must be a valid VkQueryPool handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdBeginQuery": {
      "core": [
        {
          "vuid": "queryPool",
          "text": " queryPool must have been created with a queryType that differs from that of any queries that are queries-operation-active,active within commandBuffer"
        },
        {
          "vuid": "None",
          "text": " All queries used by the command must be unavailable"
        },
        {
          "vuid": "queryType",
          "text": " If the features-features-occlusionQueryPrecise,precise occlusion queries feature is not enabled, or the queryType used to create queryPool was not VK_QUERY_TYPE_OCCLUSION, flags must not contain VK_QUERY_CONTROL_PRECISE_BIT"
        },
        {
          "vuid": "query",
          "text": " query must be less than the number of queries in queryPool"
        },
        {
          "vuid": "queryType",
          "text": " If the queryType used to create queryPool was VK_QUERY_TYPE_OCCLUSION, the VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "queryType",
          "text": " If the queryType used to create queryPool was VK_QUERY_TYPE_PIPELINE_STATISTICS and any of the pipelineStatistics indicate graphics operations, the VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "queryType",
          "text": " If the queryType used to create queryPool was VK_QUERY_TYPE_PIPELINE_STATISTICS and any of the pipelineStatistics indicate compute operations, the VkCommandPool that commandBuffer was allocated from must support compute operations"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "queryPool",
          "text": " queryPool must be a valid VkQueryPool handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkQueryControlFlagBits values"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must not be a protected command buffer"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "query",
          "text": " If vkCmdBeginQuery is called within a render pass instance, the sum of query and the number of bits set in the current subpass’s view mask must be less than or equal to the number of queries in queryPool"
        }
      ]
    },
    "vkCmdEndQuery": {
      "core": [
        {
          "vuid": "None",
          "text": " All queries used by the command must be queries-operation-active,active"
        },
        {
          "vuid": "query",
          "text": " query must be less than the number of queries in queryPool"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "queryPool",
          "text": " queryPool must be a valid VkQueryPool handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must not be a protected command buffer"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "query",
          "text": " If vkCmdEndQuery is called within a render pass instance, the sum of query and the number of bits set in the current subpass’s view mask must be less than or equal to the number of queries in queryPool"
        }
      ]
    },
    "vkGetQueryPoolResults": {
      "core": [
        {
          "vuid": "firstQuery",
          "text": " firstQuery must be less than the number of queries in queryPool"
        },
        {
          "vuid": "flags",
          "text": " If VK_QUERY_RESULT_64_BIT is not set in flags then pData and stride must be multiples of 4"
        },
        {
          "vuid": "flags",
          "text": " If VK_QUERY_RESULT_64_BIT is set in flags then pData and stride must be multiples of 8"
        },
        {
          "vuid": "firstQuery",
          "text": " The sum of firstQuery and queryCount must be less than or equal to the number of queries in queryPool"
        },
        {
          "vuid": "dataSize",
          "text": " dataSize must be large enough to contain the result of each query, as described queries-operation-memorylayout,here"
        },
        {
          "vuid": "queryType",
          "text": " If the queryType used to create queryPool was VK_QUERY_TYPE_TIMESTAMP, flags must not contain VK_QUERY_RESULT_PARTIAL_BIT"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "queryPool",
          "text": " queryPool must be a valid VkQueryPool handle"
        },
        {
          "vuid": "pData",
          "text": " pData must be a valid pointer to an array of dataSize bytes"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkQueryResultFlagBits values"
        },
        {
          "vuid": "dataSize",
          "text": " dataSize must be greater than 0"
        },
        {
          "vuid": "queryPool",
          "text": " queryPool must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCmdCopyQueryPoolResults": {
      "core": [
        {
          "vuid": "dstOffset",
          "text": " dstOffset must be less than the size of dstBuffer"
        },
        {
          "vuid": "firstQuery",
          "text": " firstQuery must be less than the number of queries in queryPool"
        },
        {
          "vuid": "firstQuery",
          "text": " The sum of firstQuery and queryCount must be less than or equal to the number of queries in queryPool"
        },
        {
          "vuid": "flags",
          "text": " If VK_QUERY_RESULT_64_BIT is not set in flags then dstOffset and stride must be multiples of 4"
        },
        {
          "vuid": "flags",
          "text": " If VK_QUERY_RESULT_64_BIT is set in flags then dstOffset and stride must be multiples of 8"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must have enough storage, from dstOffset, to contain the result of each query, as described queries-operation-memorylayout,here"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "dstBuffer",
          "text": " If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "queryType",
          "text": " If the queryType used to create queryPool was VK_QUERY_TYPE_TIMESTAMP, flags must not contain VK_QUERY_RESULT_PARTIAL_BIT"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "queryPool",
          "text": " queryPool must be a valid VkQueryPool handle"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkQueryResultFlagBits values"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Each of commandBuffer, dstBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdWriteTimestamp": {
      "core": [
        {
          "vuid": "queryPool",
          "text": " queryPool must have been created with a queryType of VK_QUERY_TYPE_TIMESTAMP"
        },
        {
          "vuid": "queryPool",
          "text": " The query identified by queryPool and query must be unavailable"
        },
        {
          "vuid": "timestampValidBits",
          "text": " The command pool’s queue family must support a non-zero timestampValidBits"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pipelineStage",
          "text": " pipelineStage must be a valid VkPipelineStageFlagBits value"
        },
        {
          "vuid": "queryPool",
          "text": " queryPool must be a valid VkQueryPool handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "None",
          "text": " All queries used by the command must be unavailable"
        },
        {
          "vuid": "query",
          "text": " If vkCmdWriteTimestamp is called within a render pass instance, the sum of query and the number of bits set in the current subpass’s view mask must be less than or equal to the number of queries in queryPool"
        }
      ]
    },
    "vkCmdClearColorImage": {
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "image",
          "text": " The resources-image-format-features,format features of image must contain VK_FORMAT_FEATURE_TRANSFER_DST_BIT."
        }
      ],
      "core": [
        {
          "vuid": "image",
          "text": " image must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "image",
          "text": " If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "imageLayout",
          "text": " imageLayout must specify the layout of the image subresource ranges of image specified in pRanges at the time this command is executed on a VkDevice"
        },
        {
          "vuid": "baseMipLevel",
          "text": " The VkImageSubresourceRange::baseMipLevel members of the elements of the pRanges array must each be less than the mipLevels specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "pRanges",
          "text": " For each VkImageSubresourceRange element of pRanges, if the levelCount member is not VK_REMAINING_MIP_LEVELS, then +baseMipLevel + levelCount+ must be less than the mipLevels specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "baseArrayLayer",
          "text": " The VkImageSubresourceRange::baseArrayLayer members of the elements of the pRanges array must each be less than the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "pRanges",
          "text": " For each VkImageSubresourceRange element of pRanges, if the layerCount member is not VK_REMAINING_ARRAY_LAYERS, then +baseArrayLayer + layerCount+ must be less than the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "image",
          "text": " image must not have a compressed or depth/stencil format"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "imageLayout",
          "text": " imageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "pColor",
          "text": " pColor must be a valid pointer to a valid VkClearColorValue union"
        },
        {
          "vuid": "pRanges",
          "text": " pRanges must be a valid pointer to an array of rangeCount valid VkImageSubresourceRange structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "rangeCount",
          "text": " rangeCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and image must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "image",
          "text": " image must not use a format listed in features-formats-requiring-sampler-ycbcr-conversion"
        }
      ],
      "!(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "imageLayout",
          "text": " imageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        }
      ],
      "(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "imageLayout",
          "text": " imageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, VK_IMAGE_LAYOUT_GENERAL, or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then image must not be a protected image"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then image must not be an unprotected image"
        }
      ]
    },
    "vkCmdClearDepthStencilImage": {
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "image",
          "text": " The resources-image-format-features,format features of image must contain VK_FORMAT_FEATURE_TRANSFER_DST_BIT."
        }
      ],
      "core": [
        {
          "vuid": "image",
          "text": " image must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "image",
          "text": " If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "imageLayout",
          "text": " imageLayout must specify the layout of the image subresource ranges of image specified in pRanges at the time this command is executed on a VkDevice"
        },
        {
          "vuid": "imageLayout",
          "text": " imageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        },
        {
          "vuid": "baseMipLevel",
          "text": " The VkImageSubresourceRange::baseMipLevel members of the elements of the pRanges array must each be less than the mipLevels specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "pRanges",
          "text": " For each VkImageSubresourceRange element of pRanges, if the levelCount member is not VK_REMAINING_MIP_LEVELS, then +baseMipLevel + levelCount+ must be less than the mipLevels specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "baseArrayLayer",
          "text": " The VkImageSubresourceRange::baseArrayLayer members of the elements of the pRanges array must each be less than the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "pRanges",
          "text": " For each VkImageSubresourceRange element of pRanges, if the layerCount member is not VK_REMAINING_ARRAY_LAYERS, then +baseArrayLayer + layerCount+ must be less than the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "image",
          "text": " image must have a depth/stencil format"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "imageLayout",
          "text": " imageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "pDepthStencil",
          "text": " pDepthStencil must be a valid pointer to a valid VkClearDepthStencilValue structure"
        },
        {
          "vuid": "pRanges",
          "text": " pRanges must be a valid pointer to an array of rangeCount valid VkImageSubresourceRange structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "rangeCount",
          "text": " rangeCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and image must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then image must not be a protected image"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then image must not be an unprotected image"
        }
      ]
    },
    "vkCmdClearAttachments": {
      "core": [
        {
          "vuid": "aspectMask",
          "text": " If the aspectMask member of any element of pAttachments contains VK_IMAGE_ASPECT_COLOR_BIT, the colorAttachment member of that element must refer to a valid color attachment in the current subpass"
        },
        {
          "vuid": "pRects",
          "text": " The rectangular region specified by each element of pRects must be contained within the render area of the current render pass instance"
        },
        {
          "vuid": "pRects",
          "text": " The layers specified by each element of pRects must be contained within every attachment that pAttachments refers to"
        },
        {
          "vuid": "layerCount",
          "text": " The layerCount member of each element of pRects must not be 0"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pAttachments",
          "text": " pAttachments must be a valid pointer to an array of attachmentCount valid VkClearAttachment structures"
        },
        {
          "vuid": "pRects",
          "text": " pRects must be a valid pointer to an array of rectCount VkClearRect structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "attachmentCount",
          "text": " attachmentCount must be greater than 0"
        },
        {
          "vuid": "rectCount",
          "text": " rectCount must be greater than 0"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "baseArrayLayer",
          "text": " If the render pass instance this is recorded in uses multiview, then baseArrayLayer must be zero and layerCount must be one."
        }
      ]
    },
    "VkClearAttachment": {
      "core": [
        {
          "vuid": "aspectMask",
          "text": " If aspectMask includes VK_IMAGE_ASPECT_COLOR_BIT, it must not include VK_IMAGE_ASPECT_DEPTH_BIT or VK_IMAGE_ASPECT_STENCIL_BIT"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must not include VK_IMAGE_ASPECT_METADATA_BIT"
        },
        {
          "vuid": "clearValue",
          "text": " clearValue must be a valid VkClearValue union"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must be a valid combination of VkImageAspectFlagBits values"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must not be 0"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then the attachment to be cleared must not be a protected image."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then the attachment to be cleared must not be an unprotected image."
        }
      ]
    },
    "VkClearDepthStencilValue": {
      "(VK_EXT_depth_range_unrestricted)": [
        {
          "vuid": "depth",
          "text": " Unless the VK_EXT_depth_range_unrestricted extension is enabled depth must be between 0.0 and 1.0, inclusive"
        }
      ],
      "!(VK_EXT_depth_range_unrestricted)": [
        {
          "vuid": "depth",
          "text": " depth must be between 0.0 and 1.0, inclusive"
        }
      ]
    },
    "vkCmdFillBuffer": {
      "core": [
        {
          "vuid": "dstOffset",
          "text": " dstOffset must be less than the size of dstBuffer"
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset must be a multiple of 4"
        },
        {
          "vuid": "size",
          "text": " If size is not equal to VK_WHOLE_SIZE, size must be greater than 0"
        },
        {
          "vuid": "size",
          "text": " If size is not equal to VK_WHOLE_SIZE, size must be less than or equal to the size of dstBuffer minus dstOffset"
        },
        {
          "vuid": "size",
          "text": " If size is not equal to VK_WHOLE_SIZE, size must be a multiple of 4"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "dstBuffer",
          "text": " If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support transfer, graphics or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and dstBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics or compute operations"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then dstBuffer must not be a protected buffer"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then dstBuffer must not be an unprotected buffer"
        }
      ]
    },
    "vkCmdUpdateBuffer": {
      "core": [
        {
          "vuid": "dstOffset",
          "text": " dstOffset must be less than the size of dstBuffer"
        },
        {
          "vuid": "dataSize",
          "text": " dataSize must be less than or equal to the size of dstBuffer minus dstOffset"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "dstBuffer",
          "text": " If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset must be a multiple of 4"
        },
        {
          "vuid": "dataSize",
          "text": " dataSize must be less than or equal to 65536"
        },
        {
          "vuid": "dataSize",
          "text": " dataSize must be a multiple of 4"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "pData",
          "text": " pData must be a valid pointer to an array of dataSize bytes"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "dataSize",
          "text": " dataSize must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and dstBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then dstBuffer must not be a protected buffer"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then dstBuffer must not be an unprotected buffer"
        }
      ]
    },
    "vkCmdCopyBuffer": {
      "core": [
        {
          "vuid": "srcOffset",
          "text": " The srcOffset member of each element of pRegions must be less than the size of srcBuffer"
        },
        {
          "vuid": "dstOffset",
          "text": " The dstOffset member of each element of pRegions must be less than the size of dstBuffer"
        },
        {
          "vuid": "size",
          "text": " The size member of each element of pRegions must be less than or equal to the size of srcBuffer minus srcOffset"
        },
        {
          "vuid": "size",
          "text": " The size member of each element of pRegions must be less than or equal to the size of dstBuffer minus dstOffset"
        },
        {
          "vuid": "pRegions",
          "text": " The union of the source regions, and the union of the destination regions, specified by the elements of pRegions, must not overlap in memory"
        },
        {
          "vuid": "srcBuffer",
          "text": " srcBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag"
        },
        {
          "vuid": "srcBuffer",
          "text": " If srcBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "dstBuffer",
          "text": " If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "srcBuffer",
          "text": " srcBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "pRegions",
          "text": " pRegions must be a valid pointer to an array of regionCount valid VkBufferCopy structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "regionCount",
          "text": " regionCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Each of commandBuffer, dstBuffer, and srcBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then srcBuffer must not be a protected buffer"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then dstBuffer must not be a protected buffer"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then dstBuffer must not be an unprotected buffer"
        }
      ]
    },
    "VkBufferCopy": {
      "core": [
        {
          "vuid": "size",
          "text": " The size must be greater than 0"
        }
      ]
    },
    "vkCmdCopyImage": {
      "core": [
        {
          "vuid": "pRegions",
          "text": " The source region specified by each element of pRegions must be a region that is contained within srcImage"
        },
        {
          "vuid": "pRegions",
          "text": " The destination region specified by each element of pRegions must be a region that is contained within dstImage"
        },
        {
          "vuid": "pRegions",
          "text": " The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory"
        },
        {
          "vuid": "srcImage",
          "text": " srcImage must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag"
        },
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice"
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice"
        },
        {
          "vuid": "srcImage",
          "text": " The sample count of srcImage and dstImage must match"
        },
        {
          "vuid": "srcSubresource",
          "text": " The srcSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when srcImage was created"
        },
        {
          "vuid": "dstSubresource",
          "text": " The dstSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when dstImage was created"
        },
        {
          "vuid": "srcSubresource",
          "text": " The +srcSubresource.baseArrayLayer + srcSubresource.layerCount+ of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when srcImage was created"
        },
        {
          "vuid": "dstSubresource",
          "text": " The +dstSubresource.baseArrayLayer + dstSubresource.layerCount+ of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when dstImage was created"
        },
        {
          "vuid": "srcOffset",
          "text": " The srcOffset and extent members of each element of pRegions must respect the image transfer granularity requirements of commandBuffer’s command pool’s queue family, as described in VkQueueFamilyProperties"
        },
        {
          "vuid": "dstOffset",
          "text": " The dstOffset and extent members of each element of pRegions must respect the image transfer granularity requirements of commandBuffer’s command pool’s queue family, as described in VkQueueFamilyProperties"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "srcImage",
          "text": " srcImage must be a valid VkImage handle"
        },
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must be a valid VkImage handle"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "pRegions",
          "text": " pRegions must be a valid pointer to an array of regionCount valid VkImageCopy structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "regionCount",
          "text": " regionCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Each of commandBuffer, dstImage, and srcImage must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "srcImage",
          "text": " The resources-image-format-features,format features of srcImage must contain VK_FORMAT_FEATURE_TRANSFER_SRC_BIT."
        },
        {
          "vuid": "dstImage",
          "text": " The resources-image-format-features,format features of dstImage must contain VK_FORMAT_FEATURE_TRANSFER_DST_BIT."
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "srcImage",
          "text": " If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "dstImage",
          "text": " If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "srcImage",
          "text": " The VkFormat of each of srcImage and dstImage must be compatible, as defined copies-images-format-compatibility, below"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "srcImage",
          "text": " If srcImage is non-sparse then the image or disjoint plane to be copied must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "dstImage",
          "text": " If dstImage is non-sparse then the image or disjoint plane that is the destination of the copy must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "srcImage",
          "text": " If the VkFormat of each of srcImage and dstImage is not a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format, the VkFormat of each of srcImage and dstImage must be compatible, as defined copies-images-format-compatibility, below"
        },
        {
          "vuid": "None",
          "text": " In a copy to or from a plane of a features-formats-requiring-sampler-ycbcr-conversion,multi-planar image, the VkFormat of the image and plane must be compatible according to features-formats-compatible-planes,the description of compatible planes for the plane being copied"
        },
        {
          "vuid": "aspectMask",
          "text": " When a copy is performed to or from an image with a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format, the aspectMask of the srcSubresource and/or dstSubresource that refers to the multi-planar image must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT (with VK_IMAGE_ASPECT_PLANE_2_BIT valid only for a VkFormat with three planes)"
        }
      ],
      "!(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        }
      ],
      "(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, VK_IMAGE_LAYOUT_GENERAL, or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, VK_IMAGE_LAYOUT_GENERAL, or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then srcImage must not be a protected image"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then dstImage must not be a protected image"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then dstImage must not be an unprotected image"
        }
      ]
    },
    "VkImageCopy": {
      "!(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of srcSubresource and dstSubresource must match"
        },
        {
          "vuid": "srcOffset",
          "text": " If the calling command’s srcImage is a compressed image, all members of srcOffset must be a multiple of the corresponding dimensions of the compressed texel block"
        },
        {
          "vuid": "extent",
          "text": " If the calling command’s srcImage is a compressed image, extent.width must be a multiple of the compressed texel block width or +(extent.width + srcOffset.x)+ must equal the source image subresource width"
        },
        {
          "vuid": "extent",
          "text": " If the calling command’s srcImage is a compressed image, extent.height must be a multiple of the compressed texel block height or +(extent.height + srcOffset.y)+ must equal the source image subresource height"
        },
        {
          "vuid": "extent",
          "text": " If the calling command’s srcImage is a compressed image, extent.depth must be a multiple of the compressed texel block depth or +(extent.depth + srcOffset.z)+ must equal the source image subresource depth"
        },
        {
          "vuid": "dstOffset",
          "text": " If the calling command’s dstImage is a compressed format image, all members of dstOffset must be a multiple of the corresponding dimensions of the compressed texel block"
        },
        {
          "vuid": "extent",
          "text": " If the calling command’s dstImage is a compressed format image, extent.width must be a multiple of the compressed texel block width or +(extent.width + dstOffset.x)+ must equal the destination image subresource width"
        },
        {
          "vuid": "extent",
          "text": " If the calling command’s dstImage is a compressed format image, extent.height must be a multiple of the compressed texel block height or +(extent.height + dstOffset.y)+ must equal the destination image subresource height"
        },
        {
          "vuid": "extent",
          "text": " If the calling command’s dstImage is a compressed format image, extent.depth must be a multiple of the compressed texel block depth or +(extent.depth + dstOffset.z)+ must equal the destination image subresource depth"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "srcImage",
          "text": " If neither the calling command’s srcImage nor the calling command’s dstImage has a features-formats-requiring-sampler-ycbcr-conversion, multi-planar image format then the aspectMask member of srcSubresource and dstSubresource must match"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage has a VkFormat with features-formats-requiring-sampler-ycbcr-conversion,two planes then the srcSubresource aspectMask must be VK_IMAGE_ASPECT_PLANE_0_BIT or VK_IMAGE_ASPECT_PLANE_1_BIT"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage has a VkFormat with features-formats-requiring-sampler-ycbcr-conversion,three planes then the srcSubresource aspectMask must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage has a VkFormat with features-formats-requiring-sampler-ycbcr-conversion,two planes then the dstSubresource aspectMask must be VK_IMAGE_ASPECT_PLANE_0_BIT or VK_IMAGE_ASPECT_PLANE_1_BIT"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage has a VkFormat with features-formats-requiring-sampler-ycbcr-conversion,three planes then the dstSubresource aspectMask must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage has a features-formats-requiring-sampler-ycbcr-conversion,multi-planar image format and the dstImage does not have a multi-planar image format, the dstSubresource aspectMask must be VK_IMAGE_ASPECT_COLOR_BIT"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage has a features-formats-requiring-sampler-ycbcr-conversion,multi-planar image format and the srcImage does not have a multi-planar image format, the srcSubresource aspectMask must be VK_IMAGE_ASPECT_COLOR_BIT"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is a compressed image, or a single-plane, \"_422\" image format, all members of srcOffset must be a multiple of the corresponding dimensions of the compressed texel block"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is a compressed image, or a single-plane, \"_422\" image format, extent.width must be a multiple of the compressed texel block width or +(extent.width + srcOffset.x)+ must equal the source image subresource width"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is a compressed image, or a single-plane, \"_422\" image format, extent.height must be a multiple of the compressed texel block height or +(extent.height + srcOffset.y)+ must equal the source image subresource height"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is a compressed image, or a single-plane, \"_422\" image format, extent.depth must be a multiple of the compressed texel block depth or +(extent.depth + srcOffset.z)+ must equal the source image subresource depth"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is a compressed format image, or a single-plane, \"_422\" image format, all members of dstOffset must be a multiple of the corresponding dimensions of the compressed texel block"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is a compressed format image, or a single-plane, \"_422\" image format, extent.width must be a multiple of the compressed texel block width or +(extent.width + dstOffset.x)+ must equal the destination image subresource width"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is a compressed format image, or a single-plane, \"_422\" image format, extent.height must be a multiple of the compressed texel block height or +(extent.height + dstOffset.y)+ must equal the destination image subresource height"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is a compressed format image, or a single-plane, \"_422\" image format, extent.depth must be a multiple of the compressed texel block depth or +(extent.depth + dstOffset.z)+ must equal the destination image subresource depth"
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "layerCount",
          "text": " The layerCount member of srcSubresource and dstSubresource must match"
        },
        {
          "vuid": "srcImage",
          "text": " If either of the calling command’s srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of both srcSubresource and dstSubresource must be 0 and 1, respectively"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage or dstImage is of type VK_IMAGE_TYPE_2D, then extent.depth must be 1."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "extent",
          "text": " The number of slices of the extent (for 3D) or layers of the srcSubresource (for non-3D) must match the number of slices of the extent (for 3D) or layers of the dstSubresource (for non-3D)"
        },
        {
          "vuid": "srcImage",
          "text": " If either of the calling command’s srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of the corresponding subresource must be 0 and 1, respectively"
        },
        {
          "vuid": "srcImage",
          "text": " If both srcImage and dstImage are of type VK_IMAGE_TYPE_2D then extent.depth must be 1."
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is of type VK_IMAGE_TYPE_2D, and the dstImage is of type VK_IMAGE_TYPE_3D, then extent.depth must equal to the layerCount member of srcSubresource."
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is of type VK_IMAGE_TYPE_2D, and the srcImage is of type VK_IMAGE_TYPE_3D, then extent.depth must equal to the layerCount member of dstSubresource."
        }
      ],
      "core": [
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of srcSubresource must specify aspects present in the calling command’s srcImage"
        },
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of dstSubresource must specify aspects present in the calling command’s dstImage"
        },
        {
          "vuid": "srcOffset",
          "text": " srcOffset.x and +(extent.width + srcOffset.x)+ must both be greater than or equal to 0 and less than or equal to the source image subresource width"
        },
        {
          "vuid": "srcOffset",
          "text": " srcOffset.y and +(extent.height + srcOffset.y)+ must both be greater than or equal to 0 and less than or equal to the source image subresource height"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset.y must be 0 and extent.height must be 1."
        },
        {
          "vuid": "srcOffset",
          "text": " srcOffset.z and +(extent.depth + srcOffset.z)+ must both be greater than or equal to 0 and less than or equal to the source image subresource depth"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset.z must be 0 and extent.depth must be 1."
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset.z must be 0 and extent.depth must be 1."
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is of type VK_IMAGE_TYPE_2D, then srcOffset.z must be 0."
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is of type VK_IMAGE_TYPE_2D, then dstOffset.z must be 0."
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset.x and +(extent.width + dstOffset.x)+ must both be greater than or equal to 0 and less than or equal to the destination image subresource width"
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset.y and +(extent.height + dstOffset.y)+ must both be greater than or equal to 0 and less than or equal to the destination image subresource height"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset.y must be 0 and extent.height must be 1."
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset.z and +(extent.depth + dstOffset.z)+ must both be greater than or equal to 0 and less than or equal to the destination image subresource depth"
        },
        {
          "vuid": "srcSubresource",
          "text": " srcSubresource must be a valid VkImageSubresourceLayers structure"
        },
        {
          "vuid": "dstSubresource",
          "text": " dstSubresource must be a valid VkImageSubresourceLayers structure"
        }
      ]
    },
    "VkImageSubresourceLayers": {
      "core": [
        {
          "vuid": "aspectMask",
          "text": " If aspectMask contains VK_IMAGE_ASPECT_COLOR_BIT, it must not contain either of VK_IMAGE_ASPECT_DEPTH_BIT or VK_IMAGE_ASPECT_STENCIL_BIT"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must not contain VK_IMAGE_ASPECT_METADATA_BIT"
        },
        {
          "vuid": "layerCount",
          "text": " layerCount must be greater than 0"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must be a valid combination of VkImageAspectFlagBits values"
        },
        {
          "vuid": "aspectMask",
          "text": " aspectMask must not be 0"
        }
      ]
    },
    "vkCmdCopyBufferToImage": {
      "core": [
        {
          "vuid": "pRegions",
          "text": " srcBuffer must be large enough to contain all buffer locations that are accessed according to copies-buffers-images-addressing,Buffer and Image Addressing, for each element of pRegions"
        },
        {
          "vuid": "pRegions",
          "text": " The image region specified by each element of pRegions must be a region that is contained within dstImage"
        },
        {
          "vuid": "pRegions",
          "text": " The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory"
        },
        {
          "vuid": "srcBuffer",
          "text": " srcBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag"
        },
        {
          "vuid": "srcBuffer",
          "text": " If srcBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "dstImage",
          "text": " If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice"
        },
        {
          "vuid": "imageSubresource",
          "text": " The imageSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when dstImage was created"
        },
        {
          "vuid": "imageSubresource",
          "text": " The +imageSubresource.baseArrayLayer + imageSubresource.layerCount+ of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when dstImage was created"
        },
        {
          "vuid": "imageOffset",
          "text": " The imageOffset and imageExtent members of each element of pRegions must respect the image transfer granularity requirements of commandBuffer’s command pool’s queue family, as described in VkQueueFamilyProperties"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "srcBuffer",
          "text": " srcBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must be a valid VkImage handle"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "pRegions",
          "text": " pRegions must be a valid pointer to an array of regionCount valid VkBufferImageCopy structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "regionCount",
          "text": " regionCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Each of commandBuffer, dstImage, and srcBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "dstImage",
          "text": " The resources-image-format-features,format features of dstImage must contain VK_FORMAT_FEATURE_TRANSFER_DST_BIT."
        }
      ],
      "!(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        }
      ],
      "(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, VK_IMAGE_LAYOUT_GENERAL, or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then srcBuffer must not be a protected buffer"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then dstImage must not be a protected image"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then dstImage must not be an unprotected image"
        }
      ]
    },
    "vkCmdCopyImageToBuffer": {
      "core": [
        {
          "vuid": "pRegions",
          "text": " The image region specified by each element of pRegions must be a region that is contained within srcImage"
        },
        {
          "vuid": "pRegions",
          "text": " dstBuffer must be large enough to contain all buffer locations that are accessed according to copies-buffers-images-addressing,Buffer and Image Addressing, for each element of pRegions"
        },
        {
          "vuid": "pRegions",
          "text": " The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory"
        },
        {
          "vuid": "srcImage",
          "text": " srcImage must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag"
        },
        {
          "vuid": "srcImage",
          "text": " If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "srcImage",
          "text": " srcImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "dstBuffer",
          "text": " If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "imageSubresource",
          "text": " The imageSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when srcImage was created"
        },
        {
          "vuid": "imageSubresource",
          "text": " The +imageSubresource.baseArrayLayer + imageSubresource.layerCount+ of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when srcImage was created"
        },
        {
          "vuid": "imageOffset",
          "text": " The imageOffset and imageExtent members of each element of pRegions must respect the image transfer granularity requirements of commandBuffer’s command pool’s queue family, as described in VkQueueFamilyProperties"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "srcImage",
          "text": " srcImage must be a valid VkImage handle"
        },
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "pRegions",
          "text": " pRegions must be a valid pointer to an array of regionCount valid VkBufferImageCopy structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "regionCount",
          "text": " regionCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Each of commandBuffer, dstBuffer, and srcImage must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance1)": [
        {
          "vuid": "srcImage",
          "text": " The resources-image-format-features,format features of srcImage must contain VK_FORMAT_FEATURE_TRANSFER_SRC_BIT."
        }
      ],
      "!(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        }
      ],
      "(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then srcImage must not be a protected image"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then dstBuffer must not be a protected buffer"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then dstBuffer must not be an unprotected buffer"
        }
      ]
    },
    "VkBufferImageCopy": {
      "!(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "bufferOffset",
          "text": " If the calling command’s VkImage parameter’s format is not a depth/stencil format, then bufferOffset must be a multiple of the format’s element size"
        },
        {
          "vuid": "bufferRowLength",
          "text": " If the calling command’s VkImage parameter is a compressed image, bufferRowLength must be a multiple of the compressed texel block width"
        },
        {
          "vuid": "bufferImageHeight",
          "text": " If the calling command’s VkImage parameter is a compressed image, bufferImageHeight must be a multiple of the compressed texel block height"
        },
        {
          "vuid": "imageOffset",
          "text": " If the calling command’s VkImage parameter is a compressed image, all members of imageOffset must be a multiple of the corresponding dimensions of the compressed texel block"
        },
        {
          "vuid": "bufferOffset",
          "text": " If the calling command’s VkImage parameter is a compressed image, bufferOffset must be a multiple of the compressed texel block size in bytes"
        },
        {
          "vuid": "imageExtent",
          "text": " If the calling command’s VkImage parameter is a compressed image, imageExtent.width must be a multiple of the compressed texel block width or +(imageExtent.width + imageOffset.x)+ must equal the image subresource width"
        },
        {
          "vuid": "imageExtent",
          "text": " If the calling command’s VkImage parameter is a compressed image, imageExtent.height must be a multiple of the compressed texel block height or +(imageExtent.height + imageOffset.y)+ must equal the image subresource height"
        },
        {
          "vuid": "imageExtent",
          "text": " If the calling command’s VkImage parameter is a compressed image, imageExtent.depth must be a multiple of the compressed texel block depth or +(imageExtent.depth + imageOffset.z)+ must equal the image subresource depth"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "bufferOffset",
          "text": " If the calling command’s VkImage parameter’s format is not a depth/stencil format or a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format, then bufferOffset must be a multiple of the format’s element size"
        },
        {
          "vuid": "bufferOffset",
          "text": " If the calling command’s VkImage parameter’s format is a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format, then bufferOffset must be a multiple of the element size of the compatible format for the format and the aspectMask of the imageSubresource as defined in features-formats-compatible-planes"
        },
        {
          "vuid": "None",
          "text": " If the calling command’s VkImage parameter is a compressed image, or a single-plane, \"_422\" image format, bufferRowLength must be a multiple of the compressed texel block width"
        },
        {
          "vuid": "None",
          "text": " If the calling command’s VkImage parameter is a compressed image, or a single-plane, \"_422\" image format, bufferImageHeight must be a multiple of the compressed texel block height"
        },
        {
          "vuid": "None",
          "text": " If the calling command’s VkImage parameter is a compressed image, or a single-plane, \"_422\" image format, all members of imageOffset must be a multiple of the corresponding dimensions of the compressed texel block"
        },
        {
          "vuid": "None",
          "text": " If the calling command’s VkImage parameter is a compressed image, or a single-plane, \"_422\" image format, bufferOffset must be a multiple of the compressed texel block size in bytes"
        },
        {
          "vuid": "None",
          "text": " If the calling command’s VkImage parameter is a compressed image, or a single-plane, \"_422\" image format, imageExtent.width must be a multiple of the compressed texel block width or +(imageExtent.width + imageOffset.x)+ must equal the image subresource width"
        },
        {
          "vuid": "None",
          "text": " If the calling command’s VkImage parameter is a compressed image, or a single-plane, \"_422\" image format, imageExtent.height must be a multiple of the compressed texel block height or +(imageExtent.height + imageOffset.y)+ must equal the image subresource height"
        },
        {
          "vuid": "None",
          "text": " If the calling command’s VkImage parameter is a compressed image, or a single-plane, \"_422\" image format, imageExtent.depth must be a multiple of the compressed texel block depth or +(imageExtent.depth + imageOffset.z)+ must equal the image subresource depth"
        },
        {
          "vuid": "aspectMask",
          "text": " If the calling command’s VkImage parameter’s format is a features-formats-requiring-sampler-ycbcr-conversion,multi-planar format, then the aspectMask member of imageSubresource must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT (with VK_IMAGE_ASPECT_PLANE_2_BIT valid only for image formats with three planes)"
        }
      ],
      "core": [
        {
          "vuid": "bufferOffset",
          "text": " bufferOffset must be a multiple of 4"
        },
        {
          "vuid": "bufferRowLength",
          "text": " bufferRowLength must be 0, or greater than or equal to the width member of imageExtent"
        },
        {
          "vuid": "bufferImageHeight",
          "text": " bufferImageHeight must be 0, or greater than or equal to the height member of imageExtent"
        },
        {
          "vuid": "imageOffset",
          "text": " imageOffset.x and +(imageExtent.width + imageOffset.x)+ must both be greater than or equal to 0 and less than or equal to the image subresource width"
        },
        {
          "vuid": "imageOffset",
          "text": " imageOffset.y and +(imageExtent.height + imageOffset.y)+ must both be greater than or equal to 0 and less than or equal to the image subresource height"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage (vkCmdCopyImageToBuffer) or dstImage (vkCmdCopyBufferToImage) is of type VK_IMAGE_TYPE_1D, then imageOffset.y must be 0 and imageExtent.height must be 1."
        },
        {
          "vuid": "imageOffset",
          "text": " imageOffset.z and +(imageExtent.depth + imageOffset.z)+ must both be greater than or equal to 0 and less than or equal to the image subresource depth"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage (vkCmdCopyImageToBuffer) or dstImage (vkCmdCopyBufferToImage) is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then imageOffset.z must be 0 and imageExtent.depth must be 1"
        },
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of imageSubresource must specify aspects present in the calling command’s VkImage parameter"
        },
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of imageSubresource must only have a single bit set"
        },
        {
          "vuid": "baseArrayLayer",
          "text": " If the calling command’s VkImage parameter is of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of imageSubresource must be 0 and 1, respectively"
        },
        {
          "vuid": "None",
          "text": " When copying to the depth aspect of an image subresource, the data in the source buffer must be in the range +[0,1]+"
        },
        {
          "vuid": "imageSubresource",
          "text": " imageSubresource must be a valid VkImageSubresourceLayers structure"
        }
      ]
    },
    "vkCmdBlitImage": {
      "core": [
        {
          "vuid": "pRegions",
          "text": " The source region specified by each element of pRegions must be a region that is contained within srcImage"
        },
        {
          "vuid": "pRegions",
          "text": " The destination region specified by each element of pRegions must be a region that is contained within dstImage"
        },
        {
          "vuid": "pRegions",
          "text": " The union of all destination regions, specified by the elements of pRegions, must not overlap in memory with any texel that may be sampled during the blit operation"
        },
        {
          "vuid": "srcImage",
          "text": " The resources-image-format-features,format features of srcImage must contain VK_FORMAT_FEATURE_BLIT_SRC_BIT."
        },
        {
          "vuid": "srcImage",
          "text": " srcImage must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag"
        },
        {
          "vuid": "srcImage",
          "text": " If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice"
        },
        {
          "vuid": "dstImage",
          "text": " The resources-image-format-features,format features of dstImage must contain VK_FORMAT_FEATURE_BLIT_DST_BIT."
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "dstImage",
          "text": " If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice"
        },
        {
          "vuid": "srcImage",
          "text": " The sample count of srcImage and dstImage must both be equal to VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "srcImage",
          "text": " If either of srcImage or dstImage was created with a signed integer VkFormat, the other must also have been created with a signed integer VkFormat"
        },
        {
          "vuid": "srcImage",
          "text": " If either of srcImage or dstImage was created with an unsigned integer VkFormat, the other must also have been created with an unsigned integer VkFormat"
        },
        {
          "vuid": "srcImage",
          "text": " If either of srcImage or dstImage was created with a depth/stencil format, the other must have exactly the same format"
        },
        {
          "vuid": "srcImage",
          "text": " If srcImage was created with a depth/stencil format, filter must be VK_FILTER_NEAREST"
        },
        {
          "vuid": "srcImage",
          "text": " srcImage must have been created with a samples value of VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must have been created with a samples value of VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "filter",
          "text": " If filter is VK_FILTER_LINEAR, then the resources-image-format-features,format features of srcImage must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "srcSubresource",
          "text": " The srcSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when srcImage was created"
        },
        {
          "vuid": "dstSubresource",
          "text": " The dstSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when dstImage was created"
        },
        {
          "vuid": "srcSubresource",
          "text": " The +srcSubresource.baseArrayLayer + srcSubresource.layerCount+ of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when srcImage was created"
        },
        {
          "vuid": "dstSubresource",
          "text": " The +dstSubresource.baseArrayLayer + dstSubresource.layerCount+ of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when dstImage was created"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "srcImage",
          "text": " srcImage must be a valid VkImage handle"
        },
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must be a valid VkImage handle"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "pRegions",
          "text": " pRegions must be a valid pointer to an array of regionCount valid VkImageBlit structures"
        },
        {
          "vuid": "filter",
          "text": " filter must be a valid VkFilter value"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "regionCount",
          "text": " regionCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Each of commandBuffer, dstImage, and srcImage must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "srcImage",
          "text": " srcImage must not use a format listed in features-formats-requiring-sampler-ycbcr-conversion"
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must not use a format listed in features-formats-requiring-sampler-ycbcr-conversion"
        }
      ],
      "!(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        }
      ],
      "(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        }
      ],
      "(VK_IMG_filter_cubic)": [
        {
          "vuid": "filter",
          "text": " If filter is VK_FILTER_CUBIC_IMG, then the resources-image-format-features,format features of srcImage must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG."
        },
        {
          "vuid": "filter",
          "text": " If filter is VK_FILTER_CUBIC_IMG, srcImage must have a VkImageType of VK_IMAGE_TYPE_2D"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then srcImage must not be a protected image"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then dstImage must not be a protected image"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then dstImage must not be an unprotected image"
        }
      ]
    },
    "VkImageBlit": {
      "core": [
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of srcSubresource and dstSubresource must match"
        },
        {
          "vuid": "layerCount",
          "text": " The layerCount member of srcSubresource and dstSubresource must match"
        },
        {
          "vuid": "srcImage",
          "text": " If either of the calling command’s srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of both srcSubresource and dstSubresource must be 0 and 1, respectively"
        },
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of srcSubresource must specify aspects present in the calling command’s srcImage"
        },
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of dstSubresource must specify aspects present in the calling command’s dstImage"
        },
        {
          "vuid": "srcOffset",
          "text": " srcOffset[0].x and srcOffset[1].x must both be greater than or equal to 0 and less than or equal to the source image subresource width"
        },
        {
          "vuid": "srcOffset",
          "text": " srcOffset[0].y and srcOffset[1].y must both be greater than or equal to 0 and less than or equal to the source image subresource height"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset[0].y must be 0 and srcOffset[1].y must be 1."
        },
        {
          "vuid": "srcOffset",
          "text": " srcOffset[0].z and srcOffset[1].z must both be greater than or equal to 0 and less than or equal to the source image subresource depth"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then srcOffset[0].z must be 0 and srcOffset[1].z must be 1."
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset[0].x and dstOffset[1].x must both be greater than or equal to 0 and less than or equal to the destination image subresource width"
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset[0].y and dstOffset[1].y must both be greater than or equal to 0 and less than or equal to the destination image subresource height"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset[0].y must be 0 and dstOffset[1].y must be 1."
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset[0].z and dstOffset[1].z must both be greater than or equal to 0 and less than or equal to the destination image subresource depth"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then dstOffset[0].z must be 0 and dstOffset[1].z must be 1."
        },
        {
          "vuid": "srcSubresource",
          "text": " srcSubresource must be a valid VkImageSubresourceLayers structure"
        },
        {
          "vuid": "dstSubresource",
          "text": " dstSubresource must be a valid VkImageSubresourceLayers structure"
        }
      ]
    },
    "vkCmdResolveImage": {
      "core": [
        {
          "vuid": "pRegions",
          "text": " The source region specified by each element of pRegions must be a region that is contained within srcImage"
        },
        {
          "vuid": "pRegions",
          "text": " The destination region specified by each element of pRegions must be a region that is contained within dstImage"
        },
        {
          "vuid": "pRegions",
          "text": " The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory"
        },
        {
          "vuid": "srcImage",
          "text": " If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "srcImage",
          "text": " srcImage must have a sample count equal to any valid sample count value other than VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "dstImage",
          "text": " If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT"
        },
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice"
        },
        {
          "vuid": "dstImage",
          "text": " The resources-image-format-features,format features of dstImage must contain VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT."
        },
        {
          "vuid": "srcImage",
          "text": " srcImage and dstImage must have been created with the same image format"
        },
        {
          "vuid": "srcSubresource",
          "text": " The srcSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when srcImage was created"
        },
        {
          "vuid": "dstSubresource",
          "text": " The dstSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when dstImage was created"
        },
        {
          "vuid": "srcSubresource",
          "text": " The +srcSubresource.baseArrayLayer + srcSubresource.layerCount+ of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when srcImage was created"
        },
        {
          "vuid": "dstSubresource",
          "text": " The +dstSubresource.baseArrayLayer + dstSubresource.layerCount+ of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when dstImage was created"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "srcImage",
          "text": " srcImage must be a valid VkImage handle"
        },
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "dstImage",
          "text": " dstImage must be a valid VkImage handle"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "pRegions",
          "text": " pRegions must be a valid pointer to an array of regionCount valid VkImageResolve structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "regionCount",
          "text": " regionCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Each of commandBuffer, dstImage, and srcImage must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "!(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        }
      ],
      "(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "srcImageLayout",
          "text": " srcImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        },
        {
          "vuid": "dstImageLayout",
          "text": " dstImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then srcImage must not be a protected image"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, then dstImage must not be a protected image"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, then dstImage must not be an unprotected image"
        }
      ]
    },
    "VkImageResolve": {
      "core": [
        {
          "vuid": "aspectMask",
          "text": " The aspectMask member of srcSubresource and dstSubresource must only contain VK_IMAGE_ASPECT_COLOR_BIT"
        },
        {
          "vuid": "layerCount",
          "text": " The layerCount member of srcSubresource and dstSubresource must match"
        },
        {
          "vuid": "srcImage",
          "text": " If either of the calling command’s srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of both srcSubresource and dstSubresource must be 0 and 1, respectively"
        },
        {
          "vuid": "srcOffset",
          "text": " srcOffset.x and +(extent.width + srcOffset.x)+ must both be greater than or equal to 0 and less than or equal to the source image subresource width"
        },
        {
          "vuid": "srcOffset",
          "text": " srcOffset.y and +(extent.height + srcOffset.y)+ must both be greater than or equal to 0 and less than or equal to the source image subresource height"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset.y must be 0 and extent.height must be 1."
        },
        {
          "vuid": "srcOffset",
          "text": " srcOffset.z and +(extent.depth + srcOffset.z)+ must both be greater than or equal to 0 and less than or equal to the source image subresource depth"
        },
        {
          "vuid": "srcImage",
          "text": " If the calling command’s srcImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then srcOffset.z must be 0 and extent.depth must be 1."
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset.x and +(extent.width + dstOffset.x)+ must both be greater than or equal to 0 and less than or equal to the destination image subresource width"
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset.y and +(extent.height + dstOffset.y)+ must both be greater than or equal to 0 and less than or equal to the destination image subresource height"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset.y must be 0 and extent.height must be 1."
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset.z and +(extent.depth + dstOffset.z)+ must both be greater than or equal to 0 and less than or equal to the destination image subresource depth"
        },
        {
          "vuid": "dstImage",
          "text": " If the calling command’s dstImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then dstOffset.z must be 0 and extent.depth must be 1."
        },
        {
          "vuid": "srcSubresource",
          "text": " srcSubresource must be a valid VkImageSubresourceLayers structure"
        },
        {
          "vuid": "dstSubresource",
          "text": " dstSubresource must be a valid VkImageSubresourceLayers structure"
        }
      ]
    },
    "vkCmdWriteBufferMarkerAMD": {
      "(VK_AMD_buffer_marker)": [
        {
          "vuid": "dstOffset",
          "text": " dstOffset must be less than or equal to the size of dstBuffer minus 4."
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag"
        },
        {
          "vuid": "dstBuffer",
          "text": " If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "dstOffset",
          "text": " dstOffset must be a multiple of 4"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pipelineStage",
          "text": " pipelineStage must be a valid VkPipelineStageFlagBits value"
        },
        {
          "vuid": "dstBuffer",
          "text": " dstBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and dstBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkPipelineInputAssemblyStateCreateInfo": {
      "core": [
        {
          "vuid": "topology",
          "text": " If topology is VK_PRIMITIVE_TOPOLOGY_POINT_LIST, VK_PRIMITIVE_TOPOLOGY_LINE_LIST, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY or VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, primitiveRestartEnable must be VK_FALSE"
        },
        {
          "vuid": "topology",
          "text": " If the features-features-geometryShader,geometry shaders feature is not enabled, topology must not be any of VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY or VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY"
        },
        {
          "vuid": "topology",
          "text": " If the features-features-tessellationShader,tessellation shaders feature is not enabled, topology must not be VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "topology",
          "text": " topology must be a valid VkPrimitiveTopology value"
        }
      ]
    },
    "vkCmdBindIndexBuffer": {
      "core": [
        {
          "vuid": "offset",
          "text": " offset must be less than the size of buffer"
        },
        {
          "vuid": "offset",
          "text": " The sum of offset and the address of the range of VkDeviceMemory object that is backing buffer, must be a multiple of the type indicated by indexType"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_INDEX_BUFFER_BIT flag"
        },
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "indexType",
          "text": " indexType must be a valid VkIndexType value"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "commonparent",
          "text": " Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdDraw": {
      "core": [
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point’s interface must have valid buffers bound"
        },
        {
          "vuid": "None",
          "text": " For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in fxvertex-input"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_LINEAR as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        }
      ],
      "(VK_IMG_filter_cubic)": [
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_CUBIC_IMG as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG."
        },
        {
          "vuid": "None",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ],
      "(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "vkCmdDrawIndexed": {
      "core": [
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point’s interface must have valid buffers bound"
        },
        {
          "vuid": "None",
          "text": " For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in fxvertex-input"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "indexSize",
          "text": " +(indexSize * (firstIndex + indexCount) + offset)+ must be less than or equal to the size of the bound index buffer, with indexSize being based on the type specified by indexType, where the index buffer, indexType, and offset are specified via vkCmdBindIndexBuffer"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_LINEAR as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        }
      ],
      "(VK_IMG_filter_cubic)": [
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_CUBIC_IMG as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG."
        },
        {
          "vuid": "None",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ],
      "(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "vkCmdDrawIndirect": {
      "core": [
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "drawCount",
          "text": " If drawCount is greater than 1, stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndirectCommand)"
        },
        {
          "vuid": "drawCount",
          "text": " If the multi-draw indirect feature is not enabled, drawCount must be 0 or 1"
        },
        {
          "vuid": "firstInstance",
          "text": " If the features-features-drawIndirectFirstInstance,drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndirectCommand structures accessed by this command must be 0"
        },
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point’s interface must have valid buffers bound"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "drawCount",
          "text": " If drawCount is equal to 1, +(offset + sizeof(VkDrawIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "drawCount",
          "text": " If drawCount is greater than 1, +(stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "drawCount",
          "text": " drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_LINEAR as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_IMG_filter_cubic)": [
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_CUBIC_IMG as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG."
        },
        {
          "vuid": "None",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ],
      "(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "VkDrawIndirectCommand": {
      "core": [
        {
          "vuid": "None",
          "text": " For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in fxvertex-input"
        },
        {
          "vuid": "firstInstance",
          "text": " If the features-features-drawIndirectFirstInstance,drawIndirectFirstInstance feature is not enabled, firstInstance must be 0"
        }
      ]
    },
    "vkCmdDrawIndirectCountKHR": {
      "(VK_KHR_draw_indirect_count)": [
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "countBuffer",
          "text": " If countBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "countBuffer",
          "text": " countBuffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "countBufferOffset",
          "text": " countBufferOffset must be a multiple of 4"
        },
        {
          "vuid": "stride",
          "text": " stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndirectCommand)"
        },
        {
          "vuid": "maxDrawCount",
          "text": " If maxDrawCount is greater than or equal to 1, +(stride {times} (maxDrawCount - 1) + offset + sizeof(VkDrawIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "firstInstance",
          "text": " If the features-features-drawIndirectFirstInstance,drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndirectCommand structures accessed by this command must be 0"
        },
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point’s interface must have valid buffers bound"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " If the count stored in countBuffer is equal to 1, +(offset + sizeof(VkDrawIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " If the count stored in countBuffer is greater than 1, +(stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " The count stored in countBuffer must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_LINEAR as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "countBuffer",
          "text": " countBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_KHR_draw_indirect_count)+(VK_IMG_filter_cubic)": [
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_CUBIC_IMG as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG."
        },
        {
          "vuid": "None",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        }
      ],
      "(VK_KHR_draw_indirect_count)+(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_KHR_draw_indirect_count)+(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_KHR_draw_indirect_count)+(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ],
      "(VK_KHR_draw_indirect_count)+(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "vkCmdDrawIndirectCountAMD": {
      "(VK_AMD_draw_indirect_count)": [
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "countBuffer",
          "text": " If countBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "countBuffer",
          "text": " countBuffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "countBufferOffset",
          "text": " countBufferOffset must be a multiple of 4"
        },
        {
          "vuid": "stride",
          "text": " stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndirectCommand)"
        },
        {
          "vuid": "maxDrawCount",
          "text": " If maxDrawCount is greater than or equal to 1, +(stride {times} (maxDrawCount - 1) + offset + sizeof(VkDrawIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "firstInstance",
          "text": " If the features-features-drawIndirectFirstInstance,drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndirectCommand structures accessed by this command must be 0"
        },
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point’s interface must have valid buffers bound"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " If the count stored in countBuffer is equal to 1, +(offset + sizeof(VkDrawIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " If the count stored in countBuffer is greater than 1, +(stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " The count stored in countBuffer must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_LINEAR as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "countBuffer",
          "text": " countBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_AMD_draw_indirect_count)+(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_AMD_draw_indirect_count)+(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_AMD_draw_indirect_count)+(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ],
      "(VK_AMD_draw_indirect_count)+(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "vkCmdDrawIndexedIndirect": {
      "core": [
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "drawCount",
          "text": " If drawCount is greater than 1, stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndexedIndirectCommand)"
        },
        {
          "vuid": "drawCount",
          "text": " If the multi-draw indirect feature is not enabled, drawCount must be 0 or 1"
        },
        {
          "vuid": "firstInstance",
          "text": " If the features-features-drawIndirectFirstInstance,drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndexedIndirectCommand structures accessed by this command must be 0"
        },
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point’s interface must have valid buffers bound"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "drawCount",
          "text": " If drawCount is equal to 1, +(offset + sizeof(VkDrawIndexedIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "drawCount",
          "text": " If drawCount is greater than 1, +(stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "drawCount",
          "text": " drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_LINEAR as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_IMG_filter_cubic)": [
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_CUBIC_IMG as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG."
        },
        {
          "vuid": "None",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ],
      "(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "VkDrawIndexedIndirectCommand": {
      "core": [
        {
          "vuid": "None",
          "text": " For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in fxvertex-input"
        },
        {
          "vuid": "indexSize",
          "text": " +(indexSize * (firstIndex + indexCount) + offset)+ must be less than or equal to the size of the bound index buffer, with indexSize being based on the type specified by indexType, where the index buffer, indexType, and offset are specified via vkCmdBindIndexBuffer"
        },
        {
          "vuid": "firstInstance",
          "text": " If the features-features-drawIndirectFirstInstance,drawIndirectFirstInstance feature is not enabled, firstInstance must be 0"
        }
      ]
    },
    "vkCmdDrawIndexedIndirectCountKHR": {
      "(VK_KHR_draw_indirect_count)": [
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "countBuffer",
          "text": " If countBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "countBuffer",
          "text": " countBuffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "countBufferOffset",
          "text": " countBufferOffset must be a multiple of 4"
        },
        {
          "vuid": "stride",
          "text": " stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndexedIndirectCommand)"
        },
        {
          "vuid": "maxDrawCount",
          "text": " If maxDrawCount is greater than or equal to 1, +(stride {times} (maxDrawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "firstInstance",
          "text": " If the features-features-drawIndirectFirstInstance,drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndexedIndirectCommand structures accessed by this command must be 0"
        },
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point’s interface must have valid buffers bound"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " If count stored in countBuffer is equal to 1, +(offset + sizeof(VkDrawIndexedIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " If count stored in countBuffer is greater than 1, +(stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "drawCount",
          "text": " drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_LINEAR as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "countBuffer",
          "text": " countBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_KHR_draw_indirect_count)+(VK_IMG_filter_cubic)": [
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_CUBIC_IMG as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG."
        },
        {
          "vuid": "None",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        }
      ],
      "(VK_KHR_draw_indirect_count)+(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_KHR_draw_indirect_count)+(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_KHR_draw_indirect_count)+(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ],
      "(VK_KHR_draw_indirect_count)+(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "vkCmdDrawIndexedIndirectCountAMD": {
      "(VK_AMD_draw_indirect_count)": [
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "countBuffer",
          "text": " If countBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "countBuffer",
          "text": " countBuffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "countBufferOffset",
          "text": " countBufferOffset must be a multiple of 4"
        },
        {
          "vuid": "stride",
          "text": " stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndexedIndirectCommand)"
        },
        {
          "vuid": "maxDrawCount",
          "text": " If maxDrawCount is greater than or equal to 1, +(stride {times} (maxDrawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "firstInstance",
          "text": " If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndexedIndirectCommand structures accessed by this command must be 0"
        },
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point’s interface must have valid buffers bound"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " If count stored in countBuffer is equal to 1, +(offset + sizeof(VkDrawIndexedIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " If count stored in countBuffer is greater than 1, +(stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "drawCount",
          "text": " drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with VK_FILTER_LINEAR as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "countBuffer",
          "text": " countBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_AMD_draw_indirect_count)+(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_AMD_draw_indirect_count)+(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_AMD_draw_indirect_count)+(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ],
      "(VK_AMD_draw_indirect_count)+(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "vkCmdBeginConditionalRenderingEXT": {
      "(VK_EXT_conditional_rendering)": [
        {
          "vuid": "None",
          "text": " Conditional rendering must not already be active-conditional-rendering,active"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pConditionalRenderingBegin",
          "text": " pConditionalRenderingBegin must be a valid pointer to a valid VkConditionalRenderingBeginInfoEXT structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        }
      ]
    },
    "VkConditionalRenderingBeginInfoEXT": {
      "(VK_EXT_conditional_rendering)": [
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT bit set"
        },
        {
          "vuid": "offset",
          "text": " offset must be less than the size of buffer by at least 32 bits."
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        }
      ]
    },
    "vkCmdEndConditionalRenderingEXT": {
      "(VK_EXT_conditional_rendering)": [
        {
          "vuid": "None",
          "text": " Conditional rendering must be active-conditional-rendering,active"
        },
        {
          "vuid": "None",
          "text": " If conditional rendering was made active-conditional-rendering,active outside of a render pass instance, it must not be ended inside a render pass instance"
        },
        {
          "vuid": "None",
          "text": " If conditional rendering was made active-conditional-rendering,active within a subpass it must be ended in the same subpass"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        }
      ]
    },
    "vkCmdDrawMeshTasksNV": {
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "taskCount",
          "text": " taskCount must be less than or equal to VkPhysicalDeviceMeshShaderPropertiesNV::maxDrawMeshTasksCount"
        },
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set"
        },
        {
          "vuid": "linearTilingFeatures",
          "text": " Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties"
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        }
      ],
      "(VK_NV_mesh_shader)+(VK_IMG_filter_cubic)": [
        {
          "vuid": "linearTilingFeatures",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must be of a format which supports cubic filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties"
        },
        {
          "vuid": "None",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        }
      ],
      "(VK_NV_mesh_shader)+(VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_NV_mesh_shader)+(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_NV_mesh_shader)+(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the currently bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ],
      "(VK_NV_mesh_shader)+(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "vkCmdDrawMeshTasksIndirectNV": {
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "drawCount",
          "text": " If drawCount is greater than 1, stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawMeshTasksIndirectCommandNV)"
        },
        {
          "vuid": "drawCount",
          "text": " If the multi-draw indirect feature is not enabled, drawCount must be 0 or 1"
        },
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point’s interface must have valid buffers bound"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "drawCount",
          "text": " If drawCount is equal to 1, +(offset + sizeof(VkDrawMeshTasksIndirectCommandNV))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "drawCount",
          "text": " If drawCount is greater than 1, +(stride {times} (drawCount - 1) + offset + sizeof(VkDrawMeshTasksIndirectCommandNV))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "drawCount",
          "text": " drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set"
        },
        {
          "vuid": "linearTilingFeatures",
          "text": " Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties"
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_NV_mesh_shader)+(VK_IMG_filter_cubic)": [
        {
          "vuid": "linearTilingFeatures",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must be of a format which supports cubic filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties"
        },
        {
          "vuid": "None",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        }
      ],
      "(VK_NV_mesh_shader)+(VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_NV_mesh_shader)+(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_NV_mesh_shader)+(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the currently bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ],
      "(VK_NV_mesh_shader)+(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "VkDrawMeshTasksIndirectCommandNV": {
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "taskCount",
          "text": " taskCount must be less than or equal to VkPhysicalDeviceMeshShaderPropertiesNV::maxDrawMeshTasksCount"
        }
      ]
    },
    "vkCmdDrawMeshTasksIndirectCountNV": {
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "countBuffer",
          "text": " If countBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "countBuffer",
          "text": " countBuffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "countBufferOffset",
          "text": " countBufferOffset must be a multiple of 4"
        },
        {
          "vuid": "stride",
          "text": " stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawMeshTasksIndirectCommandNV)"
        },
        {
          "vuid": "maxDrawCount",
          "text": " If maxDrawCount is greater than or equal to 1, +(stride {times} (maxDrawCount - 1) + offset + sizeof(VkDrawMeshTasksIndirectCommandNV))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "renderPass",
          "text": " The current render pass must be renderpass-compatibility,compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "subpass",
          "text": " The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS."
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS"
        },
        {
          "vuid": "None",
          "text": " If the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " If the count stored in countBuffer is equal to 1, +(offset + sizeof(VkDrawMeshTasksIndirectCommandNV))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " If the count stored in countBuffer is greater than 1, +(stride {times} (drawCount - 1) + offset + sizeof(VkDrawMeshTasksIndirectCommandNV))+ must be less than or equal to the size of buffer"
        },
        {
          "vuid": "countBuffer",
          "text": " The count stored in countBuffer must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount"
        },
        {
          "vuid": "None",
          "text": " Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set"
        },
        {
          "vuid": "linearTilingFeatures",
          "text": " Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties"
        },
        {
          "vuid": "None",
          "text": " Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "countBuffer",
          "text": " countBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_NV_mesh_shader)+(VK_KHR_multiview)": [
        {
          "vuid": "maxMultiviewInstanceIndex",
          "text": " If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex."
        }
      ],
      "(VK_NV_mesh_shader)+(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_NV_mesh_shader)+(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsEnable",
          "text": " If the currently bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set"
        }
      ]
    },
    "VkPipelineVertexInputStateCreateInfo": {
      "core": [
        {
          "vuid": "vertexBindingDescriptionCount",
          "text": " vertexBindingDescriptionCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindings"
        },
        {
          "vuid": "vertexAttributeDescriptionCount",
          "text": " vertexAttributeDescriptionCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputAttributes"
        },
        {
          "vuid": "binding",
          "text": " For every binding specified by each element of pVertexAttributeDescriptions, a VkVertexInputBindingDescription must exist in pVertexBindingDescriptions with the same value of binding"
        },
        {
          "vuid": "pVertexBindingDescriptions",
          "text": " All elements of pVertexBindingDescriptions must describe distinct binding numbers"
        },
        {
          "vuid": "pVertexAttributeDescriptions",
          "text": " All elements of pVertexAttributeDescriptions must describe distinct attribute locations"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkPipelineVertexInputDivisorStateCreateInfoEXT"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pVertexBindingDescriptions",
          "text": " If vertexBindingDescriptionCount is not 0, pVertexBindingDescriptions must be a valid pointer to an array of vertexBindingDescriptionCount valid VkVertexInputBindingDescription structures"
        },
        {
          "vuid": "pVertexAttributeDescriptions",
          "text": " If vertexAttributeDescriptionCount is not 0, pVertexAttributeDescriptions must be a valid pointer to an array of vertexAttributeDescriptionCount valid VkVertexInputAttributeDescription structures"
        }
      ]
    },
    "VkVertexInputBindingDescription": {
      "core": [
        {
          "vuid": "binding",
          "text": " binding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings"
        },
        {
          "vuid": "stride",
          "text": " stride must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindingStride"
        },
        {
          "vuid": "inputRate",
          "text": " inputRate must be a valid VkVertexInputRate value"
        }
      ]
    },
    "VkVertexInputAttributeDescription": {
      "core": [
        {
          "vuid": "location",
          "text": " location must be less than VkPhysicalDeviceLimits::maxVertexInputAttributes"
        },
        {
          "vuid": "binding",
          "text": " binding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings"
        },
        {
          "vuid": "offset",
          "text": " offset must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputAttributeOffset"
        },
        {
          "vuid": "format",
          "text": " format must be allowed as a vertex buffer format, as specified by the VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT flag in VkFormatProperties::bufferFeatures returned by vkGetPhysicalDeviceFormatProperties"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        }
      ]
    },
    "vkCmdBindVertexBuffers": {
      "core": [
        {
          "vuid": "firstBinding",
          "text": " firstBinding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings"
        },
        {
          "vuid": "firstBinding",
          "text": " The sum of firstBinding and bindingCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindings"
        },
        {
          "vuid": "pOffsets",
          "text": " All elements of pOffsets must be less than the size of the corresponding element in pBuffers"
        },
        {
          "vuid": "pBuffers",
          "text": " All elements of pBuffers must have been created with the VK_BUFFER_USAGE_VERTEX_BUFFER_BIT flag"
        },
        {
          "vuid": "pBuffers",
          "text": " Each element of pBuffers that is non-sparse must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pBuffers",
          "text": " pBuffers must be a valid pointer to an array of bindingCount valid VkBuffer handles"
        },
        {
          "vuid": "pOffsets",
          "text": " pOffsets must be a valid pointer to an array of bindingCount VkDeviceSize values"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "bindingCount",
          "text": " bindingCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and the elements of pBuffers must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkPipelineVertexInputDivisorStateCreateInfoEXT": {
      "(VK_EXT_vertex_attribute_divisor)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT"
        },
        {
          "vuid": "pVertexBindingDivisors",
          "text": " pVertexBindingDivisors must be a valid pointer to an array of vertexBindingDivisorCount VkVertexInputBindingDivisorDescriptionEXT structures"
        },
        {
          "vuid": "vertexBindingDivisorCount",
          "text": " vertexBindingDivisorCount must be greater than 0"
        }
      ]
    },
    "VkVertexInputBindingDivisorDescriptionEXT": {
      "(VK_EXT_vertex_attribute_divisor)": [
        {
          "vuid": "binding",
          "text": " binding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings"
        },
        {
          "vuid": "vertexAttributeInstanceRateZeroDivisor",
          "text": " If the vertexAttributeInstanceRateZeroDivisor feature is not enabled, divisor must not be 0"
        },
        {
          "vuid": "vertexAttributeInstanceRateDivisor",
          "text": " If the vertexAttributeInstanceRateDivisor feature is not enabled, divisor must be 1"
        },
        {
          "vuid": "divisor",
          "text": " divisor must be a value between 0 and VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::maxVertexAttribDivisor, inclusive."
        },
        {
          "vuid": "inputRate",
          "text": " VkVertexInputBindingDescription::inputRate must be of type VK_VERTEX_INPUT_RATE_INSTANCE for this binding."
        }
      ]
    },
    "VkPipelineTessellationStateCreateInfo": {
      "core": [
        {
          "vuid": "patchControlPoints",
          "text": " patchControlPoints must be greater than zero and less than or equal to VkPhysicalDeviceLimits::maxTessellationPatchSize"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkPipelineTessellationDomainOriginStateCreateInfo"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "VkPipelineTessellationDomainOriginStateCreateInfo": {
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO"
        },
        {
          "vuid": "domainOrigin",
          "text": " domainOrigin must be a valid VkTessellationDomainOrigin value"
        }
      ]
    },
    "VkPipelineViewportSwizzleStateCreateInfoNV": {
      "(VK_NV_viewport_swizzle)": [
        {
          "vuid": "viewportCount",
          "text": " viewportCount must match the viewportCount set in VkPipelineViewportStateCreateInfo"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "viewportCount",
          "text": " viewportCount must be greater than 0"
        }
      ]
    },
    "VkViewportSwizzleNV": {
      "(VK_NV_viewport_swizzle)": [
        {
          "vuid": "x",
          "text": " x must be a valid VkViewportCoordinateSwizzleNV value"
        },
        {
          "vuid": "y",
          "text": " y must be a valid VkViewportCoordinateSwizzleNV value"
        },
        {
          "vuid": "z",
          "text": " z must be a valid VkViewportCoordinateSwizzleNV value"
        },
        {
          "vuid": "w",
          "text": " w must be a valid VkViewportCoordinateSwizzleNV value"
        }
      ]
    },
    "VkPipelineViewportWScalingStateCreateInfoNV": {
      "(VK_NV_clip_space_w_scaling)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV"
        },
        {
          "vuid": "viewportCount",
          "text": " viewportCount must be greater than 0"
        }
      ]
    },
    "vkCmdSetViewportWScalingNV": {
      "(VK_NV_clip_space_w_scaling)": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV dynamic state enabled"
        },
        {
          "vuid": "firstViewport",
          "text": " firstViewport must be less than VkPhysicalDeviceLimits::maxViewports"
        },
        {
          "vuid": "firstViewport",
          "text": " The sum of firstViewport and viewportCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pViewportWScalings",
          "text": " pViewportWScalings must be a valid pointer to an array of viewportCount VkViewportWScalingNV structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "viewportCount",
          "text": " viewportCount must be greater than 0"
        }
      ]
    },
    "VkPipelineViewportStateCreateInfo": {
      "core": [
        {
          "vuid": "viewportCount",
          "text": " If the multiple viewports feature is not enabled, viewportCount must be 1"
        },
        {
          "vuid": "scissorCount",
          "text": " If the multiple viewports feature is not enabled, scissorCount must be 1"
        },
        {
          "vuid": "viewportCount",
          "text": " viewportCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive"
        },
        {
          "vuid": "scissorCount",
          "text": " scissorCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive"
        },
        {
          "vuid": "scissorCount",
          "text": " scissorCount and viewportCount must be identical"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, VkPipelineViewportExclusiveScissorStateCreateInfoNV, VkPipelineViewportShadingRateImageStateCreateInfoNV, VkPipelineViewportSwizzleStateCreateInfoNV, or VkPipelineViewportWScalingStateCreateInfoNV"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "viewportCount",
          "text": " viewportCount must be greater than 0"
        },
        {
          "vuid": "scissorCount",
          "text": " scissorCount must be greater than 0"
        }
      ],
      "(VK_NV_clip_space_w_scaling)": [
        {
          "vuid": "viewportWScalingEnable",
          "text": " If the viewportWScalingEnable member of a VkPipelineViewportWScalingStateCreateInfoNV structure chained to the pNext chain is VK_TRUE, the viewportCount member of the VkPipelineViewportWScalingStateCreateInfoNV structure must be equal to viewportCount"
        }
      ]
    },
    "vkCmdSetViewport": {
      "core": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_VIEWPORT dynamic state enabled"
        },
        {
          "vuid": "firstViewport",
          "text": " firstViewport must be less than VkPhysicalDeviceLimits::maxViewports"
        },
        {
          "vuid": "firstViewport",
          "text": " The sum of firstViewport and viewportCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive"
        },
        {
          "vuid": "firstViewport",
          "text": " If the multiple viewports feature is not enabled, firstViewport must be 0"
        },
        {
          "vuid": "viewportCount",
          "text": " If the multiple viewports feature is not enabled, viewportCount must be 1"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pViewports",
          "text": " pViewports must be a valid pointer to an array of viewportCount valid VkViewport structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "viewportCount",
          "text": " viewportCount must be greater than 0"
        }
      ]
    },
    "VkViewport": {
      "core": [
        {
          "vuid": "width",
          "text": " width must be greater than 0.0"
        },
        {
          "vuid": "width",
          "text": " width must be less than or equal to VkPhysicalDeviceLimits::maxViewportDimensions[0]"
        },
        {
          "vuid": "height",
          "text": " The absolute value of height must be less than or equal to VkPhysicalDeviceLimits::maxViewportDimensions[1]"
        },
        {
          "vuid": "x",
          "text": " x must be greater than or equal to viewportBoundsRange[0]"
        },
        {
          "vuid": "x",
          "text": " +(x + width)+ must be less than or equal to viewportBoundsRange[1]"
        },
        {
          "vuid": "y",
          "text": " y must be greater than or equal to viewportBoundsRange[0]"
        },
        {
          "vuid": "y",
          "text": " +(y + height)+ must be less than or equal to viewportBoundsRange[1]"
        }
      ],
      "!(VK_VERSION_1_1,VK_KHR_maintenance1,VK_AMD_negative_viewport_height)": [
        {
          "vuid": "height",
          "text": " height must be greater than 0.0"
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_maintenance1,VK_AMD_negative_viewport_height)": [
        {
          "vuid": "y",
          "text": " y must be less than or equal to viewportBoundsRange[1]"
        },
        {
          "vuid": "y",
          "text": " +(y + height)+ must be greater than or equal to viewportBoundsRange[0]"
        }
      ],
      "(VK_EXT_depth_range_unrestricted)": [
        {
          "vuid": "minDepth",
          "text": " Unless VK_EXT_depth_range_unrestricted extension is enabled minDepth must be between 0.0 and 1.0, inclusive"
        },
        {
          "vuid": "maxDepth",
          "text": " Unless VK_EXT_depth_range_unrestricted extension is enabled maxDepth must be between 0.0 and 1.0, inclusive"
        }
      ],
      "!(VK_EXT_depth_range_unrestricted)": [
        {
          "vuid": "minDepth",
          "text": " minDepth must be between 0.0 and 1.0, inclusive"
        },
        {
          "vuid": "maxDepth",
          "text": " maxDepth must be between 0.0 and 1.0, inclusive"
        }
      ]
    },
    "VkPipelineRasterizationStateCreateInfo": {
      "core": [
        {
          "vuid": "depthClampEnable",
          "text": " If the features-features-depthClamp,depth clamping feature is not enabled, depthClampEnable must be VK_FALSE"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkPipelineRasterizationConservativeStateCreateInfoEXT or VkPipelineRasterizationStateRasterizationOrderAMD"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "polygonMode",
          "text": " polygonMode must be a valid VkPolygonMode value"
        },
        {
          "vuid": "cullMode",
          "text": " cullMode must be a valid combination of VkCullModeFlagBits values"
        },
        {
          "vuid": "frontFace",
          "text": " frontFace must be a valid VkFrontFace value"
        }
      ],
      "!(VK_NV_fill_rectangle)": [
        {
          "vuid": "polygonMode",
          "text": " If the features-features-fillModeNonSolid,non-solid fill modes feature is not enabled, polygonMode must be VK_POLYGON_MODE_FILL"
        }
      ],
      "(VK_NV_fill_rectangle)": [
        {
          "vuid": "polygonMode",
          "text": " If the features-features-fillModeNonSolid,non-solid fill modes feature is not enabled, polygonMode must be VK_POLYGON_MODE_FILL or VK_POLYGON_MODE_FILL_RECTANGLE_NV"
        },
        {
          "vuid": "polygonMode",
          "text": " If the VK_NV_fill_rectangle extension is not enabled, polygonMode must not be VK_POLYGON_MODE_FILL_RECTANGLE_NV"
        }
      ]
    },
    "VkPipelineMultisampleStateCreateInfo": {
      "core": [
        {
          "vuid": "sampleShadingEnable",
          "text": " If the features-features-sampleRateShading,sample rate shading feature is not enabled, sampleShadingEnable must be VK_FALSE"
        },
        {
          "vuid": "alphaToOneEnable",
          "text": " If the features-features-alphaToOne,alpha to one feature is not enabled, alphaToOneEnable must be VK_FALSE"
        },
        {
          "vuid": "minSampleShading",
          "text": " minSampleShading must be in the range +[0,1]+"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkPipelineCoverageModulationStateCreateInfoNV, VkPipelineCoverageToColorStateCreateInfoNV, or VkPipelineSampleLocationsStateCreateInfoEXT"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "rasterizationSamples",
          "text": " rasterizationSamples must be a valid VkSampleCountFlagBits value"
        },
        {
          "vuid": "pSampleMask",
          "text": " If pSampleMask is not NULL, pSampleMask must be a valid pointer to an array of \\(\\lceil{\\mathit{rasterizationSamples} \\over 32}\\rceil\\) VkSampleMask values"
        }
      ],
      "(VK_NV_framebuffer_mixed_samples)": [
        {
          "vuid": "rasterizationSamples",
          "text": " If the subpass has any color attachments and rasterizationSamples is greater than the number of color samples, then sampleShadingEnable must be VK_FALSE"
        }
      ]
    },
    "VkPipelineRasterizationStateRasterizationOrderAMD": {
      "(VK_AMD_rasterization_order)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD"
        },
        {
          "vuid": "rasterizationOrder",
          "text": " rasterizationOrder must be a valid VkRasterizationOrderAMD value"
        }
      ]
    },
    "VkPipelineSampleLocationsStateCreateInfoEXT": {
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT"
        },
        {
          "vuid": "sampleLocationsInfo",
          "text": " sampleLocationsInfo must be a valid VkSampleLocationsInfoEXT structure"
        }
      ]
    },
    "VkSampleLocationsInfoEXT": {
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "sampleLocationsPerPixel",
          "text": " sampleLocationsPerPixel must be a bit value that is set in VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationSampleCounts"
        },
        {
          "vuid": "sampleLocationsCount",
          "text": " sampleLocationsCount must equal +sampleLocationsPerPixel {times} sampleLocationGridSize.width {times} sampleLocationGridSize.height+"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT"
        },
        {
          "vuid": "sampleLocationsPerPixel",
          "text": " sampleLocationsPerPixel must be a valid VkSampleCountFlagBits value"
        },
        {
          "vuid": "pSampleLocations",
          "text": " pSampleLocations must be a valid pointer to an array of sampleLocationsCount VkSampleLocationEXT structures"
        },
        {
          "vuid": "sampleLocationsCount",
          "text": " sampleLocationsCount must be greater than 0"
        }
      ]
    },
    "vkCmdSetSampleLocationsEXT": {
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT dynamic state enabled"
        },
        {
          "vuid": "sampleLocationsPerPixel",
          "text": " The sampleLocationsPerPixel member of pSampleLocationsInfo must equal the rasterizationSamples member of the VkPipelineMultisampleStateCreateInfo structure the bound graphics pipeline has been created with"
        },
        {
          "vuid": "variableSampleLocations",
          "text": " If VkPhysicalDeviceSampleLocationsPropertiesEXT::variableSampleLocations is VK_FALSE then the current render pass must have been begun by specifying a VkRenderPassSampleLocationsBeginInfoEXT structure whose pPostSubpassSampleLocations member contains an element with a subpassIndex matching the current subpass index and the sampleLocationsInfo member of that element must match the sample locations state pointed to by pSampleLocationsInfo"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pSampleLocationsInfo",
          "text": " pSampleLocationsInfo must be a valid pointer to a valid VkSampleLocationsInfoEXT structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        }
      ]
    },
    "VkPipelineViewportShadingRateImageStateCreateInfoNV": {
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "viewportCount",
          "text": " If the multiple viewports feature is not enabled, viewportCount must be 0 or 1"
        },
        {
          "vuid": "viewportCount",
          "text": " viewportCount must be less than or equal to VkPhysicalDeviceLimits::maxViewports"
        },
        {
          "vuid": "shadingRateImageEnable",
          "text": " If shadingRateImageEnable is VK_TRUE, viewportCount must be equal to the viewportCount member of VkPipelineViewportStateCreateInfo"
        },
        {
          "vuid": "pDynamicStates",
          "text": " If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV, pShadingRatePalettes must be a valid pointer to an array of viewportCount VkShadingRatePaletteNV structures"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV"
        },
        {
          "vuid": "pShadingRatePalettes",
          "text": " If viewportCount is not 0, and pShadingRatePalettes is not NULL, pShadingRatePalettes must be a valid pointer to an array of viewportCount valid VkShadingRatePaletteNV structures"
        }
      ]
    },
    "vkCmdBindShadingRateImageNV": {
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "None",
          "text": " The features-features-shadingRateImage,shading rate image feature must be enabled."
        },
        {
          "vuid": "imageView",
          "text": " If imageView is not VK_NULL_HANDLE, it must be a valid VkImageView handle of type VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY."
        },
        {
          "vuid": "imageView",
          "text": " If imageView is not VK_NULL_HANDLE, it must have a format of VK_FORMAT_R8_UINT."
        },
        {
          "vuid": "imageView",
          "text": " If imageView is not VK_NULL_HANDLE, the image must have been created with VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV set"
        },
        {
          "vuid": "imageView",
          "text": " If imageView is not VK_NULL_HANDLE, imageLayout must match the actual VkImageLayout of each subresource accessible from imageView at the time the subresource is accessed."
        },
        {
          "vuid": "imageLayout",
          "text": " If imageView is not VK_NULL_HANDLE, imageLayout must be VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV or VK_IMAGE_LAYOUT_GENERAL."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "imageView",
          "text": " imageView must be a valid VkImageView handle"
        },
        {
          "vuid": "imageLayout",
          "text": " imageLayout must be a valid VkImageLayout value"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "commonparent",
          "text": " Both of commandBuffer, and imageView must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdSetViewportShadingRatePaletteNV": {
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "None",
          "text": " The features-features-shadingRateImage,shading rate image feature must be enabled."
        },
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV dynamic state enabled"
        },
        {
          "vuid": "firstViewport",
          "text": " firstViewport must be less than VkPhysicalDeviceLimits::maxViewports"
        },
        {
          "vuid": "firstViewport",
          "text": " The sum of firstViewport and viewportCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive"
        },
        {
          "vuid": "firstViewport",
          "text": " If the multiple viewports feature is not enabled, firstViewport must be 0"
        },
        {
          "vuid": "viewportCount",
          "text": " If the multiple viewports feature is not enabled, viewportCount must be 1"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pShadingRatePalettes",
          "text": " pShadingRatePalettes must be a valid pointer to an array of viewportCount valid VkShadingRatePaletteNV structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "viewportCount",
          "text": " viewportCount must be greater than 0"
        }
      ]
    },
    "VkShadingRatePaletteNV": {
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "shadingRatePaletteEntryCount",
          "text": " shadingRatePaletteEntryCount must be between 1 and VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRatePaletteSize, inclusive"
        },
        {
          "vuid": "pShadingRatePaletteEntries",
          "text": " pShadingRatePaletteEntries must be a valid pointer to an array of shadingRatePaletteEntryCount valid VkShadingRatePaletteEntryNV values"
        },
        {
          "vuid": "shadingRatePaletteEntryCount",
          "text": " shadingRatePaletteEntryCount must be greater than 0"
        }
      ]
    },
    "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV": {
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "sampleOrderType",
          "text": " If sampleOrderType is not VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV, customSamplerOrderCount must be 0"
        },
        {
          "vuid": "pCustomSampleOrders",
          "text": " The array pCustomSampleOrders must not contain two structures with matching values for both the shadingRate and sampleCount members."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV"
        },
        {
          "vuid": "sampleOrderType",
          "text": " sampleOrderType must be a valid VkCoarseSampleOrderTypeNV value"
        },
        {
          "vuid": "pCustomSampleOrders",
          "text": " If customSampleOrderCount is not 0, pCustomSampleOrders must be a valid pointer to an array of customSampleOrderCount valid VkCoarseSampleOrderCustomNV structures"
        }
      ]
    },
    "VkCoarseSampleOrderCustomNV": {
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "shadingRate",
          "text": " shadingRate must be a shading rate that generates fragments with more than one pixel."
        },
        {
          "vuid": "sampleCount",
          "text": " sampleCount must correspond to a sample count enumerated in VkSampleCountFlags whose corresponding bit is set in VkPhysicalDeviceLimits::framebufferNoAttachmentsSampleCounts."
        },
        {
          "vuid": "sampleLocationCount",
          "text": " sampleLocationCount must be equal to the product of sampleCount, the fragment width for shadingRate, and the fragment height for shadingRate."
        },
        {
          "vuid": "sampleLocationCount",
          "text": " sampleLocationCount must be less than or equal to the value of VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRateMaxCoarseSamples."
        },
        {
          "vuid": "pSampleLocations",
          "text": " The array pSampleLocations must contain exactly one entry for every combination of valid values for pixelX, pixelY, and sample in the structure VkCoarseSampleOrderCustomNV."
        },
        {
          "vuid": "shadingRate",
          "text": " shadingRate must be a valid VkShadingRatePaletteEntryNV value"
        },
        {
          "vuid": "pSampleLocations",
          "text": " pSampleLocations must be a valid pointer to an array of sampleLocationCount VkCoarseSampleLocationNV structures"
        },
        {
          "vuid": "sampleLocationCount",
          "text": " sampleLocationCount must be greater than 0"
        }
      ]
    },
    "VkCoarseSampleLocationNV": {
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "pixelX",
          "text": " pixelX must be less than the width (in pixels) of the fragment."
        },
        {
          "vuid": "pixelY",
          "text": " pixelY must be less than the height (in pixels) of the fragment."
        },
        {
          "vuid": "sample",
          "text": " sample must be less than the number of coverage samples in each pixel belonging to the fragment."
        }
      ]
    },
    "vkCmdSetCoarseSampleOrderNV": {
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "sampleOrderType",
          "text": " If sampleOrderType is not VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV, customSamplerOrderCount must be 0"
        },
        {
          "vuid": "pCustomSampleOrders",
          "text": " The array pCustomSampleOrders must not contain two structures with matching values for both the shadingRate and sampleCount members."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "sampleOrderType",
          "text": " sampleOrderType must be a valid VkCoarseSampleOrderTypeNV value"
        },
        {
          "vuid": "pCustomSampleOrders",
          "text": " If customSampleOrderCount is not 0, pCustomSampleOrders must be a valid pointer to an array of customSampleOrderCount valid VkCoarseSampleOrderCustomNV structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        }
      ]
    },
    "vkCmdSetLineWidth": {
      "core": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_LINE_WIDTH dynamic state enabled"
        },
        {
          "vuid": "lineWidth",
          "text": " If the wide lines feature is not enabled, lineWidth must be 1.0"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        }
      ]
    },
    "vkCmdSetDepthBias": {
      "core": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_DEPTH_BIAS dynamic state enabled"
        },
        {
          "vuid": "depthBiasClamp",
          "text": " If the depth bias clamping feature is not enabled, depthBiasClamp must be 0.0"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        }
      ]
    },
    "VkPipelineRasterizationConservativeStateCreateInfoEXT": {
      "(VK_EXT_conservative_rasterization)": [
        {
          "vuid": "extraPrimitiveOverestimationSize",
          "text": " extraPrimitiveOverestimationSize must be in the range of 0.0 to VkPhysicalDeviceConservativeRasterizationPropertiesEXT::maxExtraPrimitiveOverestimationSize inclusive"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "conservativeRasterizationMode",
          "text": " conservativeRasterizationMode must be a valid VkConservativeRasterizationModeEXT value"
        }
      ]
    },
    "VkPipelineDiscardRectangleStateCreateInfoEXT": {
      "(VK_EXT_discard_rectangles)": [
        {
          "vuid": "discardRectangleCount",
          "text": " discardRectangleCount must be between 0 and VkPhysicalDeviceDiscardRectanglePropertiesEXT::maxDiscardRectangles, inclusive"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "discardRectangleMode",
          "text": " discardRectangleMode must be a valid VkDiscardRectangleModeEXT value"
        }
      ]
    },
    "vkCmdSetDiscardRectangleEXT": {
      "(VK_EXT_discard_rectangles)": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT dynamic state enabled"
        },
        {
          "vuid": "firstDiscardRectangle",
          "text": " The sum of firstDiscardRectangle and discardRectangleCount must be less than or equal to VkPhysicalDeviceDiscardRectanglePropertiesEXT::maxDiscardRectangles"
        },
        {
          "vuid": "x",
          "text": " The x and y member of offset in each VkRect2D element of pDiscardRectangles must be greater than or equal to 0"
        },
        {
          "vuid": "offset",
          "text": " Evaluation of +(offset.x + extent.width)+ in each VkRect2D element of pDiscardRectangles must not cause a signed integer addition overflow"
        },
        {
          "vuid": "offset",
          "text": " Evaluation of +(offset.y + extent.height)+ in each VkRect2D element of pDiscardRectangles must not cause a signed integer addition overflow"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pDiscardRectangles",
          "text": " pDiscardRectangles must be a valid pointer to an array of discardRectangleCount VkRect2D structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "discardRectangleCount",
          "text": " discardRectangleCount must be greater than 0"
        }
      ]
    },
    "vkCmdSetScissor": {
      "core": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_SCISSOR dynamic state enabled"
        },
        {
          "vuid": "firstScissor",
          "text": " firstScissor must be less than VkPhysicalDeviceLimits::maxViewports"
        },
        {
          "vuid": "firstScissor",
          "text": " The sum of firstScissor and scissorCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive"
        },
        {
          "vuid": "firstScissor",
          "text": " If the multiple viewports feature is not enabled, firstScissor must be 0"
        },
        {
          "vuid": "scissorCount",
          "text": " If the multiple viewports feature is not enabled, scissorCount must be 1"
        },
        {
          "vuid": "x",
          "text": " The x and y members of offset must be greater than or equal to 0"
        },
        {
          "vuid": "offset",
          "text": " Evaluation of +(offset.x + extent.width)+ must not cause a signed integer addition overflow"
        },
        {
          "vuid": "offset",
          "text": " Evaluation of +(offset.y + extent.height)+ must not cause a signed integer addition overflow"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pScissors",
          "text": " pScissors must be a valid pointer to an array of scissorCount VkRect2D structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "scissorCount",
          "text": " scissorCount must be greater than 0"
        }
      ]
    },
    "VkPipelineViewportExclusiveScissorStateCreateInfoNV": {
      "(VK_NV_scissor_exclusive)": [
        {
          "vuid": "exclusiveScissorCount",
          "text": " If the multiple viewports feature is not enabled, exclusiveScissorCount must be 0 or 1"
        },
        {
          "vuid": "exclusiveScissorCount",
          "text": " exclusiveScissorCount must be less than or equal to VkPhysicalDeviceLimits::maxViewports"
        },
        {
          "vuid": "exclusiveScissorCount",
          "text": " exclusiveScissorCount must be 0 or identical to the viewportCount member of VkPipelineViewportStateCreateInfo"
        },
        {
          "vuid": "pDynamicStates",
          "text": " If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV and exclusiveScissorCount is not 0, pExclusiveScissors must be a valid pointer to an array of exclusiveScissorCount VkRect2D structures"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV"
        },
        {
          "vuid": "pExclusiveScissors",
          "text": " If exclusiveScissorCount is not 0, and pExclusiveScissors is not NULL, pExclusiveScissors must be a valid pointer to an array of exclusiveScissorCount VkRect2D structures"
        }
      ]
    },
    "vkCmdSetExclusiveScissorNV": {
      "(VK_NV_scissor_exclusive)": [
        {
          "vuid": "None",
          "text": " The features-features-exclusiveScissor,exclusive scissor feature must be enabled."
        },
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV dynamic state enabled"
        },
        {
          "vuid": "firstExclusiveScissor",
          "text": " firstExclusiveScissor must be less than VkPhysicalDeviceLimits::maxViewports"
        },
        {
          "vuid": "firstExclusiveScissor",
          "text": " The sum of firstExclusiveScissor and exclusiveScissorCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive"
        },
        {
          "vuid": "firstExclusiveScissor",
          "text": " If the multiple viewports feature is not enabled, firstExclusiveScissor must be 0"
        },
        {
          "vuid": "exclusiveScissorCount",
          "text": " If the multiple viewports feature is not enabled, exclusiveScissorCount must be 1"
        },
        {
          "vuid": "x",
          "text": " The x and y members of offset in each member of pExclusiveScissors must be greater than or equal to 0"
        },
        {
          "vuid": "offset",
          "text": " Evaluation of +(offset.x + extent.width)+ for each member of pExclusiveScissors must not cause a signed integer addition overflow"
        },
        {
          "vuid": "offset",
          "text": " Evaluation of +(offset.y + extent.height)+ for each member of pExclusiveScissors must not cause a signed integer addition overflow"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pExclusiveScissors",
          "text": " pExclusiveScissors must be a valid pointer to an array of exclusiveScissorCount VkRect2D structures"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        },
        {
          "vuid": "exclusiveScissorCount",
          "text": " exclusiveScissorCount must be greater than 0"
        }
      ]
    },
    "VkPipelineDepthStencilStateCreateInfo": {
      "core": [
        {
          "vuid": "depthBoundsTestEnable",
          "text": " If the features-features-depthBounds,depth bounds testing feature is not enabled, depthBoundsTestEnable must be VK_FALSE"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "depthCompareOp",
          "text": " depthCompareOp must be a valid VkCompareOp value"
        },
        {
          "vuid": "front",
          "text": " front must be a valid VkStencilOpState structure"
        },
        {
          "vuid": "back",
          "text": " back must be a valid VkStencilOpState structure"
        }
      ]
    },
    "vkCmdSetDepthBounds": {
      "core": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS dynamic state enabled"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        }
      ],
      "(VK_EXT_depth_range_unrestricted)": [
        {
          "vuid": "minDepthBounds",
          "text": " Unless the VK_EXT_depth_range_unrestricted extension is enabled minDepthBounds must be between 0.0 and 1.0, inclusive"
        },
        {
          "vuid": "maxDepthBounds",
          "text": " Unless the VK_EXT_depth_range_unrestricted extension is enabled maxDepthBounds must be between 0.0 and 1.0, inclusive"
        }
      ],
      "!(VK_EXT_depth_range_unrestricted)": [
        {
          "vuid": "minDepthBounds",
          "text": " minDepthBounds must be between 0.0 and 1.0, inclusive"
        },
        {
          "vuid": "maxDepthBounds",
          "text": " maxDepthBounds must be between 0.0 and 1.0, inclusive"
        }
      ]
    },
    "VkStencilOpState": {
      "core": [
        {
          "vuid": "failOp",
          "text": " failOp must be a valid VkStencilOp value"
        },
        {
          "vuid": "passOp",
          "text": " passOp must be a valid VkStencilOp value"
        },
        {
          "vuid": "depthFailOp",
          "text": " depthFailOp must be a valid VkStencilOp value"
        },
        {
          "vuid": "compareOp",
          "text": " compareOp must be a valid VkCompareOp value"
        }
      ]
    },
    "vkCmdSetStencilCompareMask": {
      "core": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK dynamic state enabled"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "faceMask",
          "text": " faceMask must be a valid combination of VkStencilFaceFlagBits values"
        },
        {
          "vuid": "faceMask",
          "text": " faceMask must not be 0"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        }
      ]
    },
    "vkCmdSetStencilWriteMask": {
      "core": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_STENCIL_WRITE_MASK dynamic state enabled"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "faceMask",
          "text": " faceMask must be a valid combination of VkStencilFaceFlagBits values"
        },
        {
          "vuid": "faceMask",
          "text": " faceMask must not be 0"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        }
      ]
    },
    "vkCmdSetStencilReference": {
      "core": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_STENCIL_REFERENCE dynamic state enabled"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "faceMask",
          "text": " faceMask must be a valid combination of VkStencilFaceFlagBits values"
        },
        {
          "vuid": "faceMask",
          "text": " faceMask must not be 0"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        }
      ]
    },
    "VkPipelineRepresentativeFragmentTestStateCreateInfoNV": {
      "(VK_NV_representative_fragment_test)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV"
        }
      ]
    },
    "VkPipelineCoverageToColorStateCreateInfoNV": {
      "(VK_NV_fragment_coverage_to_color)": [
        {
          "vuid": "coverageToColorEnable",
          "text": " If coverageToColorEnable is VK_TRUE, then the render pass subpass indicated by VkGraphicsPipelineCreateInfo::renderPass and VkGraphicsPipelineCreateInfo::subpass must have a color attachment at the location selected by coverageToColorLocation, with a VkFormat of VK_FORMAT_R8_UINT, VK_FORMAT_R8_SINT, VK_FORMAT_R16_UINT, VK_FORMAT_R16_SINT, VK_FORMAT_R32_UINT, or VK_FORMAT_R32_SINT"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "VkPipelineCoverageModulationStateCreateInfoNV": {
      "(VK_NV_framebuffer_mixed_samples)": [
        {
          "vuid": "coverageModulationTableEnable",
          "text": " If coverageModulationTableEnable is VK_TRUE, coverageModulationTableCount must be equal to the number of rasterization samples divided by the number of color samples in the subpass."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "coverageModulationMode",
          "text": " coverageModulationMode must be a valid VkCoverageModulationModeNV value"
        },
        {
          "vuid": "coverageModulationTableCount",
          "text": " coverageModulationTableCount must be greater than 0"
        }
      ]
    },
    "VkPipelineColorBlendStateCreateInfo": {
      "core": [
        {
          "vuid": "pAttachments",
          "text": " If the features-features-independentBlend,independent blending feature is not enabled, all elements of pAttachments must be identical"
        },
        {
          "vuid": "logicOpEnable",
          "text": " If the features-features-logicOp,logic operations feature is not enabled, logicOpEnable must be VK_FALSE"
        },
        {
          "vuid": "logicOpEnable",
          "text": " If logicOpEnable is VK_TRUE, logicOp must be a valid VkLogicOp value"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkPipelineColorBlendAdvancedStateCreateInfoEXT"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pAttachments",
          "text": " If attachmentCount is not 0, pAttachments must be a valid pointer to an array of attachmentCount valid VkPipelineColorBlendAttachmentState structures"
        }
      ]
    },
    "VkPipelineColorBlendAttachmentState": {
      "core": [
        {
          "vuid": "srcColorBlendFactor",
          "text": " If the features-features-dualSrcBlend,dual source blending feature is not enabled, srcColorBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"
        },
        {
          "vuid": "dstColorBlendFactor",
          "text": " If the features-features-dualSrcBlend,dual source blending feature is not enabled, dstColorBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"
        },
        {
          "vuid": "srcAlphaBlendFactor",
          "text": " If the features-features-dualSrcBlend,dual source blending feature is not enabled, srcAlphaBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"
        },
        {
          "vuid": "dstAlphaBlendFactor",
          "text": " If the features-features-dualSrcBlend,dual source blending feature is not enabled, dstAlphaBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"
        },
        {
          "vuid": "srcColorBlendFactor",
          "text": " srcColorBlendFactor must be a valid VkBlendFactor value"
        },
        {
          "vuid": "dstColorBlendFactor",
          "text": " dstColorBlendFactor must be a valid VkBlendFactor value"
        },
        {
          "vuid": "colorBlendOp",
          "text": " colorBlendOp must be a valid VkBlendOp value"
        },
        {
          "vuid": "srcAlphaBlendFactor",
          "text": " srcAlphaBlendFactor must be a valid VkBlendFactor value"
        },
        {
          "vuid": "dstAlphaBlendFactor",
          "text": " dstAlphaBlendFactor must be a valid VkBlendFactor value"
        },
        {
          "vuid": "alphaBlendOp",
          "text": " alphaBlendOp must be a valid VkBlendOp value"
        },
        {
          "vuid": "colorWriteMask",
          "text": " colorWriteMask must be a valid combination of VkColorComponentFlagBits values"
        }
      ],
      "(VK_EXT_blend_operation_advanced)": [
        {
          "vuid": "colorBlendOp",
          "text": " If either of colorBlendOp or alphaBlendOp is an framebuffer-blend-advanced,advanced blend operation, then colorBlendOp must equal alphaBlendOp"
        },
        {
          "vuid": "advancedBlendIndependentBlend",
          "text": " If VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendIndependentBlend is VK_FALSE and colorBlendOp is an framebuffer-blend-advanced,advanced blend operation, then colorBlendOp must be the same for all attachments."
        },
        {
          "vuid": "advancedBlendIndependentBlend",
          "text": " If VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendIndependentBlend is VK_FALSE and alphaBlendOp is an framebuffer-blend-advanced,advanced blend operation, then alphaBlendOp must be the same for all attachments."
        },
        {
          "vuid": "advancedBlendAllOperations",
          "text": " If VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendAllOperations is VK_FALSE, then colorBlendOp must not be VK_BLEND_OP_ZERO_EXT, VK_BLEND_OP_SRC_EXT, VK_BLEND_OP_DST_EXT, VK_BLEND_OP_SRC_OVER_EXT, VK_BLEND_OP_DST_OVER_EXT, VK_BLEND_OP_SRC_IN_EXT, VK_BLEND_OP_DST_IN_EXT, VK_BLEND_OP_SRC_OUT_EXT, VK_BLEND_OP_DST_OUT_EXT, VK_BLEND_OP_SRC_ATOP_EXT, VK_BLEND_OP_DST_ATOP_EXT, VK_BLEND_OP_XOR_EXT, VK_BLEND_OP_INVERT_EXT, VK_BLEND_OP_INVERT_RGB_EXT, VK_BLEND_OP_LINEARDODGE_EXT, VK_BLEND_OP_LINEARBURN_EXT, VK_BLEND_OP_VIVIDLIGHT_EXT, VK_BLEND_OP_LINEARLIGHT_EXT, VK_BLEND_OP_PINLIGHT_EXT, VK_BLEND_OP_HARDMIX_EXT, VK_BLEND_OP_PLUS_EXT, VK_BLEND_OP_PLUS_CLAMPED_EXT, VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT, VK_BLEND_OP_PLUS_DARKER_EXT, VK_BLEND_OP_MINUS_EXT, VK_BLEND_OP_MINUS_CLAMPED_EXT, VK_BLEND_OP_CONTRAST_EXT, VK_BLEND_OP_INVERT_OVG_EXT, VK_BLEND_OP_RED_EXT, VK_BLEND_OP_GREEN_EXT, or VK_BLEND_OP_BLUE_EXT"
        },
        {
          "vuid": "colorBlendOp",
          "text": " If colorBlendOp or alphaBlendOp is an framebuffer-blend-advanced,advanced blend operation, then VkSubpassDescription::colorAttachmentCount of the subpass this pipeline is compiled against must be less than or equal to VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendMaxColorAttachments"
        }
      ]
    },
    "vkCmdSetBlendConstants": {
      "core": [
        {
          "vuid": "None",
          "text": " The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_BLEND_CONSTANTS dynamic state enabled"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics operations"
        }
      ]
    },
    "VkPipelineColorBlendAdvancedStateCreateInfoEXT": {
      "(VK_EXT_blend_operation_advanced)": [
        {
          "vuid": "srcPremultiplied",
          "text": " If the features-limits-advancedBlendNonPremultipliedSrcColor,non-premultiplied source color property is not supported, srcPremultiplied must be VK_TRUE"
        },
        {
          "vuid": "dstPremultiplied",
          "text": " If the features-limits-advancedBlendNonPremultipliedDstColor,non-premultiplied destination color property is not supported, dstPremultiplied must be VK_TRUE"
        },
        {
          "vuid": "blendOverlap",
          "text": " If the features-limits-advancedBlendCorrelatedOverlap,correlated overlap property is not supported, blendOverlap must be VK_BLEND_OVERLAP_UNCORRELATED_EXT"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT"
        },
        {
          "vuid": "blendOverlap",
          "text": " blendOverlap must be a valid VkBlendOverlapEXT value"
        }
      ]
    },
    "vkCmdDispatch": {
      "core": [
        {
          "vuid": "groupCountX",
          "text": " groupCountX must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0]"
        },
        {
          "vuid": "groupCountY",
          "text": " groupCountY must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1]"
        },
        {
          "vuid": "groupCountZ",
          "text": " groupCountZ must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[2]"
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " A valid compute pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_COMPUTE"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE, a push constant value must have been set for VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for push constants with the one used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        }
      ],
      "(VK_IMG_filter_cubic)": [
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with with VK_FILTER_CUBIC_IMG as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG."
        },
        {
          "vuid": "None",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_POINT_COMPUTE writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the compute pipeline stage in the VkPipeline object bound to VK_PIPELINE_POINT_COMPUTE reads from any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "vkCmdDispatchIndirect": {
      "core": [
        {
          "vuid": "buffer",
          "text": " If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object"
        },
        {
          "vuid": "None",
          "text": " For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline"
        },
        {
          "vuid": "None",
          "text": " A valid compute pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_COMPUTE"
        },
        {
          "vuid": "buffer",
          "text": " buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
        },
        {
          "vuid": "offset",
          "text": " offset must be a multiple of 4"
        },
        {
          "vuid": "offset",
          "text": " The sum of offset and the size of VkDispatchIndirectCommand must be less than or equal to the size of buffer"
        },
        {
          "vuid": "None",
          "text": " For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE, a push constant value must have been set for VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for push constants with the one used to create the current VkPipeline, as described in descriptorsets-compatibility"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If the features-features-robustBufferAccess,robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set"
        },
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        },
        {
          "vuid": "commonparent",
          "text": " Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ],
      "(VK_IMG_filter_cubic)": [
        {
          "vuid": "None",
          "text": " If a VkImageView is sampled with with VK_FILTER_CUBIC_IMG as a result of this command, then the image view’s resources-image-view-format-features,format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG."
        },
        {
          "vuid": "None",
          "text": " Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
        }
      ],
      "(VK_VERSION_1_1)": [
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_POINT_COMPUTE writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer."
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a protected command buffer, and any pipeline stage other than the compute pipeline stage in the VkPipeline object bound to VK_PIPELINE_POINT_COMPUTE reads from any image or buffer, the image or buffer must not be a protected image or protected buffer."
        }
      ],
      "(VK_NV_corner_sampled_image)": [
        {
          "vuid": "flags",
          "text": " Any VkImage created with a VkImageCreateInfo::flags containing VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV sampled as a result of this command must only be sampled using a VkSamplerAddressMode of VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE."
        }
      ]
    },
    "VkDispatchIndirectCommand": {
      "core": [
        {
          "vuid": "x",
          "text": " x must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0]"
        },
        {
          "vuid": "y",
          "text": " y must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1]"
        },
        {
          "vuid": "z",
          "text": " z must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[2]"
        }
      ]
    },
    "vkCmdDispatchBase": {
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "None",
          "text": " All valid usage rules from vkCmdDispatch apply"
        },
        {
          "vuid": "baseGroupX",
          "text": " baseGroupX must be less than VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0]"
        },
        {
          "vuid": "baseGroupX",
          "text": " baseGroupX must be less than VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1]"
        },
        {
          "vuid": "baseGroupZ",
          "text": " baseGroupZ must be less than VkPhysicalDeviceLimits::maxComputeWorkGroupCount[2]"
        },
        {
          "vuid": "groupCountX",
          "text": " groupCountX must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0] minus baseGroupX"
        },
        {
          "vuid": "groupCountY",
          "text": " groupCountY must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1] minus baseGroupY"
        },
        {
          "vuid": "groupCountZ",
          "text": " groupCountZ must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[2] minus baseGroupZ"
        },
        {
          "vuid": "baseGroupX",
          "text": " If any of baseGroupX, baseGroupY, or baseGroupZ are not zero, then the bound compute pipeline must have been created with the VK_PIPELINE_CREATE_DISPATCH_BASE flag."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called outside of a render pass instance"
        }
      ]
    },
    "vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pFeatures",
          "text": " pFeatures must be a valid pointer to a VkDeviceGeneratedCommandsFeaturesNVX structure"
        },
        {
          "vuid": "pLimits",
          "text": " pLimits must be a valid pointer to a VkDeviceGeneratedCommandsLimitsNVX structure"
        }
      ]
    },
    "VkDeviceGeneratedCommandsFeaturesNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "VkDeviceGeneratedCommandsLimitsNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkCreateObjectTableNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkObjectTableCreateInfoNVX structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pObjectTable",
          "text": " pObjectTable must be a valid pointer to a VkObjectTableNVX handle"
        }
      ]
    },
    "VkObjectTableCreateInfoNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "computeBindingPointSupport",
          "text": " If the VkDeviceGeneratedCommandsFeaturesNVX::computeBindingPointSupport feature is not enabled, pObjectEntryUsageFlags must not contain VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX"
        },
        {
          "vuid": "pObjectEntryCounts",
          "text": " Any value within pObjectEntryCounts must not exceed VkDeviceGeneratedCommandsLimitsNVX::maxObjectEntryCounts"
        },
        {
          "vuid": "maxUniformBuffersPerDescriptor",
          "text": " maxUniformBuffersPerDescriptor must be within the limits supported by the device."
        },
        {
          "vuid": "maxStorageBuffersPerDescriptor",
          "text": " maxStorageBuffersPerDescriptor must be within the limits supported by the device."
        },
        {
          "vuid": "maxStorageImagesPerDescriptor",
          "text": " maxStorageImagesPerDescriptor must be within the limits supported by the device."
        },
        {
          "vuid": "maxSampledImagesPerDescriptor",
          "text": " maxSampledImagesPerDescriptor must be within the limits supported by the device."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "pObjectEntryTypes",
          "text": " pObjectEntryTypes must be a valid pointer to an array of objectCount valid VkObjectEntryTypeNVX values"
        },
        {
          "vuid": "pObjectEntryCounts",
          "text": " pObjectEntryCounts must be a valid pointer to an array of objectCount uint32_t values"
        },
        {
          "vuid": "pObjectEntryUsageFlags",
          "text": " pObjectEntryUsageFlags must be a valid pointer to an array of objectCount valid combinations of VkObjectEntryUsageFlagBitsNVX values"
        },
        {
          "vuid": "pObjectEntryUsageFlags",
          "text": " Each element of pObjectEntryUsageFlags must not be 0"
        },
        {
          "vuid": "objectCount",
          "text": " objectCount must be greater than 0"
        }
      ]
    },
    "vkDestroyObjectTableNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "objectTable",
          "text": " All submitted commands that refer to objectTable must have completed execution."
        },
        {
          "vuid": "objectTable",
          "text": " If VkAllocationCallbacks were provided when objectTable was created, a compatible set of callbacks must be provided here."
        },
        {
          "vuid": "objectTable",
          "text": " If no VkAllocationCallbacks were provided when objectTable was created, pAllocator must be NULL."
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "objectTable",
          "text": " objectTable must be a valid VkObjectTableNVX handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "objectTable",
          "text": " objectTable must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkRegisterObjectsNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "pObjectTableEntry",
          "text": " The contents of pObjectTableEntry must yield plausible bindings supported by the device."
        },
        {
          "vuid": "pObjectIndices",
          "text": " At any pObjectIndices there must not be a registered resource already."
        },
        {
          "vuid": "pObjectIndices",
          "text": " Any value inside pObjectIndices must be below the appropriate VkObjectTableCreateInfoNVX::pObjectEntryCounts limits provided at objectTable creation time."
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "objectTable",
          "text": " objectTable must be a valid VkObjectTableNVX handle"
        },
        {
          "vuid": "ppObjectTableEntries",
          "text": " ppObjectTableEntries must be a valid pointer to an array of objectCount valid VkObjectTableEntryNVX structures"
        },
        {
          "vuid": "pObjectIndices",
          "text": " pObjectIndices must be a valid pointer to an array of objectCount uint32_t values"
        },
        {
          "vuid": "objectCount",
          "text": " objectCount must be greater than 0"
        },
        {
          "vuid": "objectTable",
          "text": " objectTable must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "VkObjectTableEntryNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "computeBindingPointSupport",
          "text": " If the VkDeviceGeneratedCommandsFeaturesNVX::computeBindingPointSupport feature is not enabled, flags must not contain VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkObjectEntryTypeNVX value"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values"
        },
        {
          "vuid": "flags",
          "text": " flags must not be 0"
        }
      ]
    },
    "VkObjectTablePipelineEntryNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "type",
          "text": " type must be VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkObjectEntryTypeNVX value"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values"
        },
        {
          "vuid": "flags",
          "text": " flags must not be 0"
        },
        {
          "vuid": "pipeline",
          "text": " pipeline must be a valid VkPipeline handle"
        }
      ]
    },
    "VkObjectTableDescriptorSetEntryNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "type",
          "text": " type must be VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkObjectEntryTypeNVX value"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values"
        },
        {
          "vuid": "flags",
          "text": " flags must not be 0"
        },
        {
          "vuid": "pipelineLayout",
          "text": " pipelineLayout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "descriptorSet",
          "text": " descriptorSet must be a valid VkDescriptorSet handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of descriptorSet, and pipelineLayout must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkObjectTableVertexBufferEntryNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "type",
          "text": " type must be VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkObjectEntryTypeNVX value"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values"
        },
        {
          "vuid": "flags",
          "text": " flags must not be 0"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        }
      ]
    },
    "VkObjectTableIndexBufferEntryNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "type",
          "text": " type must be VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkObjectEntryTypeNVX value"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values"
        },
        {
          "vuid": "flags",
          "text": " flags must not be 0"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "indexType",
          "text": " indexType must be a valid VkIndexType value"
        }
      ]
    },
    "VkObjectTablePushConstantEntryNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "type",
          "text": " type must be VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkObjectEntryTypeNVX value"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values"
        },
        {
          "vuid": "flags",
          "text": " flags must not be 0"
        },
        {
          "vuid": "pipelineLayout",
          "text": " pipelineLayout must be a valid VkPipelineLayout handle"
        },
        {
          "vuid": "stageFlags",
          "text": " stageFlags must be a valid combination of VkShaderStageFlagBits values"
        },
        {
          "vuid": "stageFlags",
          "text": " stageFlags must not be 0"
        }
      ]
    },
    "vkUnregisterObjectsNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "pObjectIndices",
          "text": " At any pObjectIndices there must be a registered resource already."
        },
        {
          "vuid": "pObjectEntryTypes",
          "text": " The pObjectEntryTypes of the resource at pObjectIndices must match."
        },
        {
          "vuid": "None",
          "text": " All operations on the device using the registered resource must have been completed."
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "objectTable",
          "text": " objectTable must be a valid VkObjectTableNVX handle"
        },
        {
          "vuid": "pObjectEntryTypes",
          "text": " pObjectEntryTypes must be a valid pointer to an array of objectCount valid VkObjectEntryTypeNVX values"
        },
        {
          "vuid": "pObjectIndices",
          "text": " pObjectIndices must be a valid pointer to an array of objectCount uint32_t values"
        },
        {
          "vuid": "objectCount",
          "text": " objectCount must be greater than 0"
        },
        {
          "vuid": "objectTable",
          "text": " objectTable must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "VkIndirectCommandsLayoutTokenNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "bindingUnit",
          "text": " bindingUnit must stay within device supported limits for the appropriate commands."
        },
        {
          "vuid": "dynamicCount",
          "text": " dynamicCount must stay within device supported limits for the appropriate commands."
        },
        {
          "vuid": "divisor",
          "text": " divisor must be greater than 0 and a power of two."
        },
        {
          "vuid": "tokenType",
          "text": " tokenType must be a valid VkIndirectCommandsTokenTypeNVX value"
        }
      ]
    },
    "VkIndirectCommandsTokenNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "buffer",
          "text": " The buffer’s usage flag must have the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set."
        },
        {
          "vuid": "offset",
          "text": " The offset must be aligned to VkDeviceGeneratedCommandsLimitsNVX::minCommandsTokenBufferOffsetAlignment."
        },
        {
          "vuid": "tokenType",
          "text": " tokenType must be a valid VkIndirectCommandsTokenTypeNVX value"
        },
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        }
      ]
    },
    "vkCreateIndirectCommandsLayoutNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkIndirectCommandsLayoutCreateInfoNVX structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pIndirectCommandsLayout",
          "text": " pIndirectCommandsLayout must be a valid pointer to a VkIndirectCommandsLayoutNVX handle"
        }
      ]
    },
    "VkIndirectCommandsLayoutCreateInfoNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "tokenCount",
          "text": " tokenCount must be greater than 0 and below VkDeviceGeneratedCommandsLimitsNVX::maxIndirectCommandsLayoutTokenCount"
        },
        {
          "vuid": "computeBindingPointSupport",
          "text": " If the VkDeviceGeneratedCommandsFeaturesNVX::computeBindingPointSupport feature is not enabled, then pipelineBindPoint must not be VK_PIPELINE_BIND_POINT_COMPUTE"
        },
        {
          "vuid": "pTokens",
          "text": " If pTokens contains an entry of VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX it must be the first element of the array and there must be only a single element of such token type."
        },
        {
          "vuid": "pTokens",
          "text": " All state binding tokens in pTokens must occur prior work provoking tokens (VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX, VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX, VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX)."
        },
        {
          "vuid": "pTokens",
          "text": " The content of pTokens must include one single work provoking token that is compatible with the pipelineBindPoint."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "pipelineBindPoint",
          "text": " pipelineBindPoint must be a valid VkPipelineBindPoint value"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkIndirectCommandsLayoutUsageFlagBitsNVX values"
        },
        {
          "vuid": "flags",
          "text": " flags must not be 0"
        },
        {
          "vuid": "pTokens",
          "text": " pTokens must be a valid pointer to an array of tokenCount valid VkIndirectCommandsLayoutTokenNVX structures"
        },
        {
          "vuid": "tokenCount",
          "text": " tokenCount must be greater than 0"
        }
      ]
    },
    "vkDestroyIndirectCommandsLayoutNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "indirectCommandsLayout",
          "text": " All submitted commands that refer to indirectCommandsLayout must have completed execution"
        },
        {
          "vuid": "objectTable",
          "text": " If VkAllocationCallbacks were provided when objectTable was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "objectTable",
          "text": " If no VkAllocationCallbacks were provided when objectTable was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "indirectCommandsLayout",
          "text": " indirectCommandsLayout must be a valid VkIndirectCommandsLayoutNVX handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "indirectCommandsLayout",
          "text": " indirectCommandsLayout must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkCmdReserveSpaceForCommandsNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "commandBuffer",
          "text": " The provided commandBuffer must not have had a prior space reservation since its creation or the last reset."
        },
        {
          "vuid": "commandBuffer",
          "text": " The state of the commandBuffer must be legal to execute all commands within the sequence provided by the indirectCommandsLayout member of pProcessCommandsInfo."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pReserveSpaceInfo",
          "text": " pReserveSpaceInfo must be a valid pointer to a valid VkCmdReserveSpaceForCommandsInfoNVX structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        },
        {
          "vuid": "bufferlevel",
          "text": " commandBuffer must be a secondary VkCommandBuffer"
        }
      ]
    },
    "VkCmdReserveSpaceForCommandsInfoNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "objectTable",
          "text": " objectTable must be a valid VkObjectTableNVX handle"
        },
        {
          "vuid": "indirectCommandsLayout",
          "text": " indirectCommandsLayout must be a valid VkIndirectCommandsLayoutNVX handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of indirectCommandsLayout, and objectTable must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdProcessCommandsNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pProcessCommandsInfo",
          "text": " pProcessCommandsInfo must be a valid pointer to a valid VkCmdProcessCommandsInfoNVX structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "renderpass",
          "text": " This command must only be called inside of a render pass instance"
        }
      ]
    },
    "VkCmdProcessCommandsInfoNVX": {
      "(VK_NVX_device_generated_commands)": [
        {
          "vuid": "objectTable",
          "text": " The provided objectTable must include all objects referenced by the generation process."
        },
        {
          "vuid": "indirectCommandsTokenCount",
          "text": " indirectCommandsTokenCount must match the indirectCommandsLayout’s tokenCount."
        },
        {
          "vuid": "tokenType",
          "text": " The tokenType member of each entry in the pIndirectCommandsTokens array must match the values used at creation time of indirectCommandsLayout"
        },
        {
          "vuid": "targetCommandBuffer",
          "text": " If targetCommandBuffer is provided, it must have reserved command space."
        },
        {
          "vuid": "targetCommandBuffer",
          "text": " If targetCommandBuffer is provided, the objectTable must match the reservation’s objectTable and must have had all referenced objects registered at reservation time."
        },
        {
          "vuid": "targetCommandBuffer",
          "text": " If targetCommandBuffer is provided, the indirectCommandsLayout must match the reservation’s indirectCommandsLayout."
        },
        {
          "vuid": "targetCommandBuffer",
          "text": " If targetCommandBuffer is provided, the maxSequencesCount must not exceed the reservation’s maxSequencesCount."
        },
        {
          "vuid": "sequencesCountBuffer",
          "text": " If sequencesCountBuffer is used, its usage flag must have VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set."
        },
        {
          "vuid": "sequencesCountBuffer",
          "text": " If sequencesCountBuffer is used, sequencesCountOffset must be aligned to VkDeviceGeneratedCommandsLimitsNVX::minSequenceCountBufferOffsetAlignment."
        },
        {
          "vuid": "sequencesIndexBuffer",
          "text": " If sequencesIndexBuffer is used, its usage flag must have VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set."
        },
        {
          "vuid": "sequencesIndexBuffer",
          "text": " If sequencesIndexBuffer is used, sequencesIndexOffset must be aligned to VkDeviceGeneratedCommandsLimitsNVX::minSequenceIndexBufferOffsetAlignment."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "objectTable",
          "text": " objectTable must be a valid VkObjectTableNVX handle"
        },
        {
          "vuid": "indirectCommandsLayout",
          "text": " indirectCommandsLayout must be a valid VkIndirectCommandsLayoutNVX handle"
        },
        {
          "vuid": "pIndirectCommandsTokens",
          "text": " pIndirectCommandsTokens must be a valid pointer to an array of indirectCommandsTokenCount valid VkIndirectCommandsTokenNVX structures"
        },
        {
          "vuid": "targetCommandBuffer",
          "text": " If targetCommandBuffer is not NULL, targetCommandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "sequencesCountBuffer",
          "text": " If sequencesCountBuffer is not VK_NULL_HANDLE, sequencesCountBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "sequencesIndexBuffer",
          "text": " If sequencesIndexBuffer is not VK_NULL_HANDLE, sequencesIndexBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "indirectCommandsTokenCount",
          "text": " indirectCommandsTokenCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Each of indirectCommandsLayout, objectTable, sequencesCountBuffer, sequencesIndexBuffer, and targetCommandBuffer that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkGetPhysicalDeviceSparseImageFormatProperties": {
      "core": [
        {
          "vuid": "samples",
          "text": " samples must be a bit value that is set in VkImageFormatProperties::sampleCounts returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, and usage equal to those in this command and flags equal to the value that is set in VkImageCreateInfo::flags when the image is created"
        },
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkImageType value"
        },
        {
          "vuid": "samples",
          "text": " samples must be a valid VkSampleCountFlagBits value"
        },
        {
          "vuid": "usage",
          "text": " usage must be a valid combination of VkImageUsageFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must not be 0"
        },
        {
          "vuid": "tiling",
          "text": " tiling must be a valid VkImageTiling value"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkSparseImageFormatProperties structures"
        }
      ]
    },
    "vkGetPhysicalDeviceSparseImageFormatProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pFormatInfo",
          "text": " pFormatInfo must be a valid pointer to a valid VkPhysicalDeviceSparseImageFormatInfo2 structure"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkSparseImageFormatProperties2 structures"
        }
      ]
    },
    "VkPhysicalDeviceSparseImageFormatInfo2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "samples",
          "text": " samples must be a bit value that is set in VkImageFormatProperties::sampleCounts returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, and usage equal to those in this command and flags equal to the value that is set in VkImageCreateInfo::flags when the image is created"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkImageType value"
        },
        {
          "vuid": "samples",
          "text": " samples must be a valid VkSampleCountFlagBits value"
        },
        {
          "vuid": "usage",
          "text": " usage must be a valid combination of VkImageUsageFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must not be 0"
        },
        {
          "vuid": "tiling",
          "text": " tiling must be a valid VkImageTiling value"
        }
      ]
    },
    "VkSparseImageFormatProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkGetImageSparseMemoryRequirements": {
      "core": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "pSparseMemoryRequirementCount",
          "text": " pSparseMemoryRequirementCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pSparseMemoryRequirements",
          "text": " If the value referenced by pSparseMemoryRequirementCount is not 0, and pSparseMemoryRequirements is not NULL, pSparseMemoryRequirements must be a valid pointer to an array of pSparseMemoryRequirementCount VkSparseImageMemoryRequirements structures"
        },
        {
          "vuid": "image",
          "text": " image must have been created, allocated, or retrieved from device"
        }
      ]
    },
    "vkGetImageSparseMemoryRequirements2": {
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pInfo",
          "text": " pInfo must be a valid pointer to a valid VkImageSparseMemoryRequirementsInfo2 structure"
        },
        {
          "vuid": "pSparseMemoryRequirementCount",
          "text": " pSparseMemoryRequirementCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pSparseMemoryRequirements",
          "text": " If the value referenced by pSparseMemoryRequirementCount is not 0, and pSparseMemoryRequirements is not NULL, pSparseMemoryRequirements must be a valid pointer to an array of pSparseMemoryRequirementCount VkSparseImageMemoryRequirements2 structures"
        }
      ]
    },
    "VkImageSparseMemoryRequirementsInfo2": {
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        }
      ]
    },
    "VkSparseImageMemoryRequirements2": {
      "(VK_VERSION_1_1,VK_KHR_get_memory_requirements2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "VkSparseMemoryBind": {
      "core": [
        {
          "vuid": "memory",
          "text": " If memory is not VK_NULL_HANDLE, memory and memoryOffset must match the memory requirements of the resource, as described in section resources-association"
        },
        {
          "vuid": "memory",
          "text": " If memory is not VK_NULL_HANDLE, memory must not have been created with a memory type that reports VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT bit set"
        },
        {
          "vuid": "size",
          "text": " size must be greater than 0"
        },
        {
          "vuid": "resourceOffset",
          "text": " resourceOffset must be less than the size of the resource"
        },
        {
          "vuid": "size",
          "text": " size must be less than or equal to the size of the resource minus resourceOffset"
        },
        {
          "vuid": "memoryOffset",
          "text": " memoryOffset must be less than the size of memory"
        },
        {
          "vuid": "size",
          "text": " size must be less than or equal to the size of memory minus memoryOffset"
        },
        {
          "vuid": "memory",
          "text": " If memory is not VK_NULL_HANDLE, memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkSparseMemoryBindFlagBits values"
        }
      ]
    },
    "VkSparseBufferMemoryBindInfo": {
      "core": [
        {
          "vuid": "buffer",
          "text": " buffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "pBinds",
          "text": " pBinds must be a valid pointer to an array of bindCount valid VkSparseMemoryBind structures"
        },
        {
          "vuid": "bindCount",
          "text": " bindCount must be greater than 0"
        }
      ]
    },
    "VkSparseImageOpaqueMemoryBindInfo": {
      "core": [
        {
          "vuid": "pBinds",
          "text": " If the flags member of any element of pBinds contains VK_SPARSE_MEMORY_BIND_METADATA_BIT, the binding range defined must be within the mip tail region of the metadata aspect of image"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "pBinds",
          "text": " pBinds must be a valid pointer to an array of bindCount valid VkSparseMemoryBind structures"
        },
        {
          "vuid": "bindCount",
          "text": " bindCount must be greater than 0"
        }
      ]
    },
    "VkSparseImageMemoryBindInfo": {
      "core": [
        {
          "vuid": "subresource",
          "text": " The subresource.mipLevel member of each element of pBinds must be less than the mipLevels specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "subresource",
          "text": " The subresource.arrayLayer member of each element of pBinds must be less than the arrayLayers specified in VkImageCreateInfo when image was created"
        },
        {
          "vuid": "image",
          "text": " image must be a valid VkImage handle"
        },
        {
          "vuid": "pBinds",
          "text": " pBinds must be a valid pointer to an array of bindCount valid VkSparseImageMemoryBind structures"
        },
        {
          "vuid": "bindCount",
          "text": " bindCount must be greater than 0"
        }
      ]
    },
    "VkSparseImageMemoryBind": {
      "core": [
        {
          "vuid": "memory",
          "text": " If the features-features-sparseResidencyAliased,sparse aliased residency feature is not enabled, and if any other resources are bound to ranges of memory, the range of memory being bound must not overlap with those bound ranges"
        },
        {
          "vuid": "memory",
          "text": " memory and memoryOffset must match the memory requirements of the calling command’s image, as described in section resources-association"
        },
        {
          "vuid": "subresource",
          "text": " subresource must be a valid image subresource for image (see resources-image-views)"
        },
        {
          "vuid": "offset",
          "text": " offset.x must be a multiple of the sparse image block width (VkSparseImageFormatProperties::imageGranularity.width) of the image"
        },
        {
          "vuid": "extent",
          "text": " extent.width must either be a multiple of the sparse image block width of the image, or else +(extent.width + offset.x)+ must equal the width of the image subresource"
        },
        {
          "vuid": "offset",
          "text": " offset.y must be a multiple of the sparse image block height (VkSparseImageFormatProperties::imageGranularity.height) of the image"
        },
        {
          "vuid": "extent",
          "text": " extent.height must either be a multiple of the sparse image block height of the image, or else +(extent.height + offset.y)+ must equal the height of the image subresource"
        },
        {
          "vuid": "offset",
          "text": " offset.z must be a multiple of the sparse image block depth (VkSparseImageFormatProperties::imageGranularity.depth) of the image"
        },
        {
          "vuid": "extent",
          "text": " extent.depth must either be a multiple of the sparse image block depth of the image, or else +(extent.depth + offset.z)+ must equal the depth of the image subresource"
        },
        {
          "vuid": "subresource",
          "text": " subresource must be a valid VkImageSubresource structure"
        },
        {
          "vuid": "memory",
          "text": " If memory is not VK_NULL_HANDLE, memory must be a valid VkDeviceMemory handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkSparseMemoryBindFlagBits values"
        }
      ]
    },
    "vkQueueBindSparse": {
      "core": [
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE, fence must be unsignaled"
        },
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE, fence must not be associated with any other queue command that has not yet completed execution on that queue"
        },
        {
          "vuid": "pSignalSemaphores",
          "text": " Each element of the pSignalSemaphores member of each element of pBindInfo must be unsignaled when the semaphore signal operation it defines is executed on the device"
        },
        {
          "vuid": "pWaitSemaphores",
          "text": " When a semaphore unsignal operation defined by any element of the pWaitSemaphores member of any element of pBindInfo executes on queue, no other queue must be waiting on the same semaphore."
        },
        {
          "vuid": "pWaitSemaphores",
          "text": " All elements of the pWaitSemaphores member of all elements of pBindInfo must be semaphores that are signaled, or have synchronization-semaphores-signaling, semaphore signal operations previously submitted for execution."
        },
        {
          "vuid": "queue",
          "text": " queue must be a valid VkQueue handle"
        },
        {
          "vuid": "pBindInfo",
          "text": " If bindInfoCount is not 0, pBindInfo must be a valid pointer to an array of bindInfoCount valid VkBindSparseInfo structures"
        },
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle"
        },
        {
          "vuid": "queuetype",
          "text": " The queue must support sparse binding operations"
        },
        {
          "vuid": "commonparent",
          "text": " Both of fence, and queue that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkBindSparseInfo": {
      "core": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_BIND_SPARSE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkDeviceGroupBindSparseInfo"
        },
        {
          "vuid": "pWaitSemaphores",
          "text": " If waitSemaphoreCount is not 0, pWaitSemaphores must be a valid pointer to an array of waitSemaphoreCount valid VkSemaphore handles"
        },
        {
          "vuid": "pBufferBinds",
          "text": " If bufferBindCount is not 0, pBufferBinds must be a valid pointer to an array of bufferBindCount valid VkSparseBufferMemoryBindInfo structures"
        },
        {
          "vuid": "pImageOpaqueBinds",
          "text": " If imageOpaqueBindCount is not 0, pImageOpaqueBinds must be a valid pointer to an array of imageOpaqueBindCount valid VkSparseImageOpaqueMemoryBindInfo structures"
        },
        {
          "vuid": "pImageBinds",
          "text": " If imageBindCount is not 0, pImageBinds must be a valid pointer to an array of imageBindCount valid VkSparseImageMemoryBindInfo structures"
        },
        {
          "vuid": "pSignalSemaphores",
          "text": " If signalSemaphoreCount is not 0, pSignalSemaphores must be a valid pointer to an array of signalSemaphoreCount valid VkSemaphore handles"
        },
        {
          "vuid": "commonparent",
          "text": " Both of the elements of pSignalSemaphores, and the elements of pWaitSemaphores that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "VkDeviceGroupBindSparseInfo": {
      "(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "resourceDeviceIndex",
          "text": " resourceDeviceIndex and memoryDeviceIndex must both be valid device indices."
        },
        {
          "vuid": "memoryDeviceIndex",
          "text": " Each memory allocation bound in this batch must have allocated an instance for memoryDeviceIndex."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO"
        }
      ]
    },
    "vkCreateAndroidSurfaceKHR": {
      "(VK_KHR_surface)+(VK_KHR_android_surface)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkAndroidSurfaceCreateInfoKHR structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSurface",
          "text": " pSurface must be a valid pointer to a VkSurfaceKHR handle"
        }
      ]
    },
    "VkAndroidSurfaceCreateInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_android_surface)": [
        {
          "vuid": "window",
          "text": " window must point to a valid Android ANativeWindow."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "vkCreateMirSurfaceKHR": {
      "(VK_KHR_surface)+(VK_KHR_mir_surface)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkMirSurfaceCreateInfoKHR structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSurface",
          "text": " pSurface must be a valid pointer to a VkSurfaceKHR handle"
        }
      ]
    },
    "VkMirSurfaceCreateInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_mir_surface)": [
        {
          "vuid": "connection",
          "text": " connection must point to a valid MirConnection."
        },
        {
          "vuid": "surface",
          "text": " surface must point to a valid MirSurface."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "vkCreateWaylandSurfaceKHR": {
      "(VK_KHR_surface)+(VK_KHR_wayland_surface)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkWaylandSurfaceCreateInfoKHR structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSurface",
          "text": " pSurface must be a valid pointer to a VkSurfaceKHR handle"
        }
      ]
    },
    "VkWaylandSurfaceCreateInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_wayland_surface)": [
        {
          "vuid": "display",
          "text": " display must point to a valid Wayland wl_display."
        },
        {
          "vuid": "surface",
          "text": " surface must point to a valid Wayland wl_surface."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "vkCreateWin32SurfaceKHR": {
      "(VK_KHR_surface)+(VK_KHR_win32_surface)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkWin32SurfaceCreateInfoKHR structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSurface",
          "text": " pSurface must be a valid pointer to a VkSurfaceKHR handle"
        }
      ]
    },
    "VkWin32SurfaceCreateInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_win32_surface)": [
        {
          "vuid": "hinstance",
          "text": " hinstance must be a valid Win32 HINSTANCE."
        },
        {
          "vuid": "hwnd",
          "text": " hwnd must be a valid Win32 HWND."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "vkCreateXcbSurfaceKHR": {
      "(VK_KHR_surface)+(VK_KHR_xcb_surface)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkXcbSurfaceCreateInfoKHR structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSurface",
          "text": " pSurface must be a valid pointer to a VkSurfaceKHR handle"
        }
      ]
    },
    "VkXcbSurfaceCreateInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_xcb_surface)": [
        {
          "vuid": "connection",
          "text": " connection must point to a valid X11 xcb_connection_t."
        },
        {
          "vuid": "window",
          "text": " window must be a valid X11 xcb_window_t."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "vkCreateXlibSurfaceKHR": {
      "(VK_KHR_surface)+(VK_KHR_xlib_surface)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkXlibSurfaceCreateInfoKHR structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSurface",
          "text": " pSurface must be a valid pointer to a VkSurfaceKHR handle"
        }
      ]
    },
    "VkXlibSurfaceCreateInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_xlib_surface)": [
        {
          "vuid": "dpy",
          "text": " dpy must point to a valid Xlib Display."
        },
        {
          "vuid": "window",
          "text": " window must be a valid Xlib Window."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "vkCreateIOSSurfaceMVK": {
      "(VK_KHR_surface)+(VK_MVK_ios_surface)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkIOSSurfaceCreateInfoMVK structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSurface",
          "text": " pSurface must be a valid pointer to a VkSurfaceKHR handle"
        }
      ]
    },
    "VkIOSSurfaceCreateInfoMVK": {
      "(VK_KHR_surface)+(VK_MVK_ios_surface)": [
        {
          "vuid": "pView",
          "text": " pView must be a valid UIView and must be backed by a CALayer instance of type CAMetalLayer."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "vkCreateMacOSSurfaceMVK": {
      "(VK_KHR_surface)+(VK_MVK_macos_surface)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkMacOSSurfaceCreateInfoMVK structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSurface",
          "text": " pSurface must be a valid pointer to a VkSurfaceKHR handle"
        }
      ]
    },
    "VkMacOSSurfaceCreateInfoMVK": {
      "(VK_KHR_surface)+(VK_MVK_macos_surface)": [
        {
          "vuid": "pView",
          "text": " pView must be a valid NSView and must be backed by a CALayer instance of type CAMetalLayer."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "vkCreateViSurfaceNN": {
      "(VK_KHR_surface)+(VK_NN_vi_surface)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkViSurfaceCreateInfoNN structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSurface",
          "text": " pSurface must be a valid pointer to a VkSurfaceKHR handle"
        }
      ]
    },
    "VkViSurfaceCreateInfoNN": {
      "(VK_KHR_surface)+(VK_NN_vi_surface)": [
        {
          "vuid": "window",
          "text": " window must be a valid nn::vi::NativeWindowHandle"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        }
      ]
    },
    "vkDestroySurfaceKHR": {
      "(VK_KHR_surface)": [
        {
          "vuid": "surface",
          "text": " All VkSwapchainKHR objects created for surface must have been destroyed prior to destroying surface"
        },
        {
          "vuid": "surface",
          "text": " If VkAllocationCallbacks were provided when surface was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "surface",
          "text": " If no VkAllocationCallbacks were provided when surface was created, pAllocator must be NULL"
        },
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "surface",
          "text": " If surface is not VK_NULL_HANDLE, surface must be a valid VkSurfaceKHR handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "surface",
          "text": " If surface is a valid handle, it must have been created, allocated, or retrieved from instance"
        }
      ]
    },
    "vkGetPhysicalDeviceDisplayPropertiesKHR": {
      "(VK_KHR_surface)+(VK_KHR_display)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayPropertiesKHR structures"
        }
      ]
    },
    "vkGetPhysicalDeviceDisplayProperties2KHR": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_KHR_get_display_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayProperties2KHR structures"
        }
      ]
    },
    "VkDisplayProperties2KHR": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_KHR_get_display_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkAcquireXlibDisplayEXT": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_EXT_direct_mode_display)+(VK_EXT_acquire_xlib_display)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "dpy",
          "text": " dpy must be a valid pointer to a Display value"
        },
        {
          "vuid": "display",
          "text": " display must be a valid VkDisplayKHR handle"
        }
      ]
    },
    "vkGetRandROutputDisplayEXT": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_EXT_direct_mode_display)+(VK_EXT_acquire_xlib_display)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "dpy",
          "text": " dpy must be a valid pointer to a Display value"
        },
        {
          "vuid": "pDisplay",
          "text": " pDisplay must be a valid pointer to a VkDisplayKHR handle"
        }
      ]
    },
    "vkReleaseDisplayEXT": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_EXT_direct_mode_display)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "display",
          "text": " display must be a valid VkDisplayKHR handle"
        }
      ]
    },
    "vkGetPhysicalDeviceDisplayPlanePropertiesKHR": {
      "(VK_KHR_surface)+(VK_KHR_display)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayPlanePropertiesKHR structures"
        }
      ]
    },
    "vkGetPhysicalDeviceDisplayPlaneProperties2KHR": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_KHR_get_display_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayPlaneProperties2KHR structures"
        }
      ]
    },
    "VkDisplayPlaneProperties2KHR": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_KHR_get_display_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkGetDisplayPlaneSupportedDisplaysKHR": {
      "(VK_KHR_surface)+(VK_KHR_display)": [
        {
          "vuid": "planeIndex",
          "text": " planeIndex must be less than the number of display planes supported by the device as determined by calling vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
        },
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pDisplayCount",
          "text": " pDisplayCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pDisplays",
          "text": " If the value referenced by pDisplayCount is not 0, and pDisplays is not NULL, pDisplays must be a valid pointer to an array of pDisplayCount VkDisplayKHR handles"
        }
      ]
    },
    "vkGetDisplayModePropertiesKHR": {
      "(VK_KHR_surface)+(VK_KHR_display)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "display",
          "text": " display must be a valid VkDisplayKHR handle"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayModePropertiesKHR structures"
        }
      ]
    },
    "vkGetDisplayModeProperties2KHR": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_KHR_get_display_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "display",
          "text": " display must be a valid VkDisplayKHR handle"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayModeProperties2KHR structures"
        }
      ]
    },
    "VkDisplayModeProperties2KHR": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_KHR_get_display_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "VkDisplayModeParametersKHR": {
      "(VK_KHR_surface)+(VK_KHR_display)": [
        {
          "vuid": "width",
          "text": " The width member of visibleRegion must be greater than 0"
        },
        {
          "vuid": "height",
          "text": " The height member of visibleRegion must be greater than 0"
        },
        {
          "vuid": "refreshRate",
          "text": " refreshRate must be greater than 0"
        }
      ]
    },
    "vkCreateDisplayModeKHR": {
      "(VK_KHR_surface)+(VK_KHR_display)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "display",
          "text": " display must be a valid VkDisplayKHR handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkDisplayModeCreateInfoKHR structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pMode",
          "text": " pMode must be a valid pointer to a VkDisplayModeKHR handle"
        }
      ]
    },
    "VkDisplayModeCreateInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_display)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "parameters",
          "text": " parameters must be a valid VkDisplayModeParametersKHR structure"
        }
      ]
    },
    "vkGetDisplayPlaneCapabilitiesKHR": {
      "(VK_KHR_surface)+(VK_KHR_display)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "mode",
          "text": " mode must be a valid VkDisplayModeKHR handle"
        },
        {
          "vuid": "pCapabilities",
          "text": " pCapabilities must be a valid pointer to a VkDisplayPlaneCapabilitiesKHR structure"
        }
      ]
    },
    "vkGetDisplayPlaneCapabilities2KHR": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_KHR_get_display_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pDisplayPlaneInfo",
          "text": " pDisplayPlaneInfo must be a valid pointer to a valid VkDisplayPlaneInfo2KHR structure"
        },
        {
          "vuid": "pCapabilities",
          "text": " pCapabilities must be a valid pointer to a VkDisplayPlaneCapabilities2KHR structure"
        }
      ]
    },
    "VkDisplayPlaneInfo2KHR": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_KHR_get_display_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "mode",
          "text": " mode must be a valid VkDisplayModeKHR handle"
        }
      ]
    },
    "VkDisplayPlaneCapabilities2KHR": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_KHR_get_display_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkDisplayPowerControlEXT": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_EXT_display_control)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "display",
          "text": " display must be a valid VkDisplayKHR handle"
        },
        {
          "vuid": "pDisplayPowerInfo",
          "text": " pDisplayPowerInfo must be a valid pointer to a valid VkDisplayPowerInfoEXT structure"
        }
      ]
    },
    "VkDisplayPowerInfoEXT": {
      "(VK_KHR_surface)+(VK_KHR_display)+(VK_EXT_display_control)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "powerState",
          "text": " powerState must be a valid VkDisplayPowerStateEXT value"
        }
      ]
    },
    "vkCreateDisplayPlaneSurfaceKHR": {
      "(VK_KHR_surface)+(VK_KHR_display)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkDisplaySurfaceCreateInfoKHR structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSurface",
          "text": " pSurface must be a valid pointer to a VkSurfaceKHR handle"
        }
      ]
    },
    "VkDisplaySurfaceCreateInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_display)": [
        {
          "vuid": "planeIndex",
          "text": " planeIndex must be less than the number of display planes supported by the device as determined by calling vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
        },
        {
          "vuid": "planeReorderPossible",
          "text": " If the planeReorderPossible member of the VkDisplayPropertiesKHR structure returned by vkGetPhysicalDeviceDisplayPropertiesKHR for the display corresponding to displayMode is VK_TRUE then planeStackIndex must be less than the number of display planes supported by the device as determined by calling vkGetPhysicalDeviceDisplayPlanePropertiesKHR; otherwise planeStackIndex must equal the currentStackIndex member of VkDisplayPlanePropertiesKHR returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR for the display plane corresponding to displayMode"
        },
        {
          "vuid": "alphaMode",
          "text": " If alphaMode is VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR then globalAlpha must be between 0 and 1, inclusive"
        },
        {
          "vuid": "alphaMode",
          "text": " alphaMode must be 0 or one of the bits present in the supportedAlpha member of VkDisplayPlaneCapabilitiesKHR returned by vkGetDisplayPlaneCapabilitiesKHR for the display plane corresponding to displayMode"
        },
        {
          "vuid": "width",
          "text": " The width and height members of imageExtent must be less than the maxImageDimensions2D member of VkPhysicalDeviceLimits"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "displayMode",
          "text": " displayMode must be a valid VkDisplayModeKHR handle"
        },
        {
          "vuid": "transform",
          "text": " transform must be a valid VkSurfaceTransformFlagBitsKHR value"
        },
        {
          "vuid": "alphaMode",
          "text": " alphaMode must be a valid VkDisplayPlaneAlphaFlagBitsKHR value"
        }
      ]
    },
    "vkGetPhysicalDeviceSurfaceSupportKHR": {
      "(VK_KHR_surface)": [
        {
          "vuid": "queueFamilyIndex",
          "text": " queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice"
        },
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "surface",
          "text": " surface must be a valid VkSurfaceKHR handle"
        },
        {
          "vuid": "pSupported",
          "text": " pSupported must be a valid pointer to a VkBool32 value"
        },
        {
          "vuid": "commonparent",
          "text": " Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkGetPhysicalDeviceMirPresentationSupportKHR": {
      "(VK_KHR_surface)+(VK_KHR_mir_surface)": [
        {
          "vuid": "queueFamilyIndex",
          "text": " queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice"
        },
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "connection",
          "text": " connection must be a valid pointer to a MirConnection value"
        }
      ]
    },
    "vkGetPhysicalDeviceWaylandPresentationSupportKHR": {
      "(VK_KHR_surface)+(VK_KHR_wayland_surface)": [
        {
          "vuid": "queueFamilyIndex",
          "text": " queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice"
        },
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "display",
          "text": " display must be a valid pointer to a wl_display value"
        }
      ]
    },
    "vkGetPhysicalDeviceWin32PresentationSupportKHR": {
      "(VK_KHR_surface)+(VK_KHR_win32_surface)": [
        {
          "vuid": "queueFamilyIndex",
          "text": " queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice"
        },
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        }
      ]
    },
    "vkGetPhysicalDeviceXcbPresentationSupportKHR": {
      "(VK_KHR_surface)+(VK_KHR_xcb_surface)": [
        {
          "vuid": "queueFamilyIndex",
          "text": " queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice"
        },
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "connection",
          "text": " connection must be a valid pointer to a xcb_connection_t value"
        }
      ]
    },
    "vkGetPhysicalDeviceXlibPresentationSupportKHR": {
      "(VK_KHR_surface)+(VK_KHR_xlib_surface)": [
        {
          "vuid": "queueFamilyIndex",
          "text": " queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice"
        },
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "dpy",
          "text": " dpy must be a valid pointer to a Display value"
        }
      ]
    },
    "vkGetPhysicalDeviceSurfaceCapabilitiesKHR": {
      "(VK_KHR_surface)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "surface",
          "text": " surface must be a valid VkSurfaceKHR handle"
        },
        {
          "vuid": "pSurfaceCapabilities",
          "text": " pSurfaceCapabilities must be a valid pointer to a VkSurfaceCapabilitiesKHR structure"
        },
        {
          "vuid": "commonparent",
          "text": " Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkGetPhysicalDeviceSurfaceCapabilities2KHR": {
      "(VK_KHR_surface)+(VK_KHR_get_surface_capabilities2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pSurfaceInfo",
          "text": " pSurfaceInfo must be a valid pointer to a valid VkPhysicalDeviceSurfaceInfo2KHR structure"
        },
        {
          "vuid": "pSurfaceCapabilities",
          "text": " pSurfaceCapabilities must be a valid pointer to a VkSurfaceCapabilities2KHR structure"
        }
      ]
    },
    "VkPhysicalDeviceSurfaceInfo2KHR": {
      "(VK_KHR_surface)+(VK_KHR_get_surface_capabilities2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "surface",
          "text": " surface must be a valid VkSurfaceKHR handle"
        }
      ]
    },
    "VkSurfaceCapabilities2KHR": {
      "(VK_KHR_surface)+(VK_KHR_get_surface_capabilities2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkSharedPresentSurfaceCapabilitiesKHR"
        }
      ]
    },
    "VkSharedPresentSurfaceCapabilitiesKHR": {
      "(VK_KHR_surface)+(VK_KHR_get_surface_capabilities2)+(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR"
        }
      ]
    },
    "vkGetPhysicalDeviceSurfaceCapabilities2EXT": {
      "(VK_KHR_surface)+(VK_EXT_display_surface_counter)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "surface",
          "text": " surface must be a valid VkSurfaceKHR handle"
        },
        {
          "vuid": "pSurfaceCapabilities",
          "text": " pSurfaceCapabilities must be a valid pointer to a VkSurfaceCapabilities2EXT structure"
        },
        {
          "vuid": "commonparent",
          "text": " Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "VkSurfaceCapabilities2EXT": {
      "(VK_KHR_surface)+(VK_EXT_display_surface_counter)": [
        {
          "vuid": "supportedSurfaceCounters",
          "text": " supportedSurfaceCounters must not include VK_SURFACE_COUNTER_VBLANK_EXT unless the surface queried is a wsi-display-surfaces,display surface."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkGetPhysicalDeviceSurfaceFormatsKHR": {
      "(VK_KHR_surface)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "surface",
          "text": " surface must be a valid VkSurfaceKHR handle"
        },
        {
          "vuid": "pSurfaceFormatCount",
          "text": " pSurfaceFormatCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pSurfaceFormats",
          "text": " If the value referenced by pSurfaceFormatCount is not 0, and pSurfaceFormats is not NULL, pSurfaceFormats must be a valid pointer to an array of pSurfaceFormatCount VkSurfaceFormatKHR structures"
        },
        {
          "vuid": "commonparent",
          "text": " Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkGetPhysicalDeviceSurfaceFormats2KHR": {
      "(VK_KHR_surface)+(VK_KHR_get_surface_capabilities2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pSurfaceInfo",
          "text": " pSurfaceInfo must be a valid pointer to a valid VkPhysicalDeviceSurfaceInfo2KHR structure"
        },
        {
          "vuid": "pSurfaceFormatCount",
          "text": " pSurfaceFormatCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pSurfaceFormats",
          "text": " If the value referenced by pSurfaceFormatCount is not 0, and pSurfaceFormats is not NULL, pSurfaceFormats must be a valid pointer to an array of pSurfaceFormatCount VkSurfaceFormat2KHR structures"
        }
      ]
    },
    "VkSurfaceFormat2KHR": {
      "(VK_KHR_surface)+(VK_KHR_get_surface_capabilities2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkGetPhysicalDeviceSurfacePresentModesKHR": {
      "(VK_KHR_surface)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "surface",
          "text": " surface must be a valid VkSurfaceKHR handle"
        },
        {
          "vuid": "pPresentModeCount",
          "text": " pPresentModeCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pPresentModes",
          "text": " If the value referenced by pPresentModeCount is not 0, and pPresentModes is not NULL, pPresentModes must be a valid pointer to an array of pPresentModeCount VkPresentModeKHR values"
        },
        {
          "vuid": "commonparent",
          "text": " Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkGetDeviceGroupPresentCapabilitiesKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pDeviceGroupPresentCapabilities",
          "text": " pDeviceGroupPresentCapabilities must be a valid pointer to a VkDeviceGroupPresentCapabilitiesKHR structure"
        }
      ]
    },
    "VkDeviceGroupPresentCapabilitiesKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkGetDeviceGroupSurfacePresentModesKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "surface",
          "text": " surface must be a valid VkSurfaceKHR handle"
        },
        {
          "vuid": "pModes",
          "text": " pModes must be a valid pointer to a VkDeviceGroupPresentModeFlagsKHR value"
        },
        {
          "vuid": "commonparent",
          "text": " Both of device, and surface must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkGetPhysicalDevicePresentRectanglesKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "surface",
          "text": " surface must be a valid VkSurfaceKHR handle"
        },
        {
          "vuid": "pRectCount",
          "text": " pRectCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pRects",
          "text": " If the value referenced by pRectCount is not 0, and pRects is not NULL, pRects must be a valid pointer to an array of pRectCount VkRect2D structures"
        },
        {
          "vuid": "commonparent",
          "text": " Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkGetRefreshCycleDurationGOOGLE": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_GOOGLE_display_timing)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "swapchain",
          "text": " swapchain must be a valid VkSwapchainKHR handle"
        },
        {
          "vuid": "pDisplayTimingProperties",
          "text": " pDisplayTimingProperties must be a valid pointer to a VkRefreshCycleDurationGOOGLE structure"
        },
        {
          "vuid": "commonparent",
          "text": " Both of device, and swapchain must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkGetPastPresentationTimingGOOGLE": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_GOOGLE_display_timing)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "swapchain",
          "text": " swapchain must be a valid VkSwapchainKHR handle"
        },
        {
          "vuid": "pPresentationTimingCount",
          "text": " pPresentationTimingCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pPresentationTimings",
          "text": " If the value referenced by pPresentationTimingCount is not 0, and pPresentationTimings is not NULL, pPresentationTimings must be a valid pointer to an array of pPresentationTimingCount VkPastPresentationTimingGOOGLE structures"
        },
        {
          "vuid": "commonparent",
          "text": " Both of device, and swapchain must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkGetSwapchainStatusKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "swapchain",
          "text": " swapchain must be a valid VkSwapchainKHR handle"
        },
        {
          "vuid": "commonparent",
          "text": " Both of device, and swapchain must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkCreateSwapchainKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkSwapchainCreateInfoKHR structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSwapchain",
          "text": " pSwapchain must be a valid pointer to a VkSwapchainKHR handle"
        }
      ]
    },
    "VkSwapchainCreateInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)": [
        {
          "vuid": "surface",
          "text": " surface must be a surface that is supported by the device as determined using vkGetPhysicalDeviceSurfaceSupportKHR"
        },
        {
          "vuid": "minImageCount",
          "text": " minImageCount must be greater than or equal to the value returned in the minImageCount member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
        },
        {
          "vuid": "minImageCount",
          "text": " minImageCount must be less than or equal to the value returned in the maxImageCount member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface if the returned maxImageCount is not zero"
        },
        {
          "vuid": "imageFormat",
          "text": " imageFormat and imageColorSpace must match the format and colorSpace members, respectively, of one of the VkSurfaceFormatKHR structures returned by vkGetPhysicalDeviceSurfaceFormatsKHR for the surface"
        },
        {
          "vuid": "imageExtent",
          "text": " imageExtent must be between minImageExtent and maxImageExtent, inclusive, where minImageExtent and maxImageExtent are members of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
        },
        {
          "vuid": "imageExtent",
          "text": " imageExtent members width and height must both be non-zero"
        },
        {
          "vuid": "imageArrayLayers",
          "text": " imageArrayLayers must be greater than 0 and less than or equal to the maxImageArrayLayers member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
        },
        {
          "vuid": "imageSharingMode",
          "text": " If imageSharingMode is VK_SHARING_MODE_CONCURRENT, pQueueFamilyIndices must be a valid pointer to an array of queueFamilyIndexCount uint32_t values"
        },
        {
          "vuid": "imageSharingMode",
          "text": " If imageSharingMode is VK_SHARING_MODE_CONCURRENT, queueFamilyIndexCount must be greater than 1"
        },
        {
          "vuid": "preTransform",
          "text": " preTransform must be one of the bits present in the supportedTransforms member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
        },
        {
          "vuid": "compositeAlpha",
          "text": " compositeAlpha must be one of the bits present in the supportedCompositeAlpha member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
        },
        {
          "vuid": "presentMode",
          "text": " presentMode must be one of the VkPresentModeKHR values returned by vkGetPhysicalDeviceSurfacePresentModesKHR for the surface"
        },
        {
          "vuid": "oldSwapchain",
          "text": " If oldSwapchain is not VK_NULL_HANDLE, oldSwapchain must be a non-retired swapchain associated with native window referred to by surface"
        },
        {
          "vuid": "imageFormat",
          "text": " imageFormat, imageUsage, imageExtent, and imageArrayLayers must be supported for VK_IMAGE_TYPE_2D VK_IMAGE_TILING_OPTIMAL images as reported by vkGetPhysicalDeviceImageFormatProperties."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDeviceGroupSwapchainCreateInfoKHR or VkSwapchainCounterCreateInfoEXT"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkSwapchainCreateFlagBitsKHR values"
        },
        {
          "vuid": "surface",
          "text": " surface must be a valid VkSurfaceKHR handle"
        },
        {
          "vuid": "imageFormat",
          "text": " imageFormat must be a valid VkFormat value"
        },
        {
          "vuid": "imageColorSpace",
          "text": " imageColorSpace must be a valid VkColorSpaceKHR value"
        },
        {
          "vuid": "imageUsage",
          "text": " imageUsage must be a valid combination of VkImageUsageFlagBits values"
        },
        {
          "vuid": "imageUsage",
          "text": " imageUsage must not be 0"
        },
        {
          "vuid": "imageSharingMode",
          "text": " imageSharingMode must be a valid VkSharingMode value"
        },
        {
          "vuid": "preTransform",
          "text": " preTransform must be a valid VkSurfaceTransformFlagBitsKHR value"
        },
        {
          "vuid": "compositeAlpha",
          "text": " compositeAlpha must be a valid VkCompositeAlphaFlagBitsKHR value"
        },
        {
          "vuid": "presentMode",
          "text": " presentMode must be a valid VkPresentModeKHR value"
        },
        {
          "vuid": "oldSwapchain",
          "text": " If oldSwapchain is not VK_NULL_HANDLE, oldSwapchain must be a valid VkSwapchainKHR handle"
        },
        {
          "vuid": "oldSwapchain",
          "text": " If oldSwapchain is a valid handle, it must have been created, allocated, or retrieved from surface"
        },
        {
          "vuid": "commonparent",
          "text": " Both of oldSwapchain, and surface that are valid handles must have been created, allocated, or retrieved from the same VkInstance"
        }
      ],
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "minImageCount",
          "text": " minImageCount must be 1 if presentMode is either VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR or VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR"
        },
        {
          "vuid": "presentMode",
          "text": " If presentMode is VK_PRESENT_MODE_IMMEDIATE_KHR, VK_PRESENT_MODE_MAILBOX_KHR, VK_PRESENT_MODE_FIFO_KHR or VK_PRESENT_MODE_FIFO_RELAXED_KHR, imageUsage must be a subset of the supported usage flags present in the supportedUsageFlags member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for surface"
        },
        {
          "vuid": "imageUsage",
          "text": " If presentMode is VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR or VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR, imageUsage must be a subset of the supported usage flags present in the sharedPresentSupportedUsageFlags member of the VkSharedPresentSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilities2KHR for surface"
        }
      ],
      "(VK_KHR_surface)+(VK_KHR_swapchain)+!(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "imageUsage",
          "text": " imageUsage must be a subset of the supported usage flags present in the supportedUsageFlags member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
        }
      ],
      "(VK_KHR_surface)+(VK_KHR_swapchain)+!(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "imageSharingMode",
          "text": " If imageSharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the physicalDevice that was used to create device"
        }
      ],
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "imageSharingMode",
          "text": " If imageSharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by either vkGetPhysicalDeviceQueueFamilyProperties or vkGetPhysicalDeviceQueueFamilyProperties2 for the physicalDevice that was used to create device"
        }
      ],
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "physicalDeviceCount",
          "text": " If the logical device was created with VkDeviceGroupDeviceCreateInfo::physicalDeviceCount equal to 1, flags must not contain VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR"
        }
      ]
    },
    "VkDeviceGroupSwapchainCreateInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR"
        },
        {
          "vuid": "modes",
          "text": " modes must be a valid combination of VkDeviceGroupPresentModeFlagBitsKHR values"
        },
        {
          "vuid": "modes",
          "text": " modes must not be 0"
        }
      ]
    },
    "VkSwapchainCounterCreateInfoEXT": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_EXT_display_control)": [
        {
          "vuid": "surfaceCounters",
          "text": " The bits in surfaceCounters must be supported by VkSwapchainCreateInfoKHR::surface, as reported by vkGetPhysicalDeviceSurfaceCapabilities2EXT."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT"
        },
        {
          "vuid": "surfaceCounters",
          "text": " surfaceCounters must be a valid combination of VkSurfaceCounterFlagBitsEXT values"
        }
      ]
    },
    "vkGetSwapchainCounterEXT": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_EXT_display_control)": [
        {
          "vuid": "swapchain",
          "text": " One or more present commands on swapchain must have been processed by the presentation engine."
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "swapchain",
          "text": " swapchain must be a valid VkSwapchainKHR handle"
        },
        {
          "vuid": "counter",
          "text": " counter must be a valid VkSurfaceCounterFlagBitsEXT value"
        },
        {
          "vuid": "pCounterValue",
          "text": " pCounterValue must be a valid pointer to a uint64_t value"
        },
        {
          "vuid": "commonparent",
          "text": " Both of device, and swapchain must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkDestroySwapchainKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)": [
        {
          "vuid": "swapchain",
          "text": " All uses of presentable images acquired from swapchain must have completed execution"
        },
        {
          "vuid": "swapchain",
          "text": " If VkAllocationCallbacks were provided when swapchain was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "swapchain",
          "text": " If no VkAllocationCallbacks were provided when swapchain was created, pAllocator must be NULL"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "swapchain",
          "text": " If swapchain is not VK_NULL_HANDLE, swapchain must be a valid VkSwapchainKHR handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "commonparent",
          "text": " Both of device, and swapchain that are valid handles must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkCreateSharedSwapchainsKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_KHR_display_swapchain)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pCreateInfos",
          "text": " pCreateInfos must be a valid pointer to an array of swapchainCount valid VkSwapchainCreateInfoKHR structures"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pSwapchains",
          "text": " pSwapchains must be a valid pointer to an array of swapchainCount VkSwapchainKHR handles"
        },
        {
          "vuid": "swapchainCount",
          "text": " swapchainCount must be greater than 0"
        }
      ]
    },
    "vkGetSwapchainImagesKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "swapchain",
          "text": " swapchain must be a valid VkSwapchainKHR handle"
        },
        {
          "vuid": "pSwapchainImageCount",
          "text": " pSwapchainImageCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pSwapchainImages",
          "text": " If the value referenced by pSwapchainImageCount is not 0, and pSwapchainImages is not NULL, pSwapchainImages must be a valid pointer to an array of pSwapchainImageCount VkImage handles"
        },
        {
          "vuid": "commonparent",
          "text": " Both of device, and swapchain must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkAcquireNextImageKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)": [
        {
          "vuid": "swapchain",
          "text": " swapchain must not be in the retired state"
        },
        {
          "vuid": "semaphore",
          "text": " If semaphore is not VK_NULL_HANDLE it must be unsignaled"
        },
        {
          "vuid": "semaphore",
          "text": " If semaphore is not VK_NULL_HANDLE it must not have any uncompleted signal or wait operations pending"
        },
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE it must be unsignaled and must not be associated with any other queue command that has not yet completed execution on that queue"
        },
        {
          "vuid": "semaphore",
          "text": " semaphore and fence must not both be equal to VK_NULL_HANDLE"
        },
        {
          "vuid": "swapchain",
          "text": " If the number of currently acquired images is greater than the difference between the number of images in swapchain and the value of VkSurfaceCapabilitiesKHR::minImageCount as returned by a call to vkGetPhysicalDeviceSurfaceCapabilities2KHR with the surface used to create swapchain, timeout must not be UINT64_MAX"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "swapchain",
          "text": " swapchain must be a valid VkSwapchainKHR handle"
        },
        {
          "vuid": "semaphore",
          "text": " If semaphore is not VK_NULL_HANDLE, semaphore must be a valid VkSemaphore handle"
        },
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle"
        },
        {
          "vuid": "pImageIndex",
          "text": " pImageIndex must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "semaphore",
          "text": " If semaphore is a valid handle, it must have been created, allocated, or retrieved from device"
        },
        {
          "vuid": "fence",
          "text": " If fence is a valid handle, it must have been created, allocated, or retrieved from device"
        },
        {
          "vuid": "commonparent",
          "text": " Both of device, and swapchain that are valid handles must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkAcquireNextImage2KHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "swapchain",
          "text": " If the number of currently acquired images is greater than the difference between the number of images in the swapchain member of pAcquireInfo and the value of VkSurfaceCapabilitiesKHR::minImageCount as returned by a call to vkGetPhysicalDeviceSurfaceCapabilities2KHR with the surface used to create swapchain, the timeout member of pAcquireInfo must not be UINT64_MAX"
        },
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pAcquireInfo",
          "text": " pAcquireInfo must be a valid pointer to a valid VkAcquireNextImageInfoKHR structure"
        },
        {
          "vuid": "pImageIndex",
          "text": " pImageIndex must be a valid pointer to a uint32_t value"
        }
      ]
    },
    "VkAcquireNextImageInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "swapchain",
          "text": " swapchain must not be in the retired state"
        },
        {
          "vuid": "semaphore",
          "text": " If semaphore is not VK_NULL_HANDLE it must be unsignaled"
        },
        {
          "vuid": "semaphore",
          "text": " If semaphore is not VK_NULL_HANDLE it must not have any uncompleted signal or wait operations pending"
        },
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE it must be unsignaled and must not be associated with any other queue command that has not yet completed execution on that queue"
        },
        {
          "vuid": "semaphore",
          "text": " semaphore and fence must not both be equal to VK_NULL_HANDLE"
        },
        {
          "vuid": "deviceMask",
          "text": " deviceMask must be a valid device mask"
        },
        {
          "vuid": "deviceMask",
          "text": " deviceMask must not be zero"
        },
        {
          "vuid": "semaphore",
          "text": " semaphore and fence must not both be equal to VK_NULL_HANDLE."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "swapchain",
          "text": " swapchain must be a valid VkSwapchainKHR handle"
        },
        {
          "vuid": "semaphore",
          "text": " If semaphore is not VK_NULL_HANDLE, semaphore must be a valid VkSemaphore handle"
        },
        {
          "vuid": "fence",
          "text": " If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle"
        },
        {
          "vuid": "commonparent",
          "text": " Each of fence, semaphore, and swapchain that are valid handles must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "vkQueuePresentKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)": [
        {
          "vuid": "pSwapchains",
          "text": " Each element of pSwapchains member of pPresentInfo must be a swapchain that is created for a surface for which presentation is supported from queue as determined using a call to vkGetPhysicalDeviceSurfaceSupportKHR"
        },
        {
          "vuid": "pWaitSemaphores",
          "text": " When a semaphore unsignal operation defined by the elements of the pWaitSemaphores member of pPresentInfo executes on queue, no other queue must be waiting on the same semaphore."
        },
        {
          "vuid": "pWaitSemaphores",
          "text": " All elements of the pWaitSemaphores member of pPresentInfo must be semaphores that are signaled, or have synchronization-semaphores-signaling, semaphore signal operations previously submitted for execution."
        },
        {
          "vuid": "queue",
          "text": " queue must be a valid VkQueue handle"
        },
        {
          "vuid": "pPresentInfo",
          "text": " pPresentInfo must be a valid pointer to a valid VkPresentInfoKHR structure"
        }
      ],
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_KHR_display_swapchain)": [
        {
          "vuid": "pSwapchains",
          "text": " If more than one member of pSwapchains was created from a display surface, all display surfaces referenced that refer to the same display must use the same display mode"
        }
      ]
    },
    "VkPresentInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+!(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "pImageIndices",
          "text": " Each element of pImageIndices must be the index of a presentable image acquired from the swapchain specified by the corresponding element of the pSwapchains array, and the presented image subresource must be in the VK_IMAGE_LAYOUT_PRESENT_SRC_KHR layout at the time the operation is executed on a VkDevice"
        }
      ],
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_KHR_shared_presentable_image)": [
        {
          "vuid": "pImageIndices",
          "text": " Each element of pImageIndices must be the index of a presentable image acquired from the swapchain specified by the corresponding element of the pSwapchains array, and the presented image subresource must be in the VK_IMAGE_LAYOUT_PRESENT_SRC_KHR or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR layout at the time the operation is executed on a VkDevice"
        }
      ],
      "(VK_KHR_surface)+(VK_KHR_swapchain)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PRESENT_INFO_KHR"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDeviceGroupPresentInfoKHR, VkDisplayPresentInfoKHR, VkPresentRegionsKHR, or VkPresentTimesInfoGOOGLE"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        },
        {
          "vuid": "pWaitSemaphores",
          "text": " If waitSemaphoreCount is not 0, pWaitSemaphores must be a valid pointer to an array of waitSemaphoreCount valid VkSemaphore handles"
        },
        {
          "vuid": "pSwapchains",
          "text": " pSwapchains must be a valid pointer to an array of swapchainCount valid VkSwapchainKHR handles"
        },
        {
          "vuid": "pImageIndices",
          "text": " pImageIndices must be a valid pointer to an array of swapchainCount uint32_t values"
        },
        {
          "vuid": "pResults",
          "text": " If pResults is not NULL, pResults must be a valid pointer to an array of swapchainCount VkResult values"
        },
        {
          "vuid": "swapchainCount",
          "text": " swapchainCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of the elements of pSwapchains, and the elements of pWaitSemaphores that are valid handles must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "VkPresentRegionsKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_KHR_incremental_present)": [
        {
          "vuid": "swapchainCount",
          "text": " swapchainCount must be the same value as VkPresentInfoKHR::swapchainCount, where VkPresentInfoKHR is in the pNext-chain of this VkPresentRegionsKHR structure."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR"
        },
        {
          "vuid": "pRegions",
          "text": " If pRegions is not NULL, pRegions must be a valid pointer to an array of swapchainCount valid VkPresentRegionKHR structures"
        },
        {
          "vuid": "swapchainCount",
          "text": " swapchainCount must be greater than 0"
        }
      ]
    },
    "VkPresentRegionKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_KHR_incremental_present)": [
        {
          "vuid": "pRectangles",
          "text": " If rectangleCount is not 0, and pRectangles is not NULL, pRectangles must be a valid pointer to an array of rectangleCount valid VkRectLayerKHR structures"
        }
      ]
    },
    "VkRectLayerKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_KHR_incremental_present)": [
        {
          "vuid": "offset",
          "text": " The sum of offset and extent must be no greater than the imageExtent member of the VkSwapchainCreateInfoKHR structure given to vkCreateSwapchainKHR."
        },
        {
          "vuid": "layer",
          "text": " layer must be less than imageArrayLayers member of the VkSwapchainCreateInfoKHR structure given to vkCreateSwapchainKHR."
        }
      ]
    },
    "VkDisplayPresentInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_KHR_display_swapchain)": [
        {
          "vuid": "srcRect",
          "text": " srcRect must specify a rectangular region that is a subset of the image being presented"
        },
        {
          "vuid": "dstRect",
          "text": " dstRect must specify a rectangular region that is a subset of the visibleRegion parameter of the display mode the swapchain being presented uses"
        },
        {
          "vuid": "persistentContent",
          "text": " If the persistentContent member of the VkDisplayPropertiesKHR structure returned by vkGetPhysicalDeviceDisplayPropertiesKHR for the display the present operation targets then persistent must be VK_FALSE"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR"
        }
      ]
    },
    "VkDeviceGroupPresentInfoKHR": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_VERSION_1_1,VK_KHR_device_group)": [
        {
          "vuid": "swapchainCount",
          "text": " swapchainCount must equal 0 or VkPresentInfoKHR::swapchainCount"
        },
        {
          "vuid": "mode",
          "text": " If mode is VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR, then each element of pDeviceMasks must have exactly one bit set, and the corresponding element of VkDeviceGroupPresentCapabilitiesKHR::presentMask must be non-zero"
        },
        {
          "vuid": "mode",
          "text": " If mode is VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR, then each element of pDeviceMasks must have exactly one bit set, and some physical device in the logical device must include that bit in its VkDeviceGroupPresentCapabilitiesKHR::presentMask."
        },
        {
          "vuid": "mode",
          "text": " If mode is VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR, then each element of pDeviceMasks must have a value for which all set bits are set in one of the elements of VkDeviceGroupPresentCapabilitiesKHR::presentMask"
        },
        {
          "vuid": "mode",
          "text": " If mode is VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR, then for each bit set in each element of pDeviceMasks, the corresponding element of VkDeviceGroupPresentCapabilitiesKHR::presentMask must be non-zero"
        },
        {
          "vuid": "pDeviceMasks",
          "text": " The value of each element of pDeviceMasks must be equal to the device mask passed in VkAcquireNextImageInfoKHR::deviceMask when the image index was last acquired"
        },
        {
          "vuid": "mode",
          "text": " mode must have exactly one bit set, and that bit must have been included in VkDeviceGroupSwapchainCreateInfoKHR::modes"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR"
        },
        {
          "vuid": "pDeviceMasks",
          "text": " If swapchainCount is not 0, pDeviceMasks must be a valid pointer to an array of swapchainCount uint32_t values"
        },
        {
          "vuid": "mode",
          "text": " mode must be a valid VkDeviceGroupPresentModeFlagBitsKHR value"
        }
      ]
    },
    "VkPresentTimesInfoGOOGLE": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_GOOGLE_display_timing)": [
        {
          "vuid": "swapchainCount",
          "text": " swapchainCount must be the same value as VkPresentInfoKHR::swapchainCount, where VkPresentInfoKHR is in the pNext chain of this VkPresentTimesInfoGOOGLE structure."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE"
        },
        {
          "vuid": "pTimes",
          "text": " If pTimes is not NULL, pTimes must be a valid pointer to an array of swapchainCount VkPresentTimeGOOGLE structures"
        },
        {
          "vuid": "swapchainCount",
          "text": " swapchainCount must be greater than 0"
        }
      ]
    },
    "vkSetHdrMetadataEXT": {
      "(VK_KHR_surface)+(VK_KHR_swapchain)+(VK_EXT_hdr_metadata)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pSwapchains",
          "text": " pSwapchains must be a valid pointer to an array of swapchainCount valid VkSwapchainKHR handles"
        },
        {
          "vuid": "pMetadata",
          "text": " pMetadata must be a valid pointer to an array of swapchainCount valid VkHdrMetadataEXT structures"
        },
        {
          "vuid": "swapchainCount",
          "text": " swapchainCount must be greater than 0"
        },
        {
          "vuid": "commonparent",
          "text": " Both of device, and the elements of pSwapchains must have been created, allocated, or retrieved from the same VkInstance"
        }
      ]
    },
    "VkPhysicalDeviceRaytracingPropertiesNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAYTRACING_PROPERTIES_NVX"
        }
      ]
    },
    "vkCmdTraceRaysNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "cmdBuf",
          "text": " cmdBuf must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "raygenShaderBindingTableBuffer",
          "text": " raygenShaderBindingTableBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "missShaderBindingTableBuffer",
          "text": " missShaderBindingTableBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "hitShaderBindingTableBuffer",
          "text": " hitShaderBindingTableBuffer must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "commonparent",
          "text": " Each of cmdBuf, hitShaderBindingTableBuffer, missShaderBindingTableBuffer, and raygenShaderBindingTableBuffer must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdBuildAccelerationStructureNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "geometryCount",
          "text": " geometryCount must be less than or equal to VkPhysicalDeviceRaytracingPropertiesNVX::maxGeometryCount"
        },
        {
          "vuid": "cmdBuf",
          "text": " cmdBuf must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkAccelerationStructureTypeNVX value"
        },
        {
          "vuid": "instanceData",
          "text": " If instanceData is not VK_NULL_HANDLE, instanceData must be a valid VkBuffer handle"
        },
        {
          "vuid": "pGeometries",
          "text": " If geometryCount is not 0, pGeometries must be a valid pointer to an array of geometryCount valid VkGeometryNVX structures"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkBuildAccelerationStructureFlagBitsNVX values"
        },
        {
          "vuid": "dst",
          "text": " dst must be a valid VkAccelerationStructureNVX handle"
        },
        {
          "vuid": "src",
          "text": " If src is not VK_NULL_HANDLE, src must be a valid VkAccelerationStructureNVX handle"
        },
        {
          "vuid": "scratch",
          "text": " scratch must be a valid VkBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "commonparent",
          "text": " Each of cmdBuf, dst, instanceData, scratch, and src that are valid handles must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdWriteAccelerationStructurePropertiesNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "queryType",
          "text": " queryType must be VK_QUERY_TYPE_COMPACTED_SIZE_NVX"
        },
        {
          "vuid": "cmdBuf",
          "text": " cmdBuf must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "accelerationStructure",
          "text": " accelerationStructure must be a valid VkAccelerationStructureNVX handle"
        },
        {
          "vuid": "queryType",
          "text": " queryType must be a valid VkQueryType value"
        },
        {
          "vuid": "queryPool",
          "text": " queryPool must be a valid VkQueryPool handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "commonparent",
          "text": " Each of accelerationStructure, cmdBuf, and queryPool must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkCmdCopyAccelerationStructureNVX": {
      "(VK_NVX_raytracing)": [
        {
          "vuid": "cmdBuf",
          "text": " cmdBuf must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "dst",
          "text": " dst must be a valid VkAccelerationStructureNVX handle"
        },
        {
          "vuid": "src",
          "text": " src must be a valid VkAccelerationStructureNVX handle"
        },
        {
          "vuid": "mode",
          "text": " mode must be a valid VkCopyAccelerationStructureModeNVX value"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        },
        {
          "vuid": "commonparent",
          "text": " Each of cmdBuf, dst, and src must have been created, allocated, or retrieved from the same VkDevice"
        }
      ]
    },
    "vkEnumerateInstanceLayerProperties": {
      "core": [
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkLayerProperties structures"
        }
      ]
    },
    "vkEnumerateDeviceLayerProperties": {
      "core": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkLayerProperties structures"
        }
      ]
    },
    "vkEnumerateInstanceExtensionProperties": {
      "core": [
        {
          "vuid": "pLayerName",
          "text": " If pLayerName is not NULL, pLayerName must be a null-terminated UTF-8 string"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkExtensionProperties structures"
        }
      ]
    },
    "vkEnumerateDeviceExtensionProperties": {
      "core": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pLayerName",
          "text": " If pLayerName is not NULL, pLayerName must be a null-terminated UTF-8 string"
        },
        {
          "vuid": "pPropertyCount",
          "text": " pPropertyCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pProperties",
          "text": " If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkExtensionProperties structures"
        }
      ]
    },
    "vkGetPhysicalDeviceFeatures": {
      "core": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pFeatures",
          "text": " pFeatures must be a valid pointer to a VkPhysicalDeviceFeatures structure"
        }
      ]
    },
    "vkGetPhysicalDeviceFeatures2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pFeatures",
          "text": " pFeatures must be a valid pointer to a VkPhysicalDeviceFeatures2 structure"
        }
      ]
    },
    "VkPhysicalDeviceFeatures2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2"
        }
      ]
    },
    "VkPhysicalDeviceVariablePointerFeatures": {
      "(VK_VERSION_1_1,VK_KHR_variable_pointers)": [
        {
          "vuid": "variablePointers",
          "text": " If variablePointers is enabled then variablePointersStorageBuffer must also be enabled."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES"
        }
      ]
    },
    "VkPhysicalDeviceMultiviewFeatures": {
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "multiviewGeometryShader",
          "text": " If multiviewGeometryShader is enabled then multiview must also be enabled."
        },
        {
          "vuid": "multiviewTessellationShader",
          "text": " If multiviewTessellationShader is enabled then multiview must also be enabled."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES"
        }
      ]
    },
    "VkPhysicalDevice8BitStorageFeaturesKHR": {
      "(VK_KHR_8bit_storage)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR"
        }
      ]
    },
    "VkPhysicalDevice16BitStorageFeatures": {
      "(VK_VERSION_1_1,VK_KHR_16bit_storage)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES"
        }
      ]
    },
    "VkPhysicalDeviceSamplerYcbcrConversionFeatures": {
      "(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES"
        }
      ]
    },
    "VkPhysicalDeviceProtectedMemoryFeatures": {
      "(VK_VERSION_1_1)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES"
        }
      ]
    },
    "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT": {
      "(VK_EXT_blend_operation_advanced)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceConditionalRenderingFeaturesEXT": {
      "(VK_EXT_conditional_rendering)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceShaderDrawParameterFeatures": {
      "(VK_VERSION_1_1)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES"
        }
      ]
    },
    "VkPhysicalDeviceMeshShaderFeaturesNV": {
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV"
        }
      ]
    },
    "VkPhysicalDeviceDescriptorIndexingFeaturesEXT": {
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT": {
      "(VK_EXT_vertex_attribute_divisor)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceASTCDecodeFeaturesEXT": {
      "(VK_EXT_astc_decode_mode)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR": {
      "(VK_KHR_vulkan_memory_model)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR"
        }
      ]
    },
    "VkPhysicalDeviceInlineUniformBlockFeaturesEXT": {
      "(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV": {
      "(VK_NV_representative_fragment_test)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV"
        }
      ]
    },
    "VkPhysicalDeviceExclusiveScissorFeaturesNV": {
      "(VK_NV_scissor_exclusive)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV"
        }
      ]
    },
    "VkPhysicalDeviceCornerSampledImageFeaturesNV": {
      "(VK_NV_corner_sampled_image)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV"
        }
      ]
    },
    "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV": {
      "(VK_NV_compute_shader_derivatives)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV"
        }
      ]
    },
    "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV": {
      "(VK_NV_fragment_shader_barycentric)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV"
        }
      ]
    },
    "VkPhysicalDeviceShaderImageFootprintFeaturesNV": {
      "(VK_NV_shader_image_footprint)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV"
        }
      ]
    },
    "VkPhysicalDeviceShadingRateImageFeaturesNV": {
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV"
        }
      ]
    },
    "VkPhysicalDevicePushDescriptorPropertiesKHR": {
      "(VK_KHR_push_descriptor)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR"
        }
      ]
    },
    "VkPhysicalDeviceMultiviewProperties": {
      "(VK_VERSION_1_1,VK_KHR_multiview)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES"
        }
      ]
    },
    "VkPhysicalDeviceDiscardRectanglePropertiesEXT": {
      "(VK_EXT_discard_rectangles)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceSampleLocationsPropertiesEXT": {
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceExternalMemoryHostPropertiesEXT": {
      "(VK_EXT_external_memory_host)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX": {
      "(VK_NVX_multiview_per_view_attributes)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX"
        }
      ]
    },
    "VkPhysicalDevicePointClippingProperties": {
      "(VK_VERSION_1_1,VK_KHR_maintenance2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES"
        }
      ]
    },
    "VkPhysicalDeviceSubgroupProperties": {
      "(VK_VERSION_1_1)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES"
        }
      ]
    },
    "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT": {
      "(VK_EXT_blend_operation_advanced)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT": {
      "(VK_EXT_vertex_attribute_divisor)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT": {
      "(VK_EXT_sampler_filter_minmax)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceProtectedMemoryProperties": {
      "(VK_VERSION_1_1)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES"
        }
      ]
    },
    "VkPhysicalDeviceMaintenance3Properties": {
      "(VK_VERSION_1_1,VK_KHR_maintenance3)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES"
        }
      ]
    },
    "VkPhysicalDeviceMeshShaderPropertiesNV": {
      "(VK_NV_mesh_shader)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV"
        }
      ]
    },
    "VkPhysicalDeviceDescriptorIndexingPropertiesEXT": {
      "(VK_EXT_descriptor_indexing)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceInlineUniformBlockPropertiesEXT": {
      "(VK_EXT_inline_uniform_block)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceConservativeRasterizationPropertiesEXT": {
      "(VK_EXT_conservative_rasterization)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT"
        }
      ]
    },
    "VkPhysicalDeviceShaderCorePropertiesAMD": {
      "(VK_AMD_shader_core_properties)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD"
        }
      ]
    },
    "VkPhysicalDeviceShadingRateImagePropertiesNV": {
      "(VK_NV_shading_rate_image)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV"
        }
      ]
    },
    "vkGetPhysicalDeviceMultisamplePropertiesEXT": {
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "samples",
          "text": " samples must be a valid VkSampleCountFlagBits value"
        },
        {
          "vuid": "pMultisampleProperties",
          "text": " pMultisampleProperties must be a valid pointer to a VkMultisamplePropertiesEXT structure"
        }
      ]
    },
    "VkMultisamplePropertiesEXT": {
      "(VK_EXT_sample_locations)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkGetPhysicalDeviceFormatProperties": {
      "core": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "pFormatProperties",
          "text": " pFormatProperties must be a valid pointer to a VkFormatProperties structure"
        }
      ]
    },
    "vkGetPhysicalDeviceFormatProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "pFormatProperties",
          "text": " pFormatProperties must be a valid pointer to a VkFormatProperties2 structure"
        }
      ]
    },
    "VkFormatProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkGetPhysicalDeviceImageFormatProperties": {
      "core": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkImageType value"
        },
        {
          "vuid": "tiling",
          "text": " tiling must be a valid VkImageTiling value"
        },
        {
          "vuid": "usage",
          "text": " usage must be a valid combination of VkImageUsageFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must not be 0"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkImageCreateFlagBits values"
        },
        {
          "vuid": "pImageFormatProperties",
          "text": " pImageFormatProperties must be a valid pointer to a VkImageFormatProperties structure"
        }
      ]
    },
    "vkGetPhysicalDeviceExternalImageFormatPropertiesNV": {
      "(VK_NV_external_memory_capabilities)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkImageType value"
        },
        {
          "vuid": "tiling",
          "text": " tiling must be a valid VkImageTiling value"
        },
        {
          "vuid": "usage",
          "text": " usage must be a valid combination of VkImageUsageFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must not be 0"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkImageCreateFlagBits values"
        },
        {
          "vuid": "externalHandleType",
          "text": " externalHandleType must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values"
        },
        {
          "vuid": "pExternalImageFormatProperties",
          "text": " pExternalImageFormatProperties must be a valid pointer to a VkExternalImageFormatPropertiesNV structure"
        }
      ]
    },
    "vkGetPhysicalDeviceImageFormatProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)+(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "pNext",
          "text": " If the pNext chain of pImageFormatProperties contains an instance of VkAndroidHardwareBufferUsageANDROID, the pNext chain of pImageFormatInfo must contain an instance of VkPhysicalDeviceExternalImageFormatInfo with handleType set to VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID."
        }
      ],
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pImageFormatInfo",
          "text": " pImageFormatInfo must be a valid pointer to a valid VkPhysicalDeviceImageFormatInfo2 structure"
        },
        {
          "vuid": "pImageFormatProperties",
          "text": " pImageFormatProperties must be a valid pointer to a VkImageFormatProperties2 structure"
        }
      ]
    },
    "VkPhysicalDeviceImageFormatInfo2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL or a pointer to a valid instance of VkPhysicalDeviceExternalImageFormatInfo"
        },
        {
          "vuid": "format",
          "text": " format must be a valid VkFormat value"
        },
        {
          "vuid": "type",
          "text": " type must be a valid VkImageType value"
        },
        {
          "vuid": "tiling",
          "text": " tiling must be a valid VkImageTiling value"
        },
        {
          "vuid": "usage",
          "text": " usage must be a valid combination of VkImageUsageFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must not be 0"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkImageCreateFlagBits values"
        }
      ]
    },
    "VkImageFormatProperties2": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2"
        },
        {
          "vuid": "pNext",
          "text": " Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkAndroidHardwareBufferUsageANDROID, VkExternalImageFormatProperties, VkSamplerYcbcrConversionImageFormatProperties, or VkTextureLODGatherFormatPropertiesAMD"
        },
        {
          "vuid": "sType",
          "text": " Each sType member in the pNext chain must be unique"
        }
      ]
    },
    "VkPhysicalDeviceExternalImageFormatInfo": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)+(VK_VERSION_1_1,VK_KHR_external_memory_capabilities)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO"
        },
        {
          "vuid": "handleType",
          "text": " If handleType is not 0, handleType must be a valid VkExternalMemoryHandleTypeFlagBits value"
        }
      ]
    },
    "VkExternalImageFormatProperties": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)+(VK_VERSION_1_1,VK_KHR_external_memory_capabilities)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES"
        }
      ]
    },
    "VkSamplerYcbcrConversionImageFormatProperties": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)+(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES"
        }
      ]
    },
    "VkAndroidHardwareBufferUsageANDROID": {
      "(VK_VERSION_1_1,VK_KHR_get_physical_device_properties2)+(VK_ANDROID_external_memory_android_hardware_buffer)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID"
        }
      ]
    },
    "vkGetPhysicalDeviceExternalBufferProperties": {
      "(VK_VERSION_1_1,VK_KHR_external_memory_capabilities)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pExternalBufferInfo",
          "text": " pExternalBufferInfo must be a valid pointer to a valid VkPhysicalDeviceExternalBufferInfo structure"
        },
        {
          "vuid": "pExternalBufferProperties",
          "text": " pExternalBufferProperties must be a valid pointer to a VkExternalBufferProperties structure"
        }
      ]
    },
    "VkPhysicalDeviceExternalBufferInfo": {
      "(VK_VERSION_1_1,VK_KHR_external_memory_capabilities)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkBufferCreateFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must be a valid combination of VkBufferUsageFlagBits values"
        },
        {
          "vuid": "usage",
          "text": " usage must not be 0"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalMemoryHandleTypeFlagBits value"
        }
      ]
    },
    "VkExternalBufferProperties": {
      "(VK_VERSION_1_1,VK_KHR_external_memory_capabilities)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkGetPhysicalDeviceExternalSemaphoreProperties": {
      "(VK_VERSION_1_1,VK_KHR_external_semaphore_capabilities)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pExternalSemaphoreInfo",
          "text": " pExternalSemaphoreInfo must be a valid pointer to a valid VkPhysicalDeviceExternalSemaphoreInfo structure"
        },
        {
          "vuid": "pExternalSemaphoreProperties",
          "text": " pExternalSemaphoreProperties must be a valid pointer to a VkExternalSemaphoreProperties structure"
        }
      ]
    },
    "VkPhysicalDeviceExternalSemaphoreInfo": {
      "(VK_VERSION_1_1,VK_KHR_external_semaphore_capabilities)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalSemaphoreHandleTypeFlagBits value"
        }
      ]
    },
    "VkExternalSemaphoreProperties": {
      "(VK_VERSION_1_1,VK_KHR_external_semaphore_capabilities)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkGetPhysicalDeviceExternalFenceProperties": {
      "(VK_VERSION_1_1,VK_KHR_external_fence_capabilities)": [
        {
          "vuid": "physicalDevice",
          "text": " physicalDevice must be a valid VkPhysicalDevice handle"
        },
        {
          "vuid": "pExternalFenceInfo",
          "text": " pExternalFenceInfo must be a valid pointer to a valid VkPhysicalDeviceExternalFenceInfo structure"
        },
        {
          "vuid": "pExternalFenceProperties",
          "text": " pExternalFenceProperties must be a valid pointer to a VkExternalFenceProperties structure"
        }
      ]
    },
    "VkPhysicalDeviceExternalFenceInfo": {
      "(VK_VERSION_1_1,VK_KHR_external_fence_capabilities)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "handleType",
          "text": " handleType must be a valid VkExternalFenceHandleTypeFlagBits value"
        }
      ]
    },
    "VkExternalFenceProperties": {
      "(VK_VERSION_1_1,VK_KHR_external_fence_capabilities)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    },
    "vkSetDebugUtilsObjectNameEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pNameInfo",
          "text": " pNameInfo must be a valid pointer to a valid VkDebugUtilsObjectNameInfoEXT structure"
        }
      ]
    },
    "VkDebugUtilsObjectNameInfoEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "objectType",
          "text": " objectType must not be VK_OBJECT_TYPE_UNKNOWN"
        },
        {
          "vuid": "objectHandle",
          "text": " objectHandle must not be VK_NULL_HANDLE"
        },
        {
          "vuid": "objectHandle",
          "text": " objectHandle must be a Vulkan object of the type associated with objectType as defined in debugging-object-types."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "objectType",
          "text": " objectType must be a valid VkObjectType value"
        },
        {
          "vuid": "pObjectName",
          "text": " If pObjectName is not NULL, pObjectName must be a null-terminated UTF-8 string"
        }
      ]
    },
    "vkSetDebugUtilsObjectTagEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pTagInfo",
          "text": " pTagInfo must be a valid pointer to a valid VkDebugUtilsObjectTagInfoEXT structure"
        }
      ]
    },
    "VkDebugUtilsObjectTagInfoEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "objectType",
          "text": " objectType must not be VK_OBJECT_TYPE_UNKNOWN"
        },
        {
          "vuid": "objectHandle",
          "text": " objectHandle must not be VK_NULL_HANDLE"
        },
        {
          "vuid": "objectHandle",
          "text": " objectHandle must be a Vulkan object of the type associated with objectType as defined in debugging-object-types."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "objectType",
          "text": " objectType must be a valid VkObjectType value"
        },
        {
          "vuid": "pTag",
          "text": " pTag must be a valid pointer to an array of tagSize bytes"
        },
        {
          "vuid": "tagSize",
          "text": " tagSize must be greater than 0"
        }
      ]
    },
    "vkQueueBeginDebugUtilsLabelEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "queue",
          "text": " queue must be a valid VkQueue handle"
        },
        {
          "vuid": "pLabelInfo",
          "text": " pLabelInfo must be a valid pointer to a valid VkDebugUtilsLabelEXT structure"
        }
      ]
    },
    "VkDebugUtilsLabelEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "pLabelName",
          "text": " pLabelName must be a null-terminated UTF-8 string"
        }
      ]
    },
    "vkQueueEndDebugUtilsLabelEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "None",
          "text": " There must be an outstanding vkQueueBeginDebugUtilsLabelEXT command prior to the vkQueueEndDebugUtilsLabelEXT on the queue"
        },
        {
          "vuid": "queue",
          "text": " queue must be a valid VkQueue handle"
        }
      ]
    },
    "vkQueueInsertDebugUtilsLabelEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "queue",
          "text": " queue must be a valid VkQueue handle"
        },
        {
          "vuid": "pLabelInfo",
          "text": " pLabelInfo must be a valid pointer to a valid VkDebugUtilsLabelEXT structure"
        }
      ]
    },
    "vkCmdBeginDebugUtilsLabelEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pLabelInfo",
          "text": " pLabelInfo must be a valid pointer to a valid VkDebugUtilsLabelEXT structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        }
      ]
    },
    "vkCmdEndDebugUtilsLabelEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "commandBuffer",
          "text": " There must be an outstanding vkCmdBeginDebugUtilsLabelEXT command prior to the vkCmdEndDebugUtilsLabelEXT on the queue that commandBuffer is submitted to"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a secondary command buffer, there must be an outstanding vkCmdBeginDebugUtilsLabelEXT command recorded to commandBuffer that has not previously been ended by a call to vkCmdEndDebugUtilsLabelEXT."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        }
      ]
    },
    "vkCmdInsertDebugUtilsLabelEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pLabelInfo",
          "text": " pLabelInfo must be a valid pointer to a valid VkDebugUtilsLabelEXT structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        }
      ]
    },
    "vkCreateDebugUtilsMessengerEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkDebugUtilsMessengerCreateInfoEXT structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pMessenger",
          "text": " pMessenger must be a valid pointer to a VkDebugUtilsMessengerEXT handle"
        }
      ]
    },
    "VkDebugUtilsMessengerCreateInfoEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "pfnUserCallback",
          "text": " pfnUserCallback must be a valid PFN_vkDebugUtilsMessengerCallbackEXT"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "messageSeverity",
          "text": " messageSeverity must be a valid combination of VkDebugUtilsMessageSeverityFlagBitsEXT values"
        },
        {
          "vuid": "messageSeverity",
          "text": " messageSeverity must not be 0"
        },
        {
          "vuid": "messageType",
          "text": " messageType must be a valid combination of VkDebugUtilsMessageTypeFlagBitsEXT values"
        },
        {
          "vuid": "messageType",
          "text": " messageType must not be 0"
        }
      ]
    },
    "VkDebugUtilsMessengerCallbackDataEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "flags",
          "text": " flags must be 0"
        },
        {
          "vuid": "pMessageIdName",
          "text": " If pMessageIdName is not NULL, pMessageIdName must be a null-terminated UTF-8 string"
        },
        {
          "vuid": "pMessage",
          "text": " pMessage must be a null-terminated UTF-8 string"
        },
        {
          "vuid": "objectCount",
          "text": " objectCount must be greater than 0"
        }
      ]
    },
    "vkSubmitDebugUtilsMessageEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "messageSeverity",
          "text": " messageSeverity must be a valid VkDebugUtilsMessageSeverityFlagBitsEXT value"
        },
        {
          "vuid": "messageTypes",
          "text": " messageTypes must be a valid combination of VkDebugUtilsMessageTypeFlagBitsEXT values"
        },
        {
          "vuid": "messageTypes",
          "text": " messageTypes must not be 0"
        },
        {
          "vuid": "pCallbackData",
          "text": " pCallbackData must be a valid pointer to a valid VkDebugUtilsMessengerCallbackDataEXT structure"
        }
      ]
    },
    "vkDestroyDebugUtilsMessengerEXT": {
      "(VK_EXT_debug_utils)": [
        {
          "vuid": "messenger",
          "text": " If VkAllocationCallbacks were provided when messenger was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "messenger",
          "text": " If no VkAllocationCallbacks were provided when messenger was created, pAllocator must be NULL"
        },
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "messenger",
          "text": " messenger must be a valid VkDebugUtilsMessengerEXT handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "messenger",
          "text": " messenger must have been created, allocated, or retrieved from instance"
        }
      ]
    },
    "vkDebugMarkerSetObjectNameEXT": {
      "(VK_EXT_debug_marker)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pNameInfo",
          "text": " pNameInfo must be a valid pointer to a valid VkDebugMarkerObjectNameInfoEXT structure"
        }
      ]
    },
    "VkDebugMarkerObjectNameInfoEXT": {
      "(VK_EXT_debug_marker)": [
        {
          "vuid": "objectType",
          "text": " objectType must not be VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT"
        },
        {
          "vuid": "object",
          "text": " object must not be VK_NULL_HANDLE"
        },
        {
          "vuid": "object",
          "text": " object must be a Vulkan object of the type associated with objectType as defined in debug-report-object-types."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "objectType",
          "text": " objectType must be a valid VkDebugReportObjectTypeEXT value"
        },
        {
          "vuid": "pObjectName",
          "text": " pObjectName must be a null-terminated UTF-8 string"
        }
      ]
    },
    "vkDebugMarkerSetObjectTagEXT": {
      "(VK_EXT_debug_marker)": [
        {
          "vuid": "device",
          "text": " device must be a valid VkDevice handle"
        },
        {
          "vuid": "pTagInfo",
          "text": " pTagInfo must be a valid pointer to a valid VkDebugMarkerObjectTagInfoEXT structure"
        }
      ]
    },
    "VkDebugMarkerObjectTagInfoEXT": {
      "(VK_EXT_debug_marker)": [
        {
          "vuid": "objectType",
          "text": " objectType must not be VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT"
        },
        {
          "vuid": "object",
          "text": " object must not be VK_NULL_HANDLE"
        },
        {
          "vuid": "object",
          "text": " object must be a Vulkan object of the type associated with objectType as defined in debug-report-object-types."
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "objectType",
          "text": " objectType must be a valid VkDebugReportObjectTypeEXT value"
        },
        {
          "vuid": "pTag",
          "text": " pTag must be a valid pointer to an array of tagSize bytes"
        },
        {
          "vuid": "tagSize",
          "text": " tagSize must be greater than 0"
        }
      ]
    },
    "vkCmdDebugMarkerBeginEXT": {
      "(VK_EXT_debug_marker)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pMarkerInfo",
          "text": " pMarkerInfo must be a valid pointer to a valid VkDebugMarkerMarkerInfoEXT structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        }
      ]
    },
    "VkDebugMarkerMarkerInfoEXT": {
      "(VK_EXT_debug_marker)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        },
        {
          "vuid": "pMarkerName",
          "text": " pMarkerName must be a null-terminated UTF-8 string"
        }
      ]
    },
    "vkCmdDebugMarkerEndEXT": {
      "(VK_EXT_debug_marker)": [
        {
          "vuid": "commandBuffer",
          "text": " There must be an outstanding vkCmdDebugMarkerBeginEXT command prior to the vkCmdDebugMarkerEndEXT on the queue that commandBuffer is submitted to"
        },
        {
          "vuid": "commandBuffer",
          "text": " If commandBuffer is a secondary command buffer, there must be an outstanding vkCmdDebugMarkerBeginEXT command recorded to commandBuffer that has not previously been ended by a call to vkCmdDebugMarkerEndEXT."
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        }
      ]
    },
    "vkCmdDebugMarkerInsertEXT": {
      "(VK_EXT_debug_marker)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "pMarkerInfo",
          "text": " pMarkerInfo must be a valid pointer to a valid VkDebugMarkerMarkerInfoEXT structure"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations"
        }
      ]
    },
    "vkCreateDebugReportCallbackEXT": {
      "(VK_EXT_debug_report)": [
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "pCreateInfo",
          "text": " pCreateInfo must be a valid pointer to a valid VkDebugReportCallbackCreateInfoEXT structure"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "pCallback",
          "text": " pCallback must be a valid pointer to a VkDebugReportCallbackEXT handle"
        }
      ]
    },
    "VkDebugReportCallbackCreateInfoEXT": {
      "(VK_EXT_debug_report)": [
        {
          "vuid": "pfnCallback",
          "text": " pfnCallback must be a valid PFN_vkDebugReportCallbackEXT"
        },
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkDebugReportFlagBitsEXT values"
        }
      ]
    },
    "vkDebugReportMessageEXT": {
      "(VK_EXT_debug_report)": [
        {
          "vuid": "object",
          "text": " object must be a Vulkan object or VK_NULL_HANDLE"
        },
        {
          "vuid": "objectType",
          "text": " If objectType is not VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT and object is not VK_NULL_HANDLE, object must be a Vulkan object of the corresponding type associated with objectType as defined in debug-report-object-types."
        },
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "flags",
          "text": " flags must be a valid combination of VkDebugReportFlagBitsEXT values"
        },
        {
          "vuid": "flags",
          "text": " flags must not be 0"
        },
        {
          "vuid": "objectType",
          "text": " objectType must be a valid VkDebugReportObjectTypeEXT value"
        },
        {
          "vuid": "pLayerPrefix",
          "text": " pLayerPrefix must be a null-terminated UTF-8 string"
        },
        {
          "vuid": "pMessage",
          "text": " pMessage must be a null-terminated UTF-8 string"
        }
      ]
    },
    "vkDestroyDebugReportCallbackEXT": {
      "(VK_EXT_debug_report)": [
        {
          "vuid": "instance",
          "text": " If VkAllocationCallbacks were provided when callback was created, a compatible set of callbacks must be provided here"
        },
        {
          "vuid": "instance",
          "text": " If no VkAllocationCallbacks were provided when callback was created, pAllocator must be NULL"
        },
        {
          "vuid": "instance",
          "text": " instance must be a valid VkInstance handle"
        },
        {
          "vuid": "callback",
          "text": " callback must be a valid VkDebugReportCallbackEXT handle"
        },
        {
          "vuid": "pAllocator",
          "text": " If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure"
        },
        {
          "vuid": "callback",
          "text": " callback must have been created, allocated, or retrieved from instance"
        }
      ]
    },
    "vkCmdSetCheckpointNV": {
      "(VK_NV_device_diagnostic_checkpoints)": [
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be a valid VkCommandBuffer handle"
        },
        {
          "vuid": "commandBuffer",
          "text": " commandBuffer must be in the commandbuffers-lifecycle, recording state"
        },
        {
          "vuid": "commandBuffer",
          "text": " The VkCommandPool that commandBuffer was allocated from must support graphics, compute, or transfer operations"
        }
      ]
    },
    "vkGetQueueCheckpointDataNV": {
      "(VK_NV_device_diagnostic_checkpoints)": [
        {
          "vuid": "queue",
          "text": " The device that queue belongs to must be in the lost state"
        },
        {
          "vuid": "queue",
          "text": " queue must be a valid VkQueue handle"
        },
        {
          "vuid": "pCheckpointDataCount",
          "text": " pCheckpointDataCount must be a valid pointer to a uint32_t value"
        },
        {
          "vuid": "pCheckpointData",
          "text": " If the value referenced by pCheckpointDataCount is not 0, and pCheckpointData is not NULL, pCheckpointData must be a valid pointer to an array of pCheckpointDataCount VkCheckpointDataNV structures"
        }
      ]
    },
    "VkCheckpointDataNV": {
      "(VK_NV_device_diagnostic_checkpoints)": [
        {
          "vuid": "sType",
          "text": " sType must be VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV"
        },
        {
          "vuid": "pNext",
          "text": " pNext must be NULL"
        }
      ]
    }
}